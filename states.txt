0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
4	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> T., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> TF., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
10	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
1	
	 Func -> function.Full_form, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params), 
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
2	
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
3	
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
	 Method_signature -> id(.Params):id, 
4	
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id., 
5	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
6	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
7	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
8	
	 Params -> id:id,Params., 
9	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> id,.Params, 
10	
	 Params -> id,Params., 
11	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
12	
	 Method_signature -> id():.id, 
13	
	 Method_signature -> id():id., 
14	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
15	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
16	
	 Method_signature -> id(Params):.id, 
17	
	 Method_signature -> id(Params):id., 
18	
	 Func -> functionFull_form., 
19	
	 Func -> functionInline_form., 
20	
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
21	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
22	
	 Full_form -> Method_signatureExpr_block;., 
23	
	 Atom -> .bool, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Expr_block -> {.Expr_list}, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
24	
	 Atom -> Cast_type., 
25	
	 Term -> Pow., 
26	
	 Expr -> While_loop., 
27	
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
28	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> Term/.Pow, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
29	
	 Term -> Term/Pow., 
30	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> (.Expr), 
	 Index_object -> .Atom[Expr], 
31	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
32	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.id, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
33	
	 Atom -> Expr_block., 
34	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> [.Vector_item_list], 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_exp -> [.], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Member, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
35	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
36	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 And_expr -> And_expr&.Check_type, 
	 Vector -> .Vector_exp, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
37	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .Call_func, 
	 Sign -> -.Factor, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
38	
	 Atom -> Call_func., 
39	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> !.Atom, 
	 Atom -> .num, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
40	
	 Atom -> string., 
41	
	 Vector -> Vector_exp., 
42	
	 Atom -> Index_object., 
43	
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
44	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
45	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
46	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Arguments -> .Expr, 
	 Atom -> .Member, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Call_func -> id(.Arguments), 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Call_func -> id(.), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
47	
	 Call_func -> id()., 
48	
	 Call_func -> id(Arguments.), 
49	
	 Call_func -> id(Arguments)., 
50	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Sign -> +.Factor, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
51	
	 Atom -> num., 
52	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
53	
	 Atom -> Vector., 
54	
	 Atom -> bool., 
55	
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
56	
	 Cast_type -> Atomas.id, 
57	
	 Cast_type -> Atomasid., 
58	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Index_object -> Atom[.Expr], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
59	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
60	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Index_object, 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
61	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
62	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
63	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
64	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
65	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
66	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
67	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
68	
	 Pow -> Sign**Pow., 
69	
	 Atom -> Type_inst., 
70	
	 Vector -> Vector_imp., 
71	
	 Atom -> Member., 
72	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
73	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
74	
	 Type_inst -> newCall_func., 
75	
	 Sign -> Factor., 
76	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> Sign^.Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
77	
	 Pow -> Sign^Pow., 
78	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
79	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
80	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
81	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> Arithmetic+.Term, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
82	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
83	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Term -> Term%.Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
84	
	 Term -> Term%Pow., 
85	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Term -> Term*.Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
86	
	 Term -> Term*Pow., 
87	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
88	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
89	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
90	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
91	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
92	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
93	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
94	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
95	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
96	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> Aritm_comp>.Concat, 
97	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
98	
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .Call_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
99	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
100	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
101	
	 Expr -> Destr_assig., 
102	
	 Expr -> Let_expr., 
103	
	 Expr -> For_loop., 
104	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
105	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Destr_assig -> id:=.Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
106	
	 Destr_assig -> id:=Expr., 
107	
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Destr_assig -> Atom..id:=Expr, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
108	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
109	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
110	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
111	
	 Destr_assig -> Atom.id:=Expr., 
112	
	 For_loop -> for.(idinExpr)Expr, 
113	
	 For_loop -> for(.idinExpr)Expr, 
114	
	 For_loop -> for(id.inExpr)Expr, 
115	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 For_loop -> for(idin.Expr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
116	
	 For_loop -> for(idinExpr.)Expr, 
117	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 For_loop -> for(idinExpr).Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
118	
	 For_loop -> for(idinExpr)Expr., 
119	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
120	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
121	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id=.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
122	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
123	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
124	
	 Assignment -> id=Expr,Assignment., 
125	
	 While_loop -> while.(Expr)Expr, 
126	
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
127	
	 While_loop -> while(Expr.)Expr, 
128	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 While_loop -> while(Expr).Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
129	
	 While_loop -> while(Expr)Expr., 
130	
	 Expr -> Conditional., 
131	
	 Conditional -> if.(Expr)ExprCond_other_case, 
132	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
133	
	 Conditional -> if(Expr.)ExprCond_other_case, 
134	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
135	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
136	
	 Conditional -> if(Expr)ExprCond_other_case., 
137	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Cond_other_case -> else.Expr, 
	 Index_object -> .Atom[Expr], 
138	
	 Cond_other_case -> elseExpr., 
139	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
140	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
141	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
142	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
143	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
144	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
145	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
146	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
147	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Assignment -> id:id=.Expr,Assignment, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Assignment -> id:id=.Expr, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term*Pow, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
148	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
149	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
150	
	 Assignment -> id:id=Expr,Assignment., 
151	
	 Let_expr -> letAssignment.inExpr, 
152	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
153	
	 Let_expr -> letAssignmentinExpr., 
154	
	 Member -> Atom.Call_func., 
155	
	 Index_object -> Atom[Expr.], 
156	
	 Index_object -> Atom[Expr]., 
157	
	 Sign -> +Factor., 
158	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
159	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Arguments -> .Expr, 
	 Atom -> .Member, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
160	
	 Arguments -> Expr,Arguments., 
161	
	 Sign -> -Factor., 
162	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
163	
	 Vector_exp -> []., 
164	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
165	
	 Vector_imp -> [Expr||.idinExpr], 
166	
	 Vector_imp -> [Expr||id.inExpr], 
167	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
168	
	 Vector_imp -> [Expr||idinExpr.], 
169	
	 Vector_imp -> [Expr||idinExpr]., 
170	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Member, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
171	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
172	
	 Vector_item_list -> Expr,Vector_item_list., 
173	
	 Vector_exp -> [Vector_item_list.], 
174	
	 Vector_exp -> [Vector_item_list]., 
175	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
176	
	 Atom -> (Expr.), 
177	
	 Atom -> (Expr)., 
178	
	 Atom -> .bool, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> Expr_item_list., 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
179	
	 Expr_list -> Expr_item_listExpr_list., 
180	
	 Expr_item_list -> Expr.;, 
181	
	 Expr_item_list -> Expr;., 
182	
	 Expr_block -> {Expr_list.}, 
183	
	 Expr_block -> {Expr_list}., 
184	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
	 Inline_form -> Method_signature=>.Expr;, 
185	
	 Inline_form -> Method_signature=>Expr.;, 
186	
	 Inline_form -> Method_signature=>Expr;., 
187	
	 Atom -> .bool, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
188	
	 Program -> Type_function_listExpr_item_list., 
189	
	 S' -> Program., 
190	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> Protocol.Type_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
191	
	 Type_function_list -> ProtocolType_function_list., 
192	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
193	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
194	
	 Protocol -> protocolidProtocol_block., 
195	
	 Method_dec_list -> ., 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
196	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
197	
	 Method_dec_list -> ., 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
198	
	 Method_dec_list -> Method_signature;Method_dec_list., 
199	
	 Protocol_block -> {Method_dec_list.}, 
200	
	 Protocol_block -> {Method_dec_list}., 
201	
	 Protocol -> protocolidextends.idProtocol_block, 
202	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
203	
	 Protocol -> protocolidextendsidProtocol_block., 
204	
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
205	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
206	
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
207	
	 Type_dec -> id(Params.), 
208	
	 Type_dec -> id(Params)., 
209	
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type_block -> .{Type_member_list}, 
210	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
211	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
212	
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Expr -> .Let_expr, 
	 Atom -> .bool, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Arguments -> .Expr, 
	 Atom -> .Member, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
213	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
214	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
215	
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
216	
	 Type_member_item -> Full_form., 
217	
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
218	
	 Type_member_item -> Inline_form., 
219	
	 Type_member_list -> Type_member_itemType_member_list., 
220	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
221	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Type_member_item -> id=.Expr;, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
222	
	 Type_member_item -> id=Expr.;, 
223	
	 Type_member_item -> id=Expr;., 
224	
	 Type_member_item -> id:.id=Expr;, 
225	
	 Type_member_item -> id:id.=Expr;, 
226	
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .While_loop, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Member -> .Atom.id, 
	 Type_member_item -> id:id=.Expr;, 
	 And_expr -> .And_expr&Check_type, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Expr -> .Destr_assig, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> .Atom[Expr], 
227	
	 Type_member_item -> id:id=Expr.;, 
228	
	 Type_member_item -> id:id=Expr;., 
229	
	 Type_block -> {Type_member_list.}, 
230	
	 Type_block -> {Type_member_list}., 
231	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
232	
	 Type -> typeType_decinheritsidType_block., 
233	
	 Type -> typeType_decType_block., 
234	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
235	
	 Type_function_list -> TypeType_function_list., 
236	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
237	
	 Type_function_list -> FuncType_function_list., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 A -> symbol., 
7	
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> (.E), 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
11	
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
1	
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
2	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
3	
	 Params -> .id:id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
4	
	 Type_dec -> id(Params.), 
5	
	 Type_dec -> id(Params)., 
6	
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id., 
7	
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
8	
	 Params -> id,Params., 
9	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
10	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
11	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id, 
12	
	 Params -> id:id,Params., 
13	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
14	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
15	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
16	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Member -> .Atom.id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Type_inst -> .newCall_func, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
17	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
18	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
19	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> id(.), 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Call_func -> id(.Arguments), 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
20	
	 Atom -> Expr_block., 
21	
	 Sign -> Factor., 
22	
	 Expr -> For_loop., 
23	
	 Atom -> Type_inst., 
24	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
25	
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
26	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Assignment -> id=.Expr,Assignment, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Assignment -> id=.Expr, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
27	
	 Expr -> Let_expr., 
28	
	 Destr_assig -> Atom..id:=Expr, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
29	
	 Cast_type -> Atomas.id, 
30	
	 Cast_type -> Atomasid., 
31	
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
32	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
33	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
34	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Sign -> +.Factor, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
35	
	 Sign -> +Factor., 
36	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
37	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
38	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
39	
	 Member -> Atom.Call_func., 
40	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Index_object -> Atom[.Expr], 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
41	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
42	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Atom -> .num, 
43	
	 Atom -> Vector., 
44	
	 Atom -> Call_func., 
45	
	 Term -> Pow., 
46	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> !.Atom, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
47	
	 Atom -> bool., 
48	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_exp -> [.], 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> [.Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
49	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
50	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_item_list -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
51	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
52	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
53	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Or_expr -> Or_expr|.And_expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
54	
	 Atom -> Cast_type., 
55	
	 Atom -> Member., 
56	
	 Vector -> Vector_exp., 
57	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
58	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
59	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
60	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[], 
	 Pow -> Sign**.Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
61	
	 Pow -> Sign**Pow., 
62	
	 Atom -> Index_object., 
63	
	 Atom -> string., 
64	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> (.Expr), 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
65	
	 Atom -> (Expr.), 
66	
	 Atom -> (Expr)., 
67	
	 Expr -> Conditional., 
68	
	 While_loop -> while.(Expr)Expr, 
69	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 While_loop -> while(.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
70	
	 While_loop -> while(Expr.)Expr, 
71	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 While_loop -> while(Expr).Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
72	
	 While_loop -> while(Expr)Expr., 
73	
	 Conditional -> if.(Expr)ExprCond_other_case, 
74	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
75	
	 Conditional -> if(Expr.)ExprCond_other_case, 
76	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
77	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
78	
	 Conditional -> if(Expr)ExprCond_other_case., 
79	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
80	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
81	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
82	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
83	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
84	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
85	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Cond_other_case -> else.Expr, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
86	
	 Cond_other_case -> elseExpr., 
87	
	 For_loop -> for.(idinExpr)Expr, 
88	
	 For_loop -> for(.idinExpr)Expr, 
89	
	 For_loop -> for(id.inExpr)Expr, 
90	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 For_loop -> for(idin.Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
91	
	 For_loop -> for(idinExpr.)Expr, 
92	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
93	
	 For_loop -> for(idinExpr)Expr., 
94	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
95	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
96	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Concat -> Concat@@.Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Atom -> .num, 
97	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
98	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Atom -> .num, 
99	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
100	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> Term/.Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
101	
	 Term -> Term/Pow., 
102	
	 Atom -> num., 
103	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Call_func -> id.(), 
104	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Sign -> -.Factor, 
	 Atom -> .num, 
105	
	 Sign -> -Factor., 
106	
	 Vector -> Vector_imp., 
107	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Expr_block -> {.Expr_list}, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Expr_list -> .Expr_item_list, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
108	
	 Expr_item_list -> Expr.;, 
109	
	 Expr_item_list -> Expr;., 
110	
	 Expr -> Destr_assig., 
111	
	 Expr -> While_loop., 
112	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
113	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Factor -> .!Atom, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
114	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
115	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Term -> Term*.Pow, 
	 Atom -> .num, 
116	
	 Term -> Term*Pow., 
117	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[], 
	 Term -> Term%.Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
118	
	 Term -> Term%Pow., 
119	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
120	
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
121	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
122	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Atom -> .num, 
123	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
124	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
125	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
126	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
127	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
128	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
129	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
130	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
131	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
132	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
133	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
134	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Expr_list -> Expr_item_list., 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Expr_list -> .Expr_item_list, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
135	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
136	
	 Expr_list -> Expr_item_listExpr_list., 
137	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
138	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> id:=.Expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
139	
	 Destr_assig -> id:=Expr., 
140	
	 Expr_block -> {Expr_list.}, 
141	
	 Expr_block -> {Expr_list}., 
142	
	 Atom -> .Index_object, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Pow -> Sign^.Pow, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .num, 
143	
	 Pow -> Sign^Pow., 
144	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
145	
	 Vector_item_list -> Expr,Vector_item_list., 
146	
	 Vector_imp -> [Expr||.idinExpr], 
147	
	 Vector_imp -> [Expr||id.inExpr], 
148	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
149	
	 Vector_imp -> [Expr||idinExpr.], 
150	
	 Vector_imp -> [Expr||idinExpr]., 
151	
	 Vector_exp -> [Vector_item_list.], 
152	
	 Vector_exp -> [Vector_item_list]., 
153	
	 Vector_exp -> []., 
154	
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..Call_func, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
155	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
156	
	 Index_object -> Atom[Expr.], 
157	
	 Index_object -> Atom[Expr]., 
158	
	 Destr_assig -> Atom.id:=Expr., 
159	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
160	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
161	
	 Assignment -> id=Expr,Assignment., 
162	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
163	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
164	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Assignment -> id:id=.Expr, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
165	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
166	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
167	
	 Assignment -> id:id=Expr,Assignment., 
168	
	 Let_expr -> letAssignment.inExpr, 
169	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Let_expr -> letAssignmentin.Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
170	
	 Let_expr -> letAssignmentinExpr., 
171	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
172	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Arguments -> Expr,.Arguments, 
	 Member -> .Atom.id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Type_inst -> .newCall_func, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
173	
	 Arguments -> Expr,Arguments., 
174	
	 Call_func -> id(Arguments.), 
175	
	 Call_func -> id(Arguments)., 
176	
	 Call_func -> id()., 
177	
	 Type_inst -> newCall_func., 
178	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
179	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
180	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
181	
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
182	
	 Type_member_item -> Inline_form., 
183	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
184	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Type_member_item -> id=.Expr;, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
185	
	 Type_member_item -> id=Expr.;, 
186	
	 Type_member_item -> id=Expr;., 
187	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Method_signature -> id(.), 
	 Params -> .id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Params -> .id:id, 
	 Method_signature -> id(.Params):id, 
188	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
189	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
190	
	 Method_signature -> id(Params):.id, 
191	
	 Method_signature -> id(Params):id., 
192	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
193	
	 Method_signature -> id():.id, 
194	
	 Method_signature -> id():id., 
195	
	 Type_member_item -> id:.id=Expr;, 
196	
	 Type_member_item -> id:id.=Expr;, 
197	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Type_member_item -> id:id=.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
198	
	 Type_member_item -> id:id=Expr.;, 
199	
	 Type_member_item -> id:id=Expr;., 
200	
	 Type_member_item -> Full_form., 
201	
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
202	
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
203	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
204	
	 Full_form -> Method_signatureExpr_block;., 
205	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
206	
	 Inline_form -> Method_signature=>Expr.;, 
207	
	 Inline_form -> Method_signature=>Expr;., 
208	
	 Type_member_list -> Type_member_itemType_member_list., 
209	
	 Type_block -> {Type_member_list.}, 
210	
	 Type_block -> {Type_member_list}., 
211	
	 Type -> typeType_decinheritsidType_block., 
212	
	 Type -> typeType_decType_block., 
213	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
214	
	 Type_function_list -> FuncType_function_list., 
215	
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params), 
216	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
217	
	 Func -> functionFull_form., 
218	
	 Func -> functionInline_form., 
219	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
220	
	 Type_function_list -> TypeType_function_list., 
221	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
222	
	 Type_function_list -> ProtocolType_function_list., 
223	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
224	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
225	
	 Protocol -> protocolidProtocol_block., 
226	
	 Protocol -> protocolidextends.idProtocol_block, 
227	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
228	
	 Protocol -> protocolidextendsidProtocol_block., 
229	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
230	
	 Protocol_block -> {Method_dec_list.}, 
231	
	 Protocol_block -> {Method_dec_list}., 
232	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
233	
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
234	
	 Method_dec_list -> Method_signature;Method_dec_list., 
235	
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Let_expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Program -> Type_function_list.Expr_item_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .num, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Arithmetic -> .Term, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> .while(Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Destr_assig, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
1	
	 A -> symbol., 
2	
	 A -> ε., 
3	
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
4	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 A -> .ε, 
	 F -> .A, 
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A*, 
8	
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 S' -> .Program, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
1	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
2	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
3	
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
4	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
5	
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
6	
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
	 Params -> id., 
7	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
8	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
9	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
10	
	 Params -> id:id,Params., 
11	
	 Params -> id,.Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
12	
	 Params -> id,Params., 
13	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
14	
	 Method_signature -> id():.id, 
15	
	 Method_signature -> id():id., 
16	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
17	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
18	
	 Method_signature -> id(Params):.id, 
19	
	 Method_signature -> id(Params):id., 
20	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
21	
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
22	
	 Method_dec_list -> Method_signature;Method_dec_list., 
23	
	 Protocol_block -> {Method_dec_list.}, 
24	
	 Protocol_block -> {Method_dec_list}., 
25	
	 Protocol -> protocolidProtocol_block., 
26	
	 Protocol -> protocolidextends.idProtocol_block, 
27	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
28	
	 Protocol -> protocolidextendsidProtocol_block., 
29	
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
30	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
31	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
32	
	 Func -> function.Full_form, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params), 
33	
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
34	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Atom -> .string, 
	 Expr_list -> .Expr_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Expr_block -> {.Expr_list}, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
35	
	 Destr_assig -> id.:=Expr, 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
36	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Destr_assig -> id:=.Expr, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
37	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
38	
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Pow -> Sign^.Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
39	
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
40	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Call_func -> id(.Arguments), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Call_func -> id(.), 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Factor -> .Atom, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
41	
	 While_loop -> while.(Expr)Expr, 
42	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
43	
	 For_loop -> for.(idinExpr)Expr, 
44	
	 For_loop -> for(.idinExpr)Expr, 
45	
	 For_loop -> for(id.inExpr)Expr, 
46	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> for(idin.Expr)Expr, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
47	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
48	
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Check_type -> .Aritm_comp, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Or_expr -> Or_expr|.And_expr, 
	 Factor -> .Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
49	
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Sign -> -.Factor, 
	 Atom -> .Member, 
	 Atom -> .num, 
50	
	 Vector -> Vector_imp., 
51	
	 Atom -> Member., 
52	
	 Atom -> Index_object., 
53	
	 Atom -> num., 
54	
	 Atom -> Vector., 
55	
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
56	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
57	
	 Type_inst -> newCall_func., 
58	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> [.Vector_item_list], 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_item_list -> .Expr, 
	 Sign -> .Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Vector_exp -> [.], 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
59	
	 Term -> Pow., 
60	
	 Expr -> Destr_assig., 
61	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
62	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Concat -> Concat@@.Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
63	
	 Sign -> Factor., 
64	
	 Atom -> Expr_block., 
65	
	 Atom -> Cast_type., 
66	
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> !.Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Atom -> .Member, 
	 Atom -> .num, 
67	
	 Atom -> string., 
68	
	 Atom -> bool., 
69	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Atom -> (.Expr), 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
70	
	 Expr -> Conditional., 
71	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
72	
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
73	
	 Atom -> Call_func., 
74	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
75	
	 Atom -> .Index_object, 
	 Arithmetic -> Arithmetic+.Term, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
76	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
77	
	 Cast_type -> Atomas.id, 
78	
	 Cast_type -> Atomasid., 
79	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Index_object -> Atom[.Expr], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
80	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
81	
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Check_type -> .Aritm_comp, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
82	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
83	
	 Sign -> +.Factor, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Atom -> .num, 
84	
	 Sign -> +Factor., 
85	
	 Atom -> Type_inst., 
86	
	 Vector -> Vector_exp., 
87	
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
88	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
89	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
90	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
91	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
92	
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Arithmetic -> Arithmetic-.Term, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
93	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
94	
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Term -> Term%.Pow, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
95	
	 Term -> Term%Pow., 
96	
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Term -> Term*.Pow, 
97	
	 Term -> Term*Pow., 
98	
	 Term -> Term/.Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
99	
	 Term -> Term/Pow., 
100	
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
101	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
102	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
103	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
104	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
105	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
106	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
107	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
108	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
109	
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Term -> .Pow, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Term -> .Term*Pow, 
110	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
111	
	 Expr -> While_loop., 
112	
	 Conditional -> if.(Expr)ExprCond_other_case, 
113	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
114	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
115	
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
116	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
117	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
118	
	 Destr_assig -> Atom.id:=Expr., 
119	
	 Expr -> Let_expr., 
120	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
121	
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
122	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
123	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
124	
	 Assignment -> id:id=.Expr, 
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
125	
	 Expr -> For_loop., 
126	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
127	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
128	
	 Assignment -> id:id=Expr,Assignment., 
129	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Assignment -> id=.Expr,Assignment, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Assignment -> id=.Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
130	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
131	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
132	
	 Assignment -> id=Expr,Assignment., 
133	
	 Let_expr -> letAssignment.inExpr, 
134	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Let_expr -> letAssignmentin.Expr, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
135	
	 Let_expr -> letAssignmentinExpr., 
136	
	 Member -> Atom.Call_func., 
137	
	 Conditional -> if(Expr.)ExprCond_other_case, 
138	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
139	
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
140	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Cond_other_case -> else.Expr, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
141	
	 Cond_other_case -> elseExpr., 
142	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
143	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Vector_exp -> .[], 
	 Term -> .Term%Pow, 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
144	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
145	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
146	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
147	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
148	
	 Conditional -> if(Expr)ExprCond_other_case., 
149	
	 Index_object -> Atom[Expr.], 
150	
	 Index_object -> Atom[Expr]., 
151	
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
152	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
153	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
154	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
155	
	 Atom -> (Expr.), 
156	
	 Atom -> (Expr)., 
157	
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
158	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
159	
	 Vector_exp -> [Vector_item_list.], 
160	
	 Vector_exp -> [Vector_item_list]., 
161	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
162	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_item_list -> .Expr, 
	 Sign -> .Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
163	
	 Vector_item_list -> Expr,Vector_item_list., 
164	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
165	
	 Vector_imp -> [Expr||.idinExpr], 
166	
	 Vector_imp -> [Expr||id.inExpr], 
167	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
168	
	 Vector_imp -> [Expr||idinExpr.], 
169	
	 Vector_imp -> [Expr||idinExpr]., 
170	
	 Vector_exp -> []., 
171	
	 Sign -> -Factor., 
172	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
173	
	 For_loop -> for(idinExpr.)Expr, 
174	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
175	
	 For_loop -> for(idinExpr)Expr., 
176	
	 While_loop -> while(Expr.)Expr, 
177	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 While_loop -> while(Expr).Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
178	
	 While_loop -> while(Expr)Expr., 
179	
	 Call_func -> id()., 
180	
	 Call_func -> id(Arguments.), 
181	
	 Call_func -> id(Arguments)., 
182	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
183	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Arguments -> Expr,.Arguments, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Factor -> .Atom, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
184	
	 Arguments -> Expr,Arguments., 
185	
	 Pow -> Sign^Pow., 
186	
	 Atom -> .Index_object, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Factor -> .Atom, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
187	
	 Pow -> Sign**Pow., 
188	
	 Destr_assig -> id:=Expr., 
189	
	 Expr_block -> {Expr_list.}, 
190	
	 Expr_block -> {Expr_list}., 
191	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Atom -> .string, 
	 Expr_list -> .Expr_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Expr_list -> Expr_item_list., 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
192	
	 Expr_list -> Expr_item_listExpr_list., 
193	
	 Expr_item_list -> Expr.;, 
194	
	 Expr_item_list -> Expr;., 
195	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
196	
	 Full_form -> Method_signatureExpr_block;., 
197	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
198	
	 Inline_form -> Method_signature=>Expr.;, 
199	
	 Inline_form -> Method_signature=>Expr;., 
200	
	 Func -> functionFull_form., 
201	
	 Func -> functionInline_form., 
202	
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
203	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
204	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Type_dec -> id(.Params), 
205	
	 Type_dec -> id(Params.), 
206	
	 Type_dec -> id(Params)., 
207	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
208	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
209	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
210	
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> ., 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
211	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
212	
	 Type_member_item -> id:.id=Expr;, 
213	
	 Type_member_item -> id:id.=Expr;, 
214	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Type_member_item -> id:id=.Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
215	
	 Type_member_item -> id:id=Expr.;, 
216	
	 Type_member_item -> id:id=Expr;., 
217	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Type_member_item -> id=.Expr;, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
218	
	 Type_member_item -> id=Expr.;, 
219	
	 Type_member_item -> id=Expr;., 
220	
	 Type_member_item -> Full_form., 
221	
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
222	
	 Type_member_item -> Inline_form., 
223	
	 Type_member_list -> Type_member_itemType_member_list., 
224	
	 Type_block -> {Type_member_list.}, 
225	
	 Type_block -> {Type_member_list}., 
226	
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Term -> .Pow, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Factor -> .Atom, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
227	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
228	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
229	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
230	
	 Type -> typeType_decinheritsidType_block., 
231	
	 Type -> typeType_decType_block., 
232	
	 Type_function_list -> FuncType_function_list., 
233	
	 Type_function_list -> ProtocolType_function_list., 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 S' -> Program., 
236	
	 Program -> Type_function_list.Expr_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Type_inst, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .Vector, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr -> .Conditional, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
3	
	 A -> .(E), 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> (E)., 
6	
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 E -> T., 
7	
	 A -> ε., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 T -> T.F, 
0	
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 S' -> .Program, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
1	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
	 Program -> Type_function_list.Expr_item_list, 
2	
	 Vector -> Vector_exp., 
3	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Sign -> +.Factor, 
4	
	 Atom -> Call_func., 
5	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
6	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Factor -> .Atom, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Call_func -> id(.), 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Call_func -> id(.Arguments), 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
7	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
8	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
9	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Sign -> -.Factor, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
10	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_item_list -> .Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Vector_exp -> [.], 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> [.Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
11	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
12	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Sign -> .-Factor, 
	 Or_expr -> Or_expr|.And_expr, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
13	
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
14	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Term -> Term*.Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
15	
	 Atom -> Expr_block., 
16	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> (.Expr), 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
17	
	 Expr -> Conditional., 
18	
	 Expr -> For_loop., 
19	
	 For_loop -> for.(idinExpr)Expr, 
20	
	 For_loop -> for(.idinExpr)Expr, 
21	
	 For_loop -> for(id.inExpr)Expr, 
22	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 For_loop -> for(idin.Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
23	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
24	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Destr_assig -> id:=.Expr, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
25	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
26	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
27	
	 Sign -> Factor., 
28	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
29	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Pow -> Sign^.Pow, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
30	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Factor -> !.Atom, 
	 Atom -> .Call_func, 
31	
	 Atom -> Vector., 
32	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
33	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
34	
	 Type_inst -> newCall_func., 
35	
	 Atom -> bool., 
36	
	 Atom -> string., 
37	
	 Atom -> Member., 
38	
	 Vector -> Vector_imp., 
39	
	 Atom -> Type_inst., 
40	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Expr_block -> {.Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
41	
	 Expr_block -> {Expr_list.}, 
42	
	 Expr_block -> {Expr_list}., 
43	
	 While_loop -> while.(Expr)Expr, 
44	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 While_loop -> while(.Expr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
45	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
46	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
47	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
48	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
49	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Arithmetic -> Arithmetic+.Term, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
50	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
51	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> Term%.Pow, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
52	
	 Atom -> num., 
53	
	 Atom -> Cast_type., 
54	
	 Atom -> Index_object., 
55	
	 Term -> Term%Pow., 
56	
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
57	
	 Cast_type -> Atomas.id, 
58	
	 Cast_type -> Atomasid., 
59	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Index_object -> Atom[.Expr], 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
60	
	 Expr -> While_loop., 
61	
	 Expr -> Destr_assig., 
62	
	 Index_object -> Atom[Expr.], 
63	
	 Index_object -> Atom[Expr]., 
64	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
65	
	 Let_expr -> letAssignment.inExpr, 
66	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
67	
	 Let_expr -> letAssignmentinExpr., 
68	
	 Conditional -> if.(Expr)ExprCond_other_case, 
69	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
70	
	 Conditional -> if(Expr.)ExprCond_other_case, 
71	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
72	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
73	
	 Conditional -> if(Expr)ExprCond_other_case., 
74	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
	 Cond_other_case -> else.Expr, 
75	
	 Cond_other_case -> elseExpr., 
76	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
77	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Concat -> Concat@.Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
78	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
79	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> Arithmetic-.Term, 
80	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
81	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> Term/.Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
82	
	 Term -> Term/Pow., 
83	
	 Term -> Pow., 
84	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
85	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
86	
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
87	
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
88	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
89	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
	 Destr_assig -> Atom.id:=.Expr, 
90	
	 Destr_assig -> Atom.id:=Expr., 
91	
	 Expr -> Let_expr., 
92	
	 Member -> Atom.Call_func., 
93	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
94	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
95	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
96	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
97	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
98	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
99	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
100	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
101	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
102	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Assignment -> id:id=.Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
103	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
104	
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
105	
	 Assignment -> id:id=Expr,Assignment., 
106	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Factor -> .Atom, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Assignment -> id=.Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
	 Assignment -> id=.Expr,Assignment, 
107	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
108	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
109	
	 Assignment -> id=Expr,Assignment., 
110	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
111	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
112	
	 While_loop -> while(Expr.)Expr, 
113	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
114	
	 While_loop -> while(Expr)Expr., 
115	
	 Expr_item_list -> Expr.;, 
116	
	 Expr_item_list -> Expr;., 
117	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_list -> Expr_item_list., 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
118	
	 Expr_list -> Expr_item_listExpr_list., 
119	
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
120	
	 Pow -> Sign^Pow., 
121	
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Pow -> Sign**.Pow, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
122	
	 Pow -> Sign**Pow., 
123	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
124	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
125	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
126	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
127	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
128	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
129	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
130	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
131	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
132	
	 Type_inst -> .newCall_func, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
133	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
134	
	 Destr_assig -> id:=Expr., 
135	
	 For_loop -> for(idinExpr.)Expr, 
136	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
137	
	 For_loop -> for(idinExpr)Expr., 
138	
	 Atom -> (Expr.), 
139	
	 Atom -> (Expr)., 
140	
	 Term -> Term*Pow., 
141	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
142	
	 Vector_exp -> []., 
143	
	 Vector_exp -> [Vector_item_list.], 
144	
	 Vector_exp -> [Vector_item_list]., 
145	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
146	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_item_list -> .Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
147	
	 Vector_item_list -> Expr,Vector_item_list., 
148	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
149	
	 Vector_imp -> [Expr||.idinExpr], 
150	
	 Vector_imp -> [Expr||id.inExpr], 
151	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
152	
	 Vector_imp -> [Expr||idinExpr.], 
153	
	 Vector_imp -> [Expr||idinExpr]., 
154	
	 Sign -> -Factor., 
155	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
156	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
157	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arguments -> Expr,.Arguments, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
158	
	 Arguments -> Expr,Arguments., 
159	
	 Call_func -> id(Arguments.), 
160	
	 Call_func -> id(Arguments)., 
161	
	 Call_func -> id()., 
162	
	 Sign -> +Factor., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Func -> .functionFull_form, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
165	
	 Type_function_list -> FuncType_function_list., 
166	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
167	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
168	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
169	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
170	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.), 
	 Params -> .id:id,Params, 
171	
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id., 
172	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
173	
	 Params -> id,Params., 
174	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
175	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
176	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
177	
	 Params -> id:id,Params., 
178	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
179	
	 Method_signature -> id():.id, 
180	
	 Method_signature -> id():id., 
181	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
182	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
183	
	 Method_signature -> id(Params):.id, 
184	
	 Method_signature -> id(Params):id., 
185	
	 Protocol_block -> {Method_dec_list.}, 
186	
	 Protocol_block -> {Method_dec_list}., 
187	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
188	
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
189	
	 Method_dec_list -> Method_signature;Method_dec_list., 
190	
	 Protocol -> protocolidProtocol_block., 
191	
	 Protocol -> protocolidextends.idProtocol_block, 
192	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
193	
	 Protocol -> protocolidextendsidProtocol_block., 
194	
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
195	
	 Type_function_list -> TypeType_function_list., 
196	
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
197	
	 Type_function_list -> ProtocolType_function_list., 
198	
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
199	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
200	
	 Type -> typeType_decType_block., 
201	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
202	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
203	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
204	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
205	
	 Type_member_item -> Full_form., 
206	
	 Type_member_item -> Inline_form., 
207	
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
208	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Inline_form -> Method_signature=>.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
209	
	 Inline_form -> Method_signature=>Expr.;, 
210	
	 Inline_form -> Method_signature=>Expr;., 
211	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
212	
	 Full_form -> Method_signatureExpr_block;., 
213	
	 Type_member_list -> Type_member_itemType_member_list., 
214	
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
215	
	 Type_member_item -> id:.id=Expr;, 
216	
	 Type_member_item -> id:id.=Expr;, 
217	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
218	
	 Type_member_item -> id:id=Expr.;, 
219	
	 Type_member_item -> id:id=Expr;., 
220	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Type_member_item -> id=.Expr;, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
221	
	 Type_member_item -> id=Expr.;, 
222	
	 Type_member_item -> id=Expr;., 
223	
	 Type_block -> {Type_member_list.}, 
224	
	 Type_block -> {Type_member_list}., 
225	
	 Type -> typeType_decinheritsidType_block., 
226	
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Let_expr, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Call_func -> .id(), 
	 Expr -> .For_loop, 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Concat -> .Arithmetic, 
	 Sign -> .Factor, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Conditional, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Call_func, 
227	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
228	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
229	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
230	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
231	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
232	
	 Type_dec -> id(Params.), 
233	
	 Type_dec -> id(Params)., 
234	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Func -> function.Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
235	
	 Func -> functionFull_form., 
236	
	 Func -> functionInline_form., 
237	
	 S' -> Program., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 A -> ε., 
5	
	 T -> TF., 
6	
	 E -> .T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
7	
	 T -> F., 
8	
	 A -> symbol., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
12	
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .symbol, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
1	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Func -> .functionInline_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
2	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
3	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
4	
	 Type_member_item -> .Full_form, 
	 Type_member_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
5	
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
6	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Expr_item_list -> .Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> {.Expr_list}, 
	 Expr_list -> .Expr_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
7	
	 For_loop -> for.(idinExpr)Expr, 
8	
	 For_loop -> for(.idinExpr)Expr, 
9	
	 For_loop -> for(id.inExpr)Expr, 
10	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
11	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
12	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
13	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> id(.), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> id(.Arguments), 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
14	
	 Atom -> bool., 
15	
	 Expr -> For_loop., 
16	
	 Atom -> Vector., 
17	
	 While_loop -> while.(Expr)Expr, 
18	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 While_loop -> while(.Expr)Expr, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
19	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
20	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> Sign**.Pow, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
21	
	 Atom -> Call_func., 
22	
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> +.Factor, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
23	
	 Atom -> Cast_type., 
24	
	 Vector_item_list -> .Expr, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> [.Vector_item_list], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> [.], 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
25	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
26	
	 Vector_item_list -> .Expr, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Sign -> .+Factor, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
27	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
28	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
29	
	 Let_expr -> letAssignment.inExpr, 
30	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> letAssignmentin.Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
31	
	 Let_expr -> letAssignmentinExpr., 
32	
	 Sign -> Factor., 
33	
	 Atom -> num., 
34	
	 Expr -> Conditional., 
35	
	 Atom -> string., 
36	
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Member -> .Atom.Call_func, 
	 Factor -> !.Atom, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .(Expr), 
37	
	 Atom -> Expr_block., 
38	
	 Atom -> Member., 
39	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
40	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Index_object -> Atom[.Expr], 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
41	
	 Index_object -> Atom[Expr.], 
42	
	 Index_object -> Atom[Expr]., 
43	
	 Vector -> Vector_imp., 
44	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
45	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> id:=.Expr, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
46	
	 Destr_assig -> id:=Expr., 
47	
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Sign -> -.Factor, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
48	
	 Sign -> -Factor., 
49	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Call_func -> id.(), 
50	
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
51	
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
52	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
53	
	 Member -> Atom.Call_func., 
54	
	 Cast_type -> Atomas.id, 
55	
	 Cast_type -> Atomasid., 
56	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Atom -> (.Expr), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
57	
	 Atom -> (Expr.), 
58	
	 Atom -> (Expr)., 
59	
	 Expr -> Destr_assig., 
60	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Aritm_comp., 
61	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Arithmetic -> .Arithmetic+Term, 
62	
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
63	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> Term*.Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
64	
	 Atom -> Index_object., 
65	
	 Term -> Term*Pow., 
66	
	 Vector -> Vector_exp., 
67	
	 Atom -> Type_inst., 
68	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> Term%.Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
69	
	 Term -> Term%Pow., 
70	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Term -> Term/.Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
71	
	 Term -> Term/Pow., 
72	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
73	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
74	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
75	
	 Term -> Pow., 
76	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
77	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
78	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
79	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> Concat@.Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
80	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
81	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
82	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
83	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
84	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
85	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
86	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
87	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
88	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
89	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
90	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
91	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
92	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
93	
	 Expr -> While_loop., 
94	
	 Expr -> Let_expr., 
95	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
96	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
97	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
98	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
99	
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
100	
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
101	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
102	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
103	
	 Destr_assig -> Atom.id:=Expr., 
104	
	 Conditional -> if.(Expr)ExprCond_other_case, 
105	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
106	
	 Conditional -> if(Expr.)ExprCond_other_case, 
107	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
108	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
109	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
110	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
111	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
112	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
113	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
114	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Cond_other_case -> else.Expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
115	
	 Cond_other_case -> elseExpr., 
116	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
117	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> Or_expr|.And_expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
118	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
119	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 And_expr -> And_expr&.Check_type, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
120	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
121	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
122	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
123	
	 Conditional -> if(Expr)ExprCond_other_case., 
124	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
125	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
126	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
127	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Assignment -> id:id=.Expr, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
128	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
129	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
130	
	 Assignment -> id:id=Expr,Assignment., 
131	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Assignment -> id=.Expr, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Assignment -> id=.Expr,Assignment, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
132	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
133	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
134	
	 Assignment -> id=Expr,Assignment., 
135	
	 Vector_item_list -> Expr,Vector_item_list., 
136	
	 Vector_imp -> [Expr||.idinExpr], 
137	
	 Vector_imp -> [Expr||id.inExpr], 
138	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
139	
	 Vector_imp -> [Expr||idinExpr.], 
140	
	 Vector_imp -> [Expr||idinExpr]., 
141	
	 Vector_exp -> []., 
142	
	 Vector_exp -> [Vector_item_list.], 
143	
	 Vector_exp -> [Vector_item_list]., 
144	
	 Sign -> +Factor., 
145	
	 Pow -> Sign**Pow., 
146	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Pow -> Sign^.Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Atom -> .id, 
	 Atom -> .bool, 
	 Pow -> .Sign, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
147	
	 Pow -> Sign^Pow., 
148	
	 While_loop -> while(Expr.)Expr, 
149	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
150	
	 While_loop -> while(Expr)Expr., 
151	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
152	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arguments -> Expr,.Arguments, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
153	
	 Arguments -> Expr,Arguments., 
154	
	 Call_func -> id()., 
155	
	 Call_func -> id(Arguments.), 
156	
	 Call_func -> id(Arguments)., 
157	
	 Type_inst -> newCall_func., 
158	
	 For_loop -> for(idinExpr.)Expr, 
159	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
160	
	 For_loop -> for(idinExpr)Expr., 
161	
	 Expr_item_list -> Expr.;, 
162	
	 Expr_item_list -> Expr;., 
163	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Expr_list -> Expr_item_list., 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Expr_item_list -> .Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_list -> .Expr_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
164	
	 Expr_list -> Expr_item_listExpr_list., 
165	
	 Expr_block -> {Expr_list.}, 
166	
	 Expr_block -> {Expr_list}., 
167	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
168	
	 Inline_form -> Method_signature=>Expr.;, 
169	
	 Inline_form -> Method_signature=>Expr;., 
170	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
171	
	 Full_form -> Method_signatureExpr_block;., 
172	
	 Type_member_item -> .Full_form, 
	 Type_member_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
173	
	 Type_member_list -> Type_member_itemType_member_list., 
174	
	 Type_member_item -> Full_form., 
175	
	 Type_member_item -> Inline_form., 
176	
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
177	
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.):id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params), 
	 Params -> .id:id, 
178	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
179	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
180	
	 Method_signature -> id(Params):.id, 
181	
	 Method_signature -> id(Params):id., 
182	
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id., 
	 Params -> id.,Params, 
183	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
184	
	 Params -> id,Params., 
185	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
186	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
187	
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
188	
	 Params -> id:id,Params., 
189	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
190	
	 Method_signature -> id():.id, 
191	
	 Method_signature -> id():id., 
192	
	 Type_member_item -> id:.id=Expr;, 
193	
	 Type_member_item -> id:id.=Expr;, 
194	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Type_member_item -> id:id=.Expr;, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
195	
	 Type_member_item -> id:id=Expr.;, 
196	
	 Type_member_item -> id:id=Expr;., 
197	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Type_member_item -> id=.Expr;, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
198	
	 Type_member_item -> id=Expr.;, 
199	
	 Type_member_item -> id=Expr;., 
200	
	 Type_block -> {Type_member_list.}, 
201	
	 Type_block -> {Type_member_list}., 
202	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
203	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
204	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
205	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
206	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
207	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
208	
	 Type -> typeType_decinheritsidType_block., 
209	
	 Type -> typeType_decType_block., 
210	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
211	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id:id, 
212	
	 Type_dec -> id(Params.), 
213	
	 Type_dec -> id(Params)., 
214	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
215	
	 Func -> functionInline_form., 
216	
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
217	
	 Func -> functionFull_form., 
218	
	 Type_function_list -> FuncType_function_list., 
219	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Func -> .functionInline_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
220	
	 Type_function_list -> TypeType_function_list., 
221	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
222	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
223	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
224	
	 Protocol_block -> {Method_dec_list.}, 
225	
	 Protocol_block -> {Method_dec_list}., 
226	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
227	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
228	
	 Method_dec_list -> Method_signature;Method_dec_list., 
229	
	 Protocol -> protocolidextends.idProtocol_block, 
230	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
231	
	 Protocol -> protocolidextendsidProtocol_block., 
232	
	 Protocol -> protocolidProtocol_block., 
233	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
234	
	 Type_function_list -> ProtocolType_function_list., 
235	
	 Sign -> .+Factor, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Cast_type, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Atom -> .Call_func, 
	 Expr_item_list -> .Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Factor -> .Atom, 
	 Destr_assig -> .Or_expr, 
	 Member -> .Atom.Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cast_type -> .Atomasid, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Concat, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Expr -> .While_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A., 
	 F -> A.*, 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 E -> .E|T, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
3	
	 E -> .E|T, 
	 A -> (.E), 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
4	
	 E -> E.|T, 
	 A -> (E.), 
5	
	 A -> (E)., 
6	
	 A -> ε., 
7	
	 E -> T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> symbol., 
11	
	 T -> TF., 
12	
	 T -> F., 
13	
	 E -> E|T., 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
0	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 S' -> .Program, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
1	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Program -> Type_function_list.Expr_item_list, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
2	
	 Expr -> Destr_assig., 
3	
	 Atom -> .id, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> !.Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
4	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Atom -> (.Expr), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
5	
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
6	
	 Cast_type -> Atomas.id, 
7	
	 Cast_type -> Atomasid., 
8	
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
9	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
10	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> id(.), 
	 Member -> .Atom.id, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Call_func -> id(.Arguments), 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
11	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Sign -> +.Factor, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
12	
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
13	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
14	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
15	
	 Member -> Atom.Call_func., 
16	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Index_object -> Atom[.Expr], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
17	
	 Atom -> num., 
18	
	 While_loop -> while.(Expr)Expr, 
19	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 While_loop -> while(.Expr)Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
20	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
21	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
22	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Assignment -> id=.Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
23	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
24	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 And_expr -> And_expr&.Check_type, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
25	
	 Term -> Pow., 
26	
	 Sign -> Factor., 
27	
	 Atom -> Vector., 
28	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
29	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
30	
	 Atom -> Index_object., 
31	
	 Vector -> Vector_imp., 
32	
	 Atom -> Type_inst., 
33	
	 Atom -> bool., 
34	
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Vector_exp -> [.], 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Vector_exp -> [.Vector_item_list], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
35	
	 Vector_exp -> [Vector_item_list.], 
36	
	 Vector_exp -> [Vector_item_list]., 
37	
	 Expr -> Conditional., 
38	
	 Expr -> For_loop., 
39	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
40	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
41	
	 Atom -> Call_func., 
42	
	 Atom -> Expr_block., 
43	
	 Vector -> Vector_exp., 
44	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
45	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
46	
	 Type_inst -> newCall_func., 
47	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
48	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
49	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
50	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Concat -> Concat@.Arithmetic, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
51	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Sign -> -.Factor, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
52	
	 Sign -> -Factor., 
53	
	 Atom -> Cast_type., 
54	
	 Atom -> Member., 
55	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Expr_block -> {.Expr_list}, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
56	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Expr_list -> Expr_item_list., 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Term -> .Term%Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
57	
	 Expr -> Let_expr., 
58	
	 For_loop -> for.(idinExpr)Expr, 
59	
	 For_loop -> for(.idinExpr)Expr, 
60	
	 For_loop -> for(id.inExpr)Expr, 
61	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 For_loop -> for(idin.Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
62	
	 Expr -> While_loop., 
63	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Aritm_comp., 
64	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
65	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
66	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
67	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Pow -> Sign^.Pow, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
68	
	 Pow -> Sign^Pow., 
69	
	 Atom -> string., 
70	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
71	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Pow -> Sign**.Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
72	
	 Pow -> Sign**Pow., 
73	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
74	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Term -> Term/.Pow, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
75	
	 Term -> Term/Pow., 
76	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Term -> Term%.Pow, 
77	
	 Term -> Term%Pow., 
78	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> Term*.Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
79	
	 Term -> Term*Pow., 
80	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
81	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector -> .Vector_exp, 
	 Arithmetic -> Arithmetic-.Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
82	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
83	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> Arithmetic+.Term, 
	 Term -> .Pow, 
84	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
85	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
86	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
87	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
88	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
89	
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
90	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
91	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Term -> .Term%Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
92	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
93	
	 Conditional -> if.(Expr)ExprCond_other_case, 
94	
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
95	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
96	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Or_expr -> Or_expr|.And_expr, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector -> .Vector_imp, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
97	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
98	
	 Conditional -> if(Expr.)ExprCond_other_case, 
99	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
100	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
101	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
102	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
103	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
104	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
105	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
106	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
107	
	 Cond_other_case -> else.Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
108	
	 Cond_other_case -> elseExpr., 
109	
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
110	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Destr_assig -> id:=.Expr, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
111	
	 Destr_assig -> id:=Expr., 
112	
	 Conditional -> if(Expr)ExprCond_other_case., 
113	
	 For_loop -> for(idinExpr.)Expr, 
114	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 For_loop -> for(idinExpr).Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
115	
	 For_loop -> for(idinExpr)Expr., 
116	
	 Expr_list -> Expr_item_listExpr_list., 
117	
	 Expr_item_list -> Expr.;, 
118	
	 Expr_item_list -> Expr;., 
119	
	 Expr_block -> {Expr_list.}, 
120	
	 Expr_block -> {Expr_list}., 
121	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
122	
	 Vector_exp -> []., 
123	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
124	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
125	
	 Vector_item_list -> Expr,Vector_item_list., 
126	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
127	
	 Vector_imp -> [Expr||.idinExpr], 
128	
	 Vector_imp -> [Expr||id.inExpr], 
129	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
130	
	 Vector_imp -> [Expr||idinExpr.], 
131	
	 Vector_imp -> [Expr||idinExpr]., 
132	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
133	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
134	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
135	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
136	
	 Assignment -> id=Expr,Assignment., 
137	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
138	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
139	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Assignment -> id:id=.Expr,Assignment, 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
140	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
141	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
142	
	 Assignment -> id:id=Expr,Assignment., 
143	
	 Let_expr -> letAssignment.inExpr, 
144	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
145	
	 Let_expr -> letAssignmentinExpr., 
146	
	 While_loop -> while(Expr.)Expr, 
147	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 While_loop -> while(Expr).Expr, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
148	
	 While_loop -> while(Expr)Expr., 
149	
	 Index_object -> Atom[Expr.], 
150	
	 Index_object -> Atom[Expr]., 
151	
	 Sign -> +Factor., 
152	
	 Call_func -> id()., 
153	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
154	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Arguments -> Expr,.Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
155	
	 Arguments -> Expr,Arguments., 
156	
	 Call_func -> id(Arguments.), 
157	
	 Call_func -> id(Arguments)., 
158	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
159	
	 Destr_assig -> Atom.id:=Expr., 
160	
	 Atom -> (Expr.), 
161	
	 Atom -> (Expr)., 
162	
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
165	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
166	
	 Protocol -> protocolidProtocol_block., 
167	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
168	
	 Protocol_block -> {Method_dec_list.}, 
169	
	 Protocol_block -> {Method_dec_list}., 
170	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
171	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.), 
172	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
173	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
174	
	 Method_signature -> id(Params):.id, 
175	
	 Method_signature -> id(Params):id., 
176	
	 Params -> id., 
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
177	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> id,.Params, 
	 Params -> .id:id, 
178	
	 Params -> id,Params., 
179	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
180	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
181	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
182	
	 Params -> id:id,Params., 
183	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
184	
	 Method_signature -> id():.id, 
185	
	 Method_signature -> id():id., 
186	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
187	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
188	
	 Method_dec_list -> Method_signature;Method_dec_list., 
189	
	 Protocol -> protocolidextends.idProtocol_block, 
190	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
191	
	 Protocol -> protocolidextendsidProtocol_block., 
192	
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
193	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
194	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
195	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
196	
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Full_form, 
197	
	 Type_member_item -> Inline_form., 
198	
	 Type_member_item -> Full_form., 
199	
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id():id, 
200	
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
201	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_member_item -> id=.Expr;, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
202	
	 Type_member_item -> id=Expr.;, 
203	
	 Type_member_item -> id=Expr;., 
204	
	 Type_member_item -> id:.id=Expr;, 
205	
	 Type_member_item -> id:id.=Expr;, 
206	
	 Type_member_item -> id:id=.Expr;, 
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
207	
	 Type_member_item -> id:id=Expr.;, 
208	
	 Type_member_item -> id:id=Expr;., 
209	
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
210	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
211	
	 Full_form -> Method_signatureExpr_block;., 
212	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Inline_form -> Method_signature=>.Expr;, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
213	
	 Inline_form -> Method_signature=>Expr.;, 
214	
	 Inline_form -> Method_signature=>Expr;., 
215	
	 Type_member_list -> Type_member_itemType_member_list., 
216	
	 Type_block -> {Type_member_list.}, 
217	
	 Type_block -> {Type_member_list}., 
218	
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .Or_expr, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .While_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Pow -> .Sign^Pow, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
219	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
220	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
221	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
222	
	 Type -> typeType_decinheritsidType_block., 
223	
	 Type -> typeType_decType_block., 
224	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
225	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
226	
	 Type_dec -> id(Params.), 
227	
	 Type_dec -> id(Params)., 
228	
	 S' -> Program., 
229	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
230	
	 Type_function_list -> FuncType_function_list., 
231	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
232	
	 Type_function_list -> ProtocolType_function_list., 
233	
	 Type_function_list -> Type.Type_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Func -> function.Inline_form, 
	 Func -> function.Full_form, 
236	
	 Func -> functionInline_form., 
237	
	 Func -> functionFull_form., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
1	
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
2	
	 A -> symbol., 
3	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> T., 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 T -> .TF, 
11	
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
12	
	 T -> F., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 S' -> .Program, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
1	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
	 Type_function_list -> Func.Type_function_list, 
2	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
	 Type_function_list -> Type.Type_function_list, 
3	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
4	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
5	
	 Protocol -> protocolidProtocol_block., 
6	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Protocol_block -> {.Method_dec_list}, 
7	
	 Protocol_block -> {Method_dec_list.}, 
8	
	 Protocol_block -> {Method_dec_list}., 
9	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
10	
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.), 
	 Params -> .id,Params, 
	 Method_signature -> id(.):id, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
11	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
12	
	 Method_signature -> id():.id, 
13	
	 Method_signature -> id():id., 
14	
	 Params -> id., 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id.,Params, 
15	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
16	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
17	
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
18	
	 Params -> id:id,Params., 
19	
	 Params -> id,.Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
20	
	 Params -> id,Params., 
21	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
22	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
23	
	 Method_signature -> id(Params):.id, 
24	
	 Method_signature -> id(Params):id., 
25	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
26	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
27	
	 Method_dec_list -> Method_signature;Method_dec_list., 
28	
	 Protocol -> protocolidextends.idProtocol_block, 
29	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
30	
	 Protocol -> protocolidextendsidProtocol_block., 
31	
	 Type_function_list -> TypeType_function_list., 
32	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
33	
	 Type_function_list -> ProtocolType_function_list., 
34	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsidType_block, 
35	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
36	
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
37	
	 Type_dec -> id(Params.), 
38	
	 Type_dec -> id(Params)., 
39	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
40	
	 Type -> typeType_decType_block., 
41	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
42	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
43	
	 Type -> typeType_decinheritsidType_block., 
44	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Arguments -> .Expr,Arguments, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
45	
	 While_loop -> while.(Expr)Expr, 
46	
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
47	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
48	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .id, 
49	
	 Sign -> Factor., 
50	
	 Vector -> Vector_exp., 
51	
	 Vector -> Vector_imp., 
52	
	 Atom -> Cast_type., 
53	
	 Atom -> Type_inst., 
54	
	 Atom -> Index_object., 
55	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> (.Expr), 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
56	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
57	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Arithmetic -> Arithmetic-.Term, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
58	
	 Atom -> string., 
59	
	 Atom -> Member., 
60	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
61	
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
62	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
63	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Arguments -> .Expr,Arguments, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Call_func -> id(.), 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Call_func -> id(.Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
64	
	 Call_func -> id()., 
65	
	 Call_func -> id(Arguments.), 
66	
	 Call_func -> id(Arguments)., 
67	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
68	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
69	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
70	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> Arithmetic+.Term, 
	 Term -> .Term*Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
71	
	 Term -> Pow., 
72	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> +.Factor, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
73	
	 Sign -> +Factor., 
74	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> [.], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> [.Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
75	
	 Vector_exp -> [Vector_item_list.], 
76	
	 Vector_exp -> [Vector_item_list]., 
77	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
78	
	 Let_expr -> letAssignment.inExpr, 
79	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .id, 
80	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
81	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
82	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
83	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
84	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
85	
	 Atom -> bool., 
86	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
87	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> Sign**.Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Atom -> .id, 
88	
	 Pow -> Sign**Pow., 
89	
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
90	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
91	
	 Type_inst -> newCall_func., 
92	
	 Atom -> num., 
93	
	 Atom -> Expr_block., 
94	
	 Atom -> Vector., 
95	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Factor -> !.Atom, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
96	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .Destr_assig, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Expr_block -> {.Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
97	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .Destr_assig, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Expr_list -> .Expr_item_list, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Expr_list -> Expr_item_list., 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
98	
	 Expr -> Conditional., 
99	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
100	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
101	
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
102	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
103	
	 Conditional -> if.(Expr)ExprCond_other_case, 
104	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .For_loop, 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
105	
	 Expr -> While_loop., 
106	
	 Conditional -> if(Expr.)ExprCond_other_case, 
107	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
108	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
109	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Cond_other_case -> else.Expr, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
110	
	 Cond_other_case -> elseExpr., 
111	
	 For_loop -> for.(idinExpr)Expr, 
112	
	 For_loop -> for(.idinExpr)Expr, 
113	
	 For_loop -> for(id.inExpr)Expr, 
114	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 For_loop -> for(idin.Expr)Expr, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
115	
	 For_loop -> for(idinExpr.)Expr, 
116	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .For_loop, 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> for(idinExpr).Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
117	
	 For_loop -> for(idinExpr)Expr., 
118	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
119	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> And_expr&.Check_type, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
120	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
121	
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
122	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Term -> Term*.Pow, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Atom -> .id, 
123	
	 Term -> Term*Pow., 
124	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Sign -> -.Factor, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
125	
	 Sign -> -Factor., 
126	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
127	
	 Atom -> Call_func., 
128	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Sign -> .-Factor, 
	 Term -> Term/.Pow, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Atom -> .id, 
129	
	 Term -> Term/Pow., 
130	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Term -> Term%.Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Atom -> .id, 
131	
	 Term -> Term%Pow., 
132	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
133	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 And_expr -> .Check_type, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
134	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
135	
	 Expr -> Let_expr., 
136	
	 Expr -> Destr_assig., 
137	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
138	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Destr_assig -> id:=.Expr, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
139	
	 Destr_assig -> id:=Expr., 
140	
	 Expr -> For_loop., 
141	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
142	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
143	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
144	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
145	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
146	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
147	
	 Conditional -> if(Expr)ExprCond_other_case., 
148	
	 Destr_assig -> Atom.id:=Expr., 
149	
	 Member -> Atom.Call_func., 
150	
	 Cast_type -> Atomas.id, 
151	
	 Cast_type -> Atomasid., 
152	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> Atom[.Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
153	
	 Index_object -> Atom[Expr.], 
154	
	 Index_object -> Atom[Expr]., 
155	
	 Expr_item_list -> Expr.;, 
156	
	 Expr_item_list -> Expr;., 
157	
	 Expr_list -> Expr_item_listExpr_list., 
158	
	 Expr_block -> {Expr_list.}, 
159	
	 Expr_block -> {Expr_list}., 
160	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
161	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> Sign^.Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Atom -> .id, 
162	
	 Pow -> Sign^Pow., 
163	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
164	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
165	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
166	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
167	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
168	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
169	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
170	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
171	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Atom -> .id, 
172	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
173	
	 Let_expr -> letAssignmentinExpr., 
174	
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
175	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
176	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
177	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Assignment -> id:id=.Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
178	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
179	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
180	
	 Assignment -> id:id=Expr,Assignment., 
181	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Assignment -> id=.Expr,Assignment, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Assignment -> id=.Expr, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
182	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
183	
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
184	
	 Assignment -> id=Expr,Assignment., 
185	
	 Vector_exp -> []., 
186	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
187	
	 Vector_imp -> [Expr||.idinExpr], 
188	
	 Vector_imp -> [Expr||id.inExpr], 
189	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .For_loop, 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> [Expr||idin.Expr], 
190	
	 Vector_imp -> [Expr||idinExpr.], 
191	
	 Vector_imp -> [Expr||idinExpr]., 
192	
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Expr -> .Conditional, 
	 Atom -> .id, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
193	
	 Vector_item_list -> Expr,Vector_item_list., 
194	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
195	
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
196	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
197	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Arguments -> .Expr,Arguments, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .(Expr), 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
198	
	 Arguments -> Expr,Arguments., 
199	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
200	
	 Atom -> (Expr.), 
201	
	 Atom -> (Expr)., 
202	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
203	
	 While_loop -> while(Expr.)Expr, 
204	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 While_loop -> while(Expr).Expr, 
	 Expr -> .Conditional, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
205	
	 While_loop -> while(Expr)Expr., 
206	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
207	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
208	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
209	
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .id:id=Expr;, 
210	
	 Type_member_item -> Inline_form., 
211	
	 Type_block -> {Type_member_list.}, 
212	
	 Type_block -> {Type_member_list}., 
213	
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
214	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
215	
	 Full_form -> Method_signatureExpr_block;., 
216	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
217	
	 Inline_form -> Method_signature=>Expr.;, 
218	
	 Inline_form -> Method_signature=>Expr;., 
219	
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
220	
	 Type_member_item -> id:.id=Expr;, 
221	
	 Type_member_item -> id:id.=Expr;, 
222	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Type_member_item -> id:id=.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
223	
	 Type_member_item -> id:id=Expr.;, 
224	
	 Type_member_item -> id:id=Expr;., 
225	
	 Type_member_item -> id=.Expr;, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Expr -> .Conditional, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
226	
	 Type_member_item -> id=Expr.;, 
227	
	 Type_member_item -> id=Expr;., 
228	
	 Type_member_item -> Full_form., 
229	
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id:id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
230	
	 Type_member_list -> Type_member_itemType_member_list., 
231	
	 Method_signature -> .id(Params), 
	 Func -> function.Full_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
232	
	 Func -> functionFull_form., 
233	
	 Func -> functionInline_form., 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Expr -> .For_loop, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign, 
	 Arithmetic -> .Term, 
	 Pow -> .Sign^Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .Check_type, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .Destr_assig, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_imp, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Type_inst, 
	 While_loop -> .while(Expr)Expr, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
2	
	 A -> ε., 
3	
	 A -> symbol., 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 A -> (.E), 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|.T, 
	 A -> .(E), 
11	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 S' -> .Program, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
1	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
2	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
3	
	 Type_function_list -> ProtocolType_function_list., 
4	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
5	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
6	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
7	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
8	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Arguments -> .Expr, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
9	
	 Expr -> While_loop., 
10	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
11	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
12	
	 Atom -> string., 
13	
	 Atom -> Index_object., 
14	
	 Atom -> Expr_block., 
15	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Factor -> !.Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
16	
	 Vector -> Vector_exp., 
17	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
18	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
19	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Arguments -> .Expr, 
	 Call_func -> id(.), 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> id(.Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
20	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
21	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arguments -> .Expr,Arguments, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Arguments -> .Expr, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
22	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
23	
	 Let_expr -> letAssignment.inExpr, 
24	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
25	
	 Let_expr -> letAssignmentinExpr., 
26	
	 Sign -> +.Factor, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
27	
	 Atom -> Vector., 
28	
	 Atom -> Type_inst., 
29	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> (.Expr), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
30	
	 Atom -> (Expr.), 
31	
	 Atom -> (Expr)., 
32	
	 For_loop -> for.(idinExpr)Expr, 
33	
	 For_loop -> for(.idinExpr)Expr, 
34	
	 For_loop -> for(id.inExpr)Expr, 
35	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> for(idin.Expr)Expr, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
36	
	 For_loop -> for(idinExpr.)Expr, 
37	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 For_loop -> for(idinExpr).Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
38	
	 For_loop -> for(idinExpr)Expr., 
39	
	 Atom -> Cast_type., 
40	
	 Atom -> Call_func., 
41	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
42	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> Arithmetic+.Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
43	
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> [.], 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Vector_exp -> [.Vector_item_list], 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
44	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
45	
	 Vector_imp -> [Expr||.idinExpr], 
46	
	 Vector_imp -> [Expr||id.inExpr], 
47	
	 Vector_imp -> [Expr||idin.Expr], 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
48	
	 Vector_imp -> [Expr||idinExpr.], 
49	
	 Vector_imp -> [Expr||idinExpr]., 
50	
	 While_loop -> while.(Expr)Expr, 
51	
	 While_loop -> while(.Expr)Expr, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
52	
	 While_loop -> while(Expr.)Expr, 
53	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 While_loop -> while(Expr).Expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
54	
	 While_loop -> while(Expr)Expr., 
55	
	 Conditional -> if.(Expr)ExprCond_other_case, 
56	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
57	
	 Conditional -> if(Expr.)ExprCond_other_case, 
58	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
59	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
60	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Cond_other_case -> else.Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
61	
	 Cond_other_case -> elseExpr., 
62	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
63	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> id:=.Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Term -> .Term*Pow, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
64	
	 Destr_assig -> id:=Expr., 
65	
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
66	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Term -> Term*.Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
67	
	 Sign -> Factor., 
68	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
69	
	 Atom -> num., 
70	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
71	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Pow -> Sign**.Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
72	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Sign -> -.Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Index_object, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
73	
	 Sign -> -Factor., 
74	
	 Vector -> Vector_imp., 
75	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Expr_block -> {.Expr_list}, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Expr_item_list -> .Expr;, 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
76	
	 Expr_item_list -> Expr.;, 
77	
	 Expr_item_list -> Expr;., 
78	
	 Expr_block -> {Expr_list.}, 
79	
	 Expr_block -> {Expr_list}., 
80	
	 Expr -> Destr_assig., 
81	
	 Expr -> Conditional., 
82	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
83	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Check_type -> .Aritm_comp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
84	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
85	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
86	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
87	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
88	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> Arithmetic-.Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
89	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
90	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Term -> Term/.Pow, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
91	
	 Term -> Term/Pow., 
92	
	 Atom -> Member., 
93	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
94	
	 Cast_type -> Atomas.id, 
95	
	 Cast_type -> Atomasid., 
96	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
97	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
98	
	 Member -> Atom.Call_func., 
99	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Index_object -> Atom[.Expr], 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
100	
	 Index_object -> Atom[Expr.], 
101	
	 Index_object -> Atom[Expr]., 
102	
	 Expr -> For_loop., 
103	
	 Expr -> Let_expr., 
104	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
105	
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
106	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
107	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
108	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
109	
	 Term -> Pow., 
110	
	 Atom -> bool., 
111	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
112	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
113	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Sign -> .Factor, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
114	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
115	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
116	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
117	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
118	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
119	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
120	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
121	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
122	
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
123	
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
124	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
125	
	 Destr_assig -> Atom.id:=Expr., 
126	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
127	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Or_expr -> Or_expr|.And_expr, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Check_type -> .Aritm_comp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
128	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
129	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Term -> Term%.Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
130	
	 Term -> Term%Pow., 
131	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Expr_list -> Expr_item_list., 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Expr_item_list -> .Expr;, 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
132	
	 Expr_list -> Expr_item_listExpr_list., 
133	
	 Pow -> Sign**Pow., 
134	
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> Sign^.Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
135	
	 Pow -> Sign^Pow., 
136	
	 Term -> Term*Pow., 
137	
	 Conditional -> if(Expr)ExprCond_other_case., 
138	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
139	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
140	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
141	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
142	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
143	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
144	
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
145	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
146	
	 Vector_item_list -> Expr,Vector_item_list., 
147	
	 Vector_exp -> []., 
148	
	 Vector_exp -> [Vector_item_list.], 
149	
	 Vector_exp -> [Vector_item_list]., 
150	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
151	
	 Sign -> +Factor., 
152	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
153	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Assignment -> id=.Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Assignment -> id=.Expr,Assignment, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
154	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
155	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
156	
	 Assignment -> id=Expr,Assignment., 
157	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
158	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
159	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id:id=.Expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
160	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
161	
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
162	
	 Assignment -> id:id=Expr,Assignment., 
163	
	 Arguments -> Expr,Arguments., 
164	
	 Call_func -> id(Arguments.), 
165	
	 Call_func -> id(Arguments)., 
166	
	 Call_func -> id()., 
167	
	 Type_inst -> newCall_func., 
168	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Factor -> !Atom., 
169	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
170	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
171	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
172	
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
173	
	 Type_member_item -> Full_form., 
174	
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
175	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
176	
	 Inline_form -> Method_signature=>Expr.;, 
177	
	 Inline_form -> Method_signature=>Expr;., 
178	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
179	
	 Full_form -> Method_signatureExpr_block;., 
180	
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
181	
	 Type_member_list -> Type_member_itemType_member_list., 
182	
	 Type_member_item -> Inline_form., 
183	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
184	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Type_member_item -> id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Term -> .Term*Pow, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
185	
	 Type_member_item -> id=Expr.;, 
186	
	 Type_member_item -> id=Expr;., 
187	
	 Type_member_item -> id:.id=Expr;, 
188	
	 Type_member_item -> id:id.=Expr;, 
189	
	 Term -> .Term/Pow, 
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Type_member_item -> id:id=.Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
190	
	 Type_member_item -> id:id=Expr.;, 
191	
	 Type_member_item -> id:id=Expr;., 
192	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.), 
193	
	 Params -> id.:id,Params, 
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.,Params, 
194	
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id,Params, 
195	
	 Params -> id,Params., 
196	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
197	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
198	
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id,Params, 
199	
	 Params -> id:id,Params., 
200	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
201	
	 Method_signature -> id():.id, 
202	
	 Method_signature -> id():id., 
203	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
204	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
205	
	 Method_signature -> id(Params):.id, 
206	
	 Method_signature -> id(Params):id., 
207	
	 Type_block -> {Type_member_list.}, 
208	
	 Type_block -> {Type_member_list}., 
209	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
210	
	 Type -> typeType_decinheritsidType_block., 
211	
	 Type -> typeType_decType_block., 
212	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
213	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
214	
	 Type_dec -> id(Params.), 
215	
	 Type_dec -> id(Params)., 
216	
	 Func -> .functionInline_form, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
217	
	 Type_function_list -> TypeType_function_list., 
218	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
219	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
220	
	 Protocol -> protocolidProtocol_block., 
221	
	 Protocol -> protocolidextends.idProtocol_block, 
222	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
223	
	 Protocol -> protocolidextendsidProtocol_block., 
224	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
225	
	 Protocol_block -> {Method_dec_list.}, 
226	
	 Protocol_block -> {Method_dec_list}., 
227	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
228	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
229	
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
230	
	 Method_dec_list -> Method_signature;Method_dec_list., 
231	
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Full_form, 
	 Method_signature -> .id():id, 
232	
	 Func -> functionInline_form., 
233	
	 Func -> functionFull_form., 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 Check_type -> .Aritm_comp, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Program -> Type_function_list.Expr_item_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Term -> .Term*Pow, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Expr -> .Conditional, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr -> .For_loop, 
	 Atom -> .Expr_block, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Call_func -> .id(Arguments), 
	 Expr_item_list -> .Expr;, 
	 Vector -> .Vector_exp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 While_loop -> .while(Expr)Expr, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> ε., 
6	
	 A -> symbol., 
7	
	 T -> F., 
8	
	 E -> E|T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
9	
	 T -> TF., 
10	
	 T -> .TF, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .ε, 
	 E -> T., 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
0	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 S' -> .Program, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
1	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Program -> Type_function_list.Expr_item_list, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
2	
	 For_loop -> for.(idinExpr)Expr, 
3	
	 For_loop -> for(.idinExpr)Expr, 
4	
	 For_loop -> for(id.inExpr)Expr, 
5	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 For_loop -> for(idin.Expr)Expr, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
6	
	 Sign -> Factor., 
7	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
8	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Arithmetic -> Arithmetic+.Term, 
9	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
10	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Pow -> Sign**.Pow, 
	 Vector_exp -> .[], 
11	
	 Atom -> Index_object., 
12	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
13	
	 Cast_type -> Atomas.id, 
14	
	 Cast_type -> Atomasid., 
15	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Index_object -> Atom[.Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
16	
	 While_loop -> while.(Expr)Expr, 
17	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 While_loop -> while(.Expr)Expr, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
18	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
19	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
20	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
21	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Arithmetic -> Arithmetic-.Term, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
22	
	 Term -> Pow., 
23	
	 Atom -> Call_func., 
24	
	 Atom -> Vector., 
25	
	 Atom -> Type_inst., 
26	
	 Vector -> .Vector_exp, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Factor -> !.Atom, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
27	
	 Vector -> Vector_imp., 
28	
	 Atom -> Cast_type., 
29	
	 Atom -> Member., 
30	
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
31	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
32	
	 Member -> Atom.Call_func., 
33	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
34	
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> id(.Arguments), 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Call_func -> id(.), 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
35	
	 Expr -> Let_expr., 
36	
	 Expr -> For_loop., 
37	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
38	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> Atom..id:=Expr, 
39	
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
40	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
41	
	 Conditional -> if.(Expr)ExprCond_other_case, 
42	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
43	
	 Expr -> While_loop., 
44	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
45	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Check_type -> .Aritm_comp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
46	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Vector_item_list -> .Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> [.], 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> [.Vector_item_list], 
	 Member -> .Atom.id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
47	
	 Vector_exp -> []., 
48	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
49	
	 Type_inst -> newCall_func., 
50	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
51	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Sign -> -.Factor, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
52	
	 Sign -> -Factor., 
53	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
54	
	 Atom -> string., 
55	
	 Atom -> bool., 
56	
	 Atom -> num., 
57	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Expr_block -> {.Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_list -> .Expr_item_list, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .string, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
58	
	 Expr_block -> {Expr_list.}, 
59	
	 Expr_block -> {Expr_list}., 
60	
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
61	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> id:=.Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
62	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
63	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> Or_expr|.And_expr, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Check_type -> .Aritm_comp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
64	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
65	
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
66	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Term -> Term/.Pow, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
67	
	 Term -> Term/Pow., 
68	
	 Sign -> +.Factor, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
69	
	 Sign -> +Factor., 
70	
	 Vector -> Vector_exp., 
71	
	 Atom -> Expr_block., 
72	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> (.Expr), 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
73	
	 Expr -> Conditional., 
74	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
75	
	 Let_expr -> letAssignment.inExpr, 
76	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Let_expr -> letAssignmentin.Expr, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
77	
	 Expr -> Destr_assig., 
78	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
79	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
80	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
81	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
82	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
83	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> Concat@@.Arithmetic, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
84	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
85	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
86	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
87	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
88	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
89	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
90	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
91	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
92	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
93	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic+Term, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
94	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
95	
	 Let_expr -> letAssignmentinExpr., 
96	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
97	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
98	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .Type_inst, 
	 Assignment -> id=.Expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
99	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
100	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
101	
	 Assignment -> id=Expr,Assignment., 
102	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
103	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
104	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Assignment -> id:id=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
105	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
106	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
107	
	 Assignment -> id:id=Expr,Assignment., 
108	
	 Atom -> (Expr.), 
109	
	 Atom -> (Expr)., 
110	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Term -> Term*.Pow, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
111	
	 Term -> Term*Pow., 
112	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Term -> Term%.Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
113	
	 Term -> Term%Pow., 
114	
	 Destr_assig -> id:=Expr., 
115	
	 Expr_item_list -> Expr.;, 
116	
	 Expr_item_list -> Expr;., 
117	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_list -> Expr_item_list., 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_list -> .Expr_item_list, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .string, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
118	
	 Expr_list -> Expr_item_listExpr_list., 
119	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
120	
	 Vector_imp -> [Expr||.idinExpr], 
121	
	 Vector_imp -> [Expr||id.inExpr], 
122	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
123	
	 Vector_imp -> [Expr||idinExpr.], 
124	
	 Vector_imp -> [Expr||idinExpr]., 
125	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Vector_item_list -> .Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
126	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
127	
	 Vector_item_list -> Expr,Vector_item_list., 
128	
	 Vector_exp -> [Vector_item_list.], 
129	
	 Vector_exp -> [Vector_item_list]., 
130	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
131	
	 Conditional -> if(Expr.)ExprCond_other_case, 
132	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
133	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
134	
	 Conditional -> if(Expr)ExprCond_other_case., 
135	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Cond_other_case -> else.Expr, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
136	
	 Cond_other_case -> elseExpr., 
137	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
138	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
139	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
140	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
141	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
142	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
143	
	 Destr_assig -> Atom.id:=Expr., 
144	
	 Call_func -> id()., 
145	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
146	
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Arguments -> Expr,.Arguments, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
147	
	 Arguments -> Expr,Arguments., 
148	
	 Call_func -> id(Arguments.), 
149	
	 Call_func -> id(Arguments)., 
150	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
151	
	 While_loop -> while(Expr.)Expr, 
152	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 While_loop -> while(Expr).Expr, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
153	
	 While_loop -> while(Expr)Expr., 
154	
	 Index_object -> Atom[Expr.], 
155	
	 Index_object -> Atom[Expr]., 
156	
	 Pow -> Sign**Pow., 
157	
	 Vector -> .Vector_exp, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Pow -> Sign^.Pow, 
	 Call_func -> .id(), 
	 Atom -> .Cast_type, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Type_inst, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
158	
	 Pow -> Sign^Pow., 
159	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
160	
	 For_loop -> for(idinExpr.)Expr, 
161	
	 For_loop -> for(idinExpr).Expr, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
162	
	 For_loop -> for(idinExpr)Expr., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
165	
	 Type_function_list -> TypeType_function_list., 
166	
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
167	
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
168	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
169	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
170	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .id:id=Expr;, 
171	
	 Type_member_item -> Full_form., 
172	
	 Type_member_item -> Inline_form., 
173	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .id:id=Expr;, 
174	
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
175	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
176	
	 Full_form -> Method_signatureExpr_block;., 
177	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
178	
	 Inline_form -> Method_signature=>Expr.;, 
179	
	 Inline_form -> Method_signature=>Expr;., 
180	
	 Type_member_list -> Type_member_itemType_member_list., 
181	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
182	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Type_member_item -> id=.Expr;, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
183	
	 Type_member_item -> id=Expr.;, 
184	
	 Type_member_item -> id=Expr;., 
185	
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id:id, 
186	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
187	
	 Method_signature -> id():.id, 
188	
	 Method_signature -> id():id., 
189	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
190	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
191	
	 Method_signature -> id(Params):.id, 
192	
	 Method_signature -> id(Params):id., 
193	
	 Params -> id., 
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
194	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
195	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
196	
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
197	
	 Params -> id:id,Params., 
198	
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
199	
	 Params -> id,Params., 
200	
	 Type_member_item -> id:.id=Expr;, 
201	
	 Type_member_item -> id:id.=Expr;, 
202	
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
203	
	 Type_member_item -> id:id=Expr.;, 
204	
	 Type_member_item -> id:id=Expr;., 
205	
	 Type_block -> {Type_member_list.}, 
206	
	 Type_block -> {Type_member_list}., 
207	
	 Type -> typeType_decinheritsidType_block., 
208	
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr_block -> .{Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .Let_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Sign -> .Factor, 
	 Atom -> .num, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Vector, 
	 Atom -> .Index_object, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Pow -> .Sign, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Atom -> .Member, 
	 Or_expr -> .And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .string, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term%Pow, 
	 Atom -> .Expr_block, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
209	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
210	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
211	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
212	
	 Type -> typeType_decType_block., 
213	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
214	
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
215	
	 Type_dec -> id(Params.), 
216	
	 Type_dec -> id(Params)., 
217	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
218	
	 Type_function_list -> FuncType_function_list., 
219	
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
	 Method_signature -> .id(Params), 
	 Func -> function.Inline_form, 
220	
	 Func -> functionFull_form., 
221	
	 Func -> functionInline_form., 
222	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
223	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
224	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
225	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
226	
	 Protocol_block -> {Method_dec_list.}, 
227	
	 Protocol_block -> {Method_dec_list}., 
228	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
229	
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
230	
	 Method_dec_list -> Method_signature;Method_dec_list., 
231	
	 Protocol -> protocolidextends.idProtocol_block, 
232	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
233	
	 Protocol -> protocolidextendsidProtocol_block., 
234	
	 Protocol -> protocolidProtocol_block., 
235	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
236	
	 Type_function_list -> ProtocolType_function_list., 
237	
	 S' -> Program., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 F -> A.*, 
	 F -> A., 
4	
	 F -> A*., 
5	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> .T, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 A -> symbol., 
3	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
4	
	 T -> TF., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .T, 
	 F -> .A*, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A*, 
12	
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .Program, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
1	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
2	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
3	
	 Protocol -> protocolidextends.idProtocol_block, 
4	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
5	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
6	
	 Protocol_block -> {Method_dec_list.}, 
7	
	 Protocol_block -> {Method_dec_list}., 
8	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
9	
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
10	
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
	 Params -> id., 
	 Params -> id.:id, 
11	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
12	
	 Params -> id,Params., 
13	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
14	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
15	
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
16	
	 Params -> id:id,Params., 
17	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
18	
	 Method_signature -> id():.id, 
19	
	 Method_signature -> id():id., 
20	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
21	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
22	
	 Method_signature -> id(Params):.id, 
23	
	 Method_signature -> id(Params):id., 
24	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
25	
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
26	
	 Method_dec_list -> Method_signature;Method_dec_list., 
27	
	 Protocol -> protocolidextendsidProtocol_block., 
28	
	 Protocol -> protocolidProtocol_block., 
29	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
30	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
31	
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Inline_form, 
32	
	 Func -> functionInline_form., 
33	
	 Func -> functionFull_form., 
34	
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
35	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
36	
	 Full_form -> Method_signatureExpr_block;., 
37	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_list -> .Expr_item_list, 
	 Expr_block -> {.Expr_list}, 
38	
	 Atom -> Type_inst., 
39	
	 Atom -> Member., 
40	
	 Term -> Pow., 
41	
	 For_loop -> for.(idinExpr)Expr, 
42	
	 For_loop -> for(.idinExpr)Expr, 
43	
	 For_loop -> for(id.inExpr)Expr, 
44	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
45	
	 Atom -> num., 
46	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
47	
	 Type_inst -> newCall_func., 
48	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
49	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Call_func -> id(.Arguments), 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Call_func -> id(.), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
50	
	 Call_func -> id()., 
51	
	 Expr -> Destr_assig., 
52	
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
53	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> id:=.Expr, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
54	
	 Sign -> Factor., 
55	
	 Atom -> Expr_block., 
56	
	 Conditional -> if.(Expr)ExprCond_other_case, 
57	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
58	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr,Assignment, 
59	
	 Let_expr -> letAssignment.inExpr, 
60	
	 Let_expr -> letAssignmentin.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
61	
	 Atom -> Vector., 
62	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Sign -> +.Factor, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
63	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
64	
	 Sign -> +Factor., 
65	
	 Atom -> Index_object., 
66	
	 Vector -> Vector_imp., 
67	
	 Atom -> Cast_type., 
68	
	 Atom -> string., 
69	
	 Atom -> bool., 
70	
	 Vector -> Vector_exp., 
71	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> !.Atom, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .id, 
	 Atom -> .Call_func, 
72	
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
73	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
74	
	 Member -> Atom.Call_func., 
75	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
76	
	 Cast_type -> Atomas.id, 
77	
	 Cast_type -> Atomasid., 
78	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> Atom[.Expr], 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
79	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Sign -> -.Factor, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
80	
	 Sign -> -Factor., 
81	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
82	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Vector_exp -> [.Vector_item_list], 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Vector_item_list -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Vector_exp -> [.], 
	 Atom -> .Vector, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
83	
	 Vector_exp -> [Vector_item_list.], 
84	
	 Vector_exp -> [Vector_item_list]., 
85	
	 Vector_exp -> []., 
86	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
87	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
88	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
89	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Pow -> Sign^.Pow, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
90	
	 Pow -> Sign^Pow., 
91	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> (.Expr), 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
92	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
93	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 And_expr -> And_expr&.Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
94	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
95	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
96	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Check_typeisAritm_comp., 
97	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
98	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
99	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Concat -> Concat@.Arithmetic, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
100	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
101	
	 Arithmetic -> Arithmetic+.Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
102	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
103	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Term -> Term*.Pow, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
104	
	 Term -> Term*Pow., 
105	
	 Atom -> Call_func., 
106	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Term -> Term%.Pow, 
	 Factor -> .!Atom, 
107	
	 Term -> Term%Pow., 
108	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Term -> Term/.Pow, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
109	
	 Term -> Term/Pow., 
110	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> Arithmetic-.Term, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
111	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
112	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
113	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
114	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
115	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
116	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
117	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
118	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
119	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
120	
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
121	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
122	
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Term -> .Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
123	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
124	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
125	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
126	
	 Expr -> Conditional., 
127	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
128	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
129	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
130	
	 Expr -> Let_expr., 
131	
	 While_loop -> while.(Expr)Expr, 
132	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 While_loop -> while(.Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
133	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Destr_assig -> Atom..id:=Expr, 
134	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
135	
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
136	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
137	
	 Expr -> While_loop., 
138	
	 Expr -> For_loop., 
139	
	 Destr_assig -> Atom.id:=Expr., 
140	
	 While_loop -> while(Expr.)Expr, 
141	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
142	
	 While_loop -> while(Expr)Expr., 
143	
	 Atom -> (Expr.), 
144	
	 Atom -> (Expr)., 
145	
	 Pow -> Sign**.Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
146	
	 Pow -> Sign**Pow., 
147	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
148	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
149	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Vector_item_list -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
150	
	 Vector_item_list -> Expr,Vector_item_list., 
151	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
152	
	 Vector_imp -> [Expr||.idinExpr], 
153	
	 Vector_imp -> [Expr||id.inExpr], 
154	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> [Expr||idin.Expr], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
155	
	 Vector_imp -> [Expr||idinExpr.], 
156	
	 Vector_imp -> [Expr||idinExpr]., 
157	
	 Index_object -> Atom[Expr.], 
158	
	 Index_object -> Atom[Expr]., 
159	
	 Let_expr -> letAssignmentinExpr., 
160	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
161	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
162	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
163	
	 Assignment -> id:id=.Expr,Assignment, 
	 Assignment -> id:id=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
164	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
165	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
166	
	 Assignment -> id:id=Expr,Assignment., 
167	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .Vector, 
	 Expr -> .For_loop, 
	 Assignment -> id=.Expr, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
168	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
169	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
170	
	 Assignment -> id=Expr,Assignment., 
171	
	 Conditional -> if(Expr.)ExprCond_other_case, 
172	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
173	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
174	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
175	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
176	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
177	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
178	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
179	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
180	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Cond_other_case -> else.Expr, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
181	
	 Cond_other_case -> elseExpr., 
182	
	 Conditional -> if(Expr)ExprCond_other_case., 
183	
	 Destr_assig -> id:=Expr., 
184	
	 Call_func -> id(Arguments.), 
185	
	 Call_func -> id(Arguments)., 
186	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
187	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Arguments -> Expr,.Arguments, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
188	
	 Arguments -> Expr,Arguments., 
189	
	 For_loop -> for(idinExpr.)Expr, 
190	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
191	
	 For_loop -> for(idinExpr)Expr., 
192	
	 Expr_block -> {Expr_list.}, 
193	
	 Expr_block -> {Expr_list}., 
194	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> Expr_item_list., 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_list -> .Expr_item_list, 
	 Factor -> .!Atom, 
195	
	 Expr_list -> Expr_item_listExpr_list., 
196	
	 Expr_item_list -> Expr.;, 
197	
	 Expr_item_list -> Expr;., 
198	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
199	
	 Inline_form -> Method_signature=>Expr.;, 
200	
	 Inline_form -> Method_signature=>Expr;., 
201	
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
202	
	 Type_function_list -> FuncType_function_list., 
203	
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
204	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
205	
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
206	
	 Type_dec -> id(Params.), 
207	
	 Type_dec -> id(Params)., 
208	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
209	
	 Type_member_item -> .Inline_form, 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
210	
	 Type_member_item -> Inline_form., 
211	
	 Type_block -> {Type_member_list.}, 
212	
	 Type_block -> {Type_member_list}., 
213	
	 Type_member_item -> Full_form., 
214	
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> Type_member_item.Type_member_list, 
215	
	 Type_member_list -> Type_member_itemType_member_list., 
216	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
217	
	 Type_member_item -> id:.id=Expr;, 
218	
	 Type_member_item -> id:id.=Expr;, 
219	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Type_member_item -> id:id=.Expr;, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
220	
	 Type_member_item -> id:id=Expr.;, 
221	
	 Type_member_item -> id:id=Expr;., 
222	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Type_member_item -> id=.Expr;, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
223	
	 Type_member_item -> id=Expr.;, 
224	
	 Type_member_item -> id=Expr;., 
225	
	 Type -> typeType_decType_block., 
226	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
227	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
228	
	 Type -> typeType_decinheritsidType_block., 
229	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
230	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
231	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
232	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
233	
	 Type_function_list -> ProtocolType_function_list., 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .Let_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Aritm_comp -> .Concat, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Cast_type, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Pow -> .Sign**Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@@Arithmetic, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Index_object, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Or_expr -> .Or_expr|And_expr, 
	 Program -> Type_function_list.Expr_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .Check_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .!Atom, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 F -> .A, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .ε, 
	 A -> .symbol, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> symbol., 
4	
	 A -> ε., 
5	
	 T -> F., 
6	
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> T., 
7	
	 T -> TF., 
8	
	 F -> .A, 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .ε, 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 F -> .A, 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
11	
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .ε, 
	 A -> .symbol, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 E -> .E|T, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 F -> .A, 
	 E -> T., 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
6	
	 T -> TF., 
7	
	 A -> ε., 
8	
	 T -> F., 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> E|.T, 
12	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 E -> E|.T, 
3	
	 A -> symbol., 
4	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
11	
	 A -> ε., 
12	
	 T -> TF., 
13	
	 T -> F., 
0	
	 E -> .T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 T -> F., 
2	
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> T., 
	 T -> T.F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 T -> TF., 
4	
	 A -> ε., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
9	
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
10	
	 F -> A., 
	 F -> A.*, 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .E|T, 
	 E -> .T, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 A -> .symbol, 
	 A -> (.E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .E|T, 
	 E -> .T, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
1	
	 A -> .symbol, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> (.E), 
	 F -> .A, 
2	
	 E -> E.|T, 
	 A -> (E.), 
3	
	 A -> (E)., 
4	
	 A -> .symbol, 
	 A -> .(E), 
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
9	
	 A -> ε., 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .symbol, 
	 T -> T.F, 
	 A -> .(E), 
	 E -> T., 
	 A -> .ε, 
	 F -> .A*, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
1	
	 A -> symbol., 
2	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
3	
	 T -> TF., 
4	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
5	
	 T -> F., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 E -> E|.T, 
11	
	 E -> E|T., 
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
12	
	 A -> ε., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 S' -> .Program, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
1	
	 S' -> Program., 
2	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
3	
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decType_block, 
4	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
5	
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
6	
	 Type_dec -> id(Params.), 
7	
	 Type_dec -> id(Params)., 
8	
	 Params -> id., 
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
9	
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
10	
	 Params -> id,Params., 
11	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
12	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
13	
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
14	
	 Params -> id:id,Params., 
15	
	 Type -> typeType_dec.inheritsidType_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
16	
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
17	
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
18	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
19	
	 Sign -> Factor., 
20	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> (.Expr), 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
21	
	 Destr_assig -> Atom..id:=Expr, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
22	
	 Cast_type -> Atomas.id, 
23	
	 Cast_type -> Atomasid., 
24	
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
25	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
26	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> id(.Arguments), 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> id(.), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Concat, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
27	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
28	
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Pow -> Sign^.Pow, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Atom -> .id, 
29	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
30	
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
31	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
32	
	 Member -> Atom.Call_func., 
33	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Index_object -> Atom[.Expr], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Concat -> .Arithmetic, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
34	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
35	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(), 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Vector -> .Vector_imp, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
36	
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Sign -> +.Factor, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .id, 
37	
	 Sign -> +Factor., 
38	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
39	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
40	
	 Type_inst -> newCall_func., 
41	
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
42	
	 Atom -> string., 
43	
	 Atom -> Vector., 
44	
	 Atom -> Cast_type., 
45	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Expr_list -> .Expr_item_list, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Expr_block -> {.Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
46	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
47	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> id:=.Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
48	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
49	
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .id, 
50	
	 Vector -> Vector_imp., 
51	
	 Atom -> Member., 
52	
	 Term -> Pow., 
53	
	 Atom -> Call_func., 
54	
	 Atom -> num., 
55	
	 Atom -> Index_object., 
56	
	 Atom -> bool., 
57	
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
58	
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Atom -> .id, 
	 Term -> Term%.Pow, 
59	
	 Term -> Term%Pow., 
60	
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Sign -> -.Factor, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .id, 
61	
	 Sign -> -Factor., 
62	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector_exp -> [.], 
	 Vector_item_list -> .Expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Concat -> .Arithmetic, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
63	
	 Vector_exp -> [Vector_item_list.], 
64	
	 Vector_exp -> [Vector_item_list]., 
65	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
66	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
67	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
68	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
69	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
70	
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Arithmetic -> Arithmetic-.Term, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .id, 
71	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
72	
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Term -> Term*.Pow, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Atom -> .id, 
73	
	 Term -> Term*Pow., 
74	
	 Vector -> Vector_exp., 
75	
	 Atom -> .Cast_type, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Factor -> !.Atom, 
	 Atom -> .string, 
	 Atom -> .id, 
76	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
77	
	 Atom -> Type_inst., 
78	
	 Atom -> Expr_block., 
79	
	 Term -> Term/.Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Atom -> .id, 
80	
	 Term -> Term/Pow., 
81	
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
82	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
83	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
84	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
85	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
86	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
87	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
88	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
89	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
90	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
91	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
92	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
93	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
94	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
95	
	 Term -> .Term/Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp>.Concat, 
96	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
97	
	 While_loop -> while.(Expr)Expr, 
98	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 While_loop -> while(.Expr)Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
99	
	 Expr -> For_loop., 
100	
	 For_loop -> for.(idinExpr)Expr, 
101	
	 For_loop -> for(.idinExpr)Expr, 
102	
	 For_loop -> for(id.inExpr)Expr, 
103	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 For_loop -> for(idin.Expr)Expr, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
104	
	 For_loop -> for(idinExpr.)Expr, 
105	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
106	
	 Expr -> Let_expr., 
107	
	 For_loop -> for(idinExpr)Expr., 
108	
	 Conditional -> if.(Expr)ExprCond_other_case, 
109	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
110	
	 Conditional -> if(Expr.)ExprCond_other_case, 
111	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Concat, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
112	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
113	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Cond_other_case -> else.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
114	
	 Cond_other_case -> elseExpr., 
115	
	 Expr -> Destr_assig., 
116	
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
117	
	 Expr -> Conditional., 
118	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
119	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
120	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Assignment -> id=.Expr, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Assignment -> id=.Expr,Assignment, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
121	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
122	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
123	
	 Assignment -> id=Expr,Assignment., 
124	
	 Expr -> While_loop., 
125	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
126	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 And_expr -> And_expr&.Check_type, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
127	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
128	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
129	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
130	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Assignment -> id:id=.Expr,Assignment, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Assignment -> id:id=.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
131	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
132	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
133	
	 Assignment -> id:id=Expr,Assignment., 
134	
	 Let_expr -> letAssignment.inExpr, 
135	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 Let_expr -> letAssignmentin.Expr, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
136	
	 Let_expr -> letAssignmentinExpr., 
137	
	 Conditional -> if(Expr)ExprCond_other_case., 
138	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
139	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
140	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
141	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
142	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
143	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
144	
	 While_loop -> while(Expr.)Expr, 
145	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Concat -> .Arithmetic, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
146	
	 While_loop -> while(Expr)Expr., 
147	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
148	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector_item_list -> .Expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Concat -> .Arithmetic, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
149	
	 Vector_item_list -> Expr,Vector_item_list., 
150	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
151	
	 Vector_imp -> [Expr||.idinExpr], 
152	
	 Vector_imp -> [Expr||id.inExpr], 
153	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
154	
	 Vector_imp -> [Expr||idinExpr.], 
155	
	 Vector_imp -> [Expr||idinExpr]., 
156	
	 Vector_exp -> []., 
157	
	 Destr_assig -> id:=Expr., 
158	
	 Expr_block -> {Expr_list.}, 
159	
	 Expr_block -> {Expr_list}., 
160	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Expr_list -> .Expr_item_list, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Expr_list -> Expr_item_list., 
	 Vector -> .Vector_imp, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
161	
	 Expr_list -> Expr_item_listExpr_list., 
162	
	 Expr_item_list -> Expr.;, 
163	
	 Expr_item_list -> Expr;., 
164	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
165	
	 Index_object -> Atom[Expr.], 
166	
	 Index_object -> Atom[Expr]., 
167	
	 Pow -> Sign^Pow., 
168	
	 Pow -> Sign**.Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .bool, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Type_inst, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Factor -> .Atom, 
	 Atom -> .id, 
169	
	 Pow -> Sign**Pow., 
170	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
171	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Arguments -> Expr,.Arguments, 
	 Vector_exp -> .[], 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Concat, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
172	
	 Arguments -> Expr,Arguments., 
173	
	 Call_func -> id(Arguments.), 
174	
	 Call_func -> id(Arguments)., 
175	
	 Call_func -> id()., 
176	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
177	
	 Destr_assig -> Atom.id:=Expr., 
178	
	 Atom -> (Expr.), 
179	
	 Atom -> (Expr)., 
180	
	 Inline_form -> Method_signature=>Expr.;, 
181	
	 Inline_form -> Method_signature=>Expr;., 
182	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
183	
	 Full_form -> Method_signatureExpr_block;., 
184	
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
185	
	 Type_member_item -> Inline_form., 
186	
	 Type_member_item -> Full_form., 
187	
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
188	
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params), 
	 Params -> .id,Params, 
189	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
190	
	 Method_signature -> id():.id, 
191	
	 Method_signature -> id():id., 
192	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
193	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
194	
	 Method_signature -> id(Params):.id, 
195	
	 Method_signature -> id(Params):id., 
196	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Type_member_item -> id=.Expr;, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
197	
	 Type_member_item -> id=Expr.;, 
198	
	 Type_member_item -> id=Expr;., 
199	
	 Type_member_item -> id:.id=Expr;, 
200	
	 Type_member_item -> id:id.=Expr;, 
201	
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
202	
	 Type_member_item -> id:id=Expr.;, 
203	
	 Type_member_item -> id:id=Expr;., 
204	
	 Type_member_list -> Type_member_itemType_member_list., 
205	
	 Type_block -> {Type_member_list.}, 
206	
	 Type_block -> {Type_member_list}., 
207	
	 Type -> typeType_decType_block., 
208	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
209	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
210	
	 Type -> typeType_decinheritsidType_block., 
211	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr, 
	 Expr -> .While_loop, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Factor -> .!Atom, 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
212	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
213	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
214	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
215	
	 Type_function_list -> TypeType_function_list., 
216	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
217	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
218	
	 Protocol -> protocolidProtocol_block., 
219	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
220	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
221	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
222	
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
223	
	 Method_dec_list -> Method_signature;Method_dec_list., 
224	
	 Protocol_block -> {Method_dec_list.}, 
225	
	 Protocol_block -> {Method_dec_list}., 
226	
	 Protocol -> protocolidextends.idProtocol_block, 
227	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
228	
	 Protocol -> protocolidextendsidProtocol_block., 
229	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
230	
	 Type_function_list -> ProtocolType_function_list., 
231	
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Full_form, 
232	
	 Func -> functionFull_form., 
233	
	 Func -> functionInline_form., 
234	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> ., 
235	
	 Type_function_list -> FuncType_function_list., 
236	
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term*Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Member -> .Atom.Call_func, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr -> .Destr_assig, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Factor -> .Atom, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type_inst -> .newCall_func, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .And_expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term%Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Check_type -> .Aritm_comp, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
1	
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
2	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .(E), 
3	
	 A -> ε., 
4	
	 A -> symbol., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 T -> F., 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
10	
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .(E), 
11	
	 T -> TF., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Program -> .Type_function_listExpr_item_list, 
	 S' -> .Program, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
1	
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
2	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
3	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id, 
4	
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id., 
5	
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
6	
	 Params -> id,Params., 
7	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
8	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
9	
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
10	
	 Params -> id:id,Params., 
11	
	 Type_dec -> id(Params.), 
12	
	 Type_dec -> id(Params)., 
13	
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
14	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
15	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
16	
	 Type -> typeType_decinheritsidType_block., 
17	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arguments -> .Expr, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
18	
	 Term -> Pow., 
19	
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Sign -> -.Factor, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
20	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
21	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
22	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Call_func -> id(.), 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Call_func -> id(.Arguments), 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arguments -> .Expr, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
23	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
24	
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 And_expr -> And_expr&.Check_type, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
25	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> (.Expr), 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
26	
	 Expr -> While_loop., 
27	
	 While_loop -> while.(Expr)Expr, 
28	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 While_loop -> while(.Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
29	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Expr_list -> .Expr_item_list, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_block -> {.Expr_list}, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
30	
	 Vector -> Vector_exp., 
31	
	 Expr_block -> {Expr_list.}, 
32	
	 Expr_block -> {Expr_list}., 
33	
	 Atom -> Expr_block., 
34	
	 Atom -> Type_inst., 
35	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
36	
	 Cast_type -> Atomas.id, 
37	
	 Cast_type -> Atomasid., 
38	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
39	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
40	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Call_func -> .id(Arguments), 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
41	
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
42	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
43	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Assignment -> id=.Expr, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Assignment -> id=.Expr,Assignment, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
44	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
45	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
46	
	 Assignment -> id=Expr,Assignment., 
47	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
48	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
49	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
50	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
51	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
52	
	 Member -> Atom.Call_func., 
53	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> Atom[.Expr], 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
54	
	 Index_object -> Atom[Expr.], 
55	
	 Index_object -> Atom[Expr]., 
56	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
57	
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Pow -> Sign^.Pow, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
58	
	 Pow -> Sign^Pow., 
59	
	 Atom -> Index_object., 
60	
	 Atom -> string., 
61	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
62	
	 Atom -> Member., 
63	
	 Atom -> bool., 
64	
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Factor -> !.Atom, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
65	
	 Atom -> Call_func., 
66	
	 Vector -> Vector_imp., 
67	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Factor -> !Atom., 
	 Index_object -> Atom.[Expr], 
68	
	 Atom -> Vector., 
69	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Vector_exp -> [.], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Expr -> .Let_expr, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
70	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
71	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Concat, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
72	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
73	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
74	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> Arithmetic-.Term, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
75	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
76	
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Term -> Term%.Pow, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
77	
	 Term -> Term%Pow., 
78	
	 Sign -> Factor., 
79	
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .(Expr), 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Sign -> +.Factor, 
	 Member -> .Atom.Call_func, 
80	
	 Sign -> +Factor., 
81	
	 Atom -> Cast_type., 
82	
	 Atom -> num., 
83	
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Term -> Term*.Pow, 
	 Member -> .Atom.Call_func, 
84	
	 Term -> Term*Pow., 
85	
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> Term/.Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
86	
	 Term -> Term/Pow., 
87	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Arithmetic -> Arithmetic+.Term, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
88	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
89	
	 Term -> Term.%Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
90	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
91	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
92	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
93	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .(Expr), 
	 Concat -> Concat@.Arithmetic, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
94	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
95	
	 Expr -> Conditional., 
96	
	 Expr -> For_loop., 
97	
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
98	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Destr_assig -> id:=.Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
99	
	 Destr_assig -> id:=Expr., 
100	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Aritm_comp., 
101	
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
102	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
103	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
104	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
105	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
106	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
107	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
108	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
109	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
110	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
111	
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
112	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
113	
	 Expr -> Destr_assig., 
114	
	 Conditional -> if.(Expr)ExprCond_other_case, 
115	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Concat, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
116	
	 Conditional -> if(Expr.)ExprCond_other_case, 
117	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
118	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
119	
	 Conditional -> if(Expr)ExprCond_other_case., 
120	
	 Let_expr -> .letAssignmentinExpr, 
	 Cond_other_case -> else.Expr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
121	
	 Cond_other_case -> elseExpr., 
122	
	 Expr -> Let_expr., 
123	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
124	
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .(Expr), 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> Or_expr|.And_expr, 
125	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
126	
	 For_loop -> for.(idinExpr)Expr, 
127	
	 For_loop -> for(.idinExpr)Expr, 
128	
	 For_loop -> for(id.inExpr)Expr, 
129	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
130	
	 For_loop -> for(idinExpr.)Expr, 
131	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 For_loop -> for(idinExpr).Expr, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
132	
	 For_loop -> for(idinExpr)Expr., 
133	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
134	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
135	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
136	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
137	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
138	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
139	
	 Vector_item_list -> Expr,Vector_item_list., 
140	
	 Vector_imp -> [Expr||.idinExpr], 
141	
	 Vector_imp -> [Expr||id.inExpr], 
142	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> .Concat, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
143	
	 Vector_imp -> [Expr||idinExpr.], 
144	
	 Vector_imp -> [Expr||idinExpr]., 
145	
	 Vector_exp -> []., 
146	
	 Vector_exp -> [Vector_item_list.], 
147	
	 Vector_exp -> [Vector_item_list]., 
148	
	 Pow -> .Sign**Pow, 
	 Atom -> .num, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Atom -> .(Expr), 
	 Pow -> Sign**.Pow, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
149	
	 Pow -> Sign**Pow., 
150	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
151	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
152	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
153	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Assignment -> id:id=.Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Vector, 
	 Term -> .Term%Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
154	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
155	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
156	
	 Assignment -> id:id=Expr,Assignment., 
157	
	 Let_expr -> letAssignment.inExpr, 
158	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> letAssignmentin.Expr, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
159	
	 Let_expr -> letAssignmentinExpr., 
160	
	 Destr_assig -> Atom.id:=Expr., 
161	
	 Expr_item_list -> Expr.;, 
162	
	 Expr_item_list -> Expr;., 
163	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Expr_list -> .Expr_item_list, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_list -> Expr_item_list., 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
164	
	 Expr_list -> Expr_item_listExpr_list., 
165	
	 While_loop -> while(Expr.)Expr, 
166	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 While_loop -> while(Expr).Expr, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
167	
	 While_loop -> while(Expr)Expr., 
168	
	 Atom -> (Expr.), 
169	
	 Atom -> (Expr)., 
170	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
171	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
172	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Let_expr, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Arguments -> .Expr, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
173	
	 Arguments -> Expr,Arguments., 
174	
	 Call_func -> id(Arguments.), 
175	
	 Call_func -> id(Arguments)., 
176	
	 Call_func -> id()., 
177	
	 Type_inst -> newCall_func., 
178	
	 Sign -> -Factor., 
179	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
180	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
181	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
182	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .Inline_form, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .id:id=Expr;, 
183	
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
184	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Type_member_item -> id=.Expr;, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
185	
	 Type_member_item -> id=Expr.;, 
186	
	 Type_member_item -> id=Expr;., 
187	
	 Method_signature -> id(.), 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id, 
188	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
189	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
190	
	 Method_signature -> id(Params):.id, 
191	
	 Method_signature -> id(Params):id., 
192	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
193	
	 Method_signature -> id():.id, 
194	
	 Method_signature -> id():id., 
195	
	 Type_member_item -> id:.id=Expr;, 
196	
	 Type_member_item -> id:id.=Expr;, 
197	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Type_member_item -> id:id=.Expr;, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
198	
	 Type_member_item -> id:id=Expr.;, 
199	
	 Type_member_item -> id:id=Expr;., 
200	
	 Type_member_item -> Full_form., 
201	
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
202	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Inline_form -> Method_signature=>.Expr;, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
203	
	 Inline_form -> Method_signature=>Expr.;, 
204	
	 Inline_form -> Method_signature=>Expr;., 
205	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
206	
	 Full_form -> Method_signatureExpr_block;., 
207	
	 Type_member_item -> Inline_form., 
208	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .id:id=Expr;, 
209	
	 Type_member_list -> Type_member_itemType_member_list., 
210	
	 Type_block -> {Type_member_list.}, 
211	
	 Type_block -> {Type_member_list}., 
212	
	 Type -> typeType_decType_block., 
213	
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
214	
	 Type_function_list -> TypeType_function_list., 
215	
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
216	
	 Type_function_list -> ProtocolType_function_list., 
217	
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
218	
	 Func -> functionFull_form., 
219	
	 Func -> functionInline_form., 
220	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
221	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
222	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
223	
	 Protocol -> protocolidextends.idProtocol_block, 
224	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
225	
	 Protocol -> protocolidextendsidProtocol_block., 
226	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
227	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
228	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
229	
	 Method_dec_list -> Method_signature;Method_dec_list., 
230	
	 Protocol_block -> {Method_dec_list.}, 
231	
	 Protocol_block -> {Method_dec_list}., 
232	
	 Protocol -> protocolidProtocol_block., 
233	
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Aritm_comp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .num, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Atom -> .(Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .Vector, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Member, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> .Or_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Atom -> .Call_func, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(), 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Index_object, 
	 Sign -> .Factor, 
	 Factor -> .!Atom, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Conditional, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 E -> E|.T, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 A -> symbol., 
7	
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 F -> .A, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 A -> (E)., 
10	
	 T -> F., 
11	
	 A -> .symbol, 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 E -> E|T., 
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
0	
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
1	
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
2	
	 Type_function_list -> TypeType_function_list., 
3	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
4	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
5	
	 Protocol -> protocolidextends.idProtocol_block, 
6	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
7	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
8	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
9	
	 Method_signature -> id(.), 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Params -> .id, 
10	
	 Params -> id.:id,Params, 
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.,Params, 
11	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
12	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
13	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
14	
	 Params -> id:id,Params., 
15	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> id,.Params, 
	 Params -> .id, 
16	
	 Params -> id,Params., 
17	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
18	
	 Method_signature -> id():.id, 
19	
	 Method_signature -> id():id., 
20	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
21	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
22	
	 Method_signature -> id(Params):.id, 
23	
	 Method_signature -> id(Params):id., 
24	
	 Protocol_block -> {Method_dec_list.}, 
25	
	 Protocol_block -> {Method_dec_list}., 
26	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
27	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
28	
	 Method_dec_list -> Method_signature;Method_dec_list., 
29	
	 Protocol -> protocolidextendsidProtocol_block., 
30	
	 Protocol -> protocolidProtocol_block., 
31	
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
32	
	 Type_function_list -> ProtocolType_function_list., 
33	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
34	
	 Func -> functionInline_form., 
35	
	 Func -> functionFull_form., 
36	
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
37	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
38	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .(Expr), 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Sign -> +.Factor, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
39	
	 Atom -> Member., 
40	
	 Atom -> bool., 
41	
	 Atom -> Call_func., 
42	
	 Atom -> Vector., 
43	
	 Vector -> Vector_exp., 
44	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
45	
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
46	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
47	
	 Call_func -> id(.Arguments), 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Arguments -> .Expr, 
	 Call_func -> id(.), 
	 Atom -> .id, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
48	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
49	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
50	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
51	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Term -> Term%.Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
52	
	 Atom -> Expr_block., 
53	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Sign -> -.Factor, 
	 Member -> .Atom.id, 
	 Atom -> .(Expr), 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
54	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 Expr_block -> {.Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_list -> .Expr_item_list, 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
55	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr_list -> Expr_item_list., 
	 Expr_item_list -> .Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_list -> .Expr_item_list, 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
56	
	 Expr_list -> Expr_item_listExpr_list., 
57	
	 Conditional -> if.(Expr)ExprCond_other_case, 
58	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
59	
	 Expr -> Let_expr., 
60	
	 Expr -> While_loop., 
61	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
62	
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(Arguments), 
63	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
64	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
65	
	 For_loop -> for.(idinExpr)Expr, 
66	
	 For_loop -> for(.idinExpr)Expr, 
67	
	 For_loop -> for(id.inExpr)Expr, 
68	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 For_loop -> for(idin.Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
69	
	 Expr -> Conditional., 
70	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
71	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
72	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
73	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
74	
	 Atom -> Cast_type., 
75	
	 Atom -> Index_object., 
76	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Factor -> !.Atom, 
	 Member -> .Atom.id, 
	 Atom -> .(Expr), 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
77	
	 Expr -> .Destr_assig, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> [.], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
78	
	 Atom -> num., 
79	
	 Vector_exp -> [Vector_item_list.], 
80	
	 Vector_exp -> [Vector_item_list]., 
81	
	 While_loop -> while.(Expr)Expr, 
82	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> while(.Expr)Expr, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
83	
	 Expr -> For_loop., 
84	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
85	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
86	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
87	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
88	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Assignment -> id:id=.Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
89	
	 Sign -> Factor., 
90	
	 Atom -> Type_inst., 
91	
	 Vector -> Vector_imp., 
92	
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
93	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Destr_assig -> id:=.Expr, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
94	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
95	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
96	
	 Type_inst -> newCall_func., 
97	
	 Destr_assig -> id:=Expr., 
98	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
99	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 And_expr -> And_expr&.Check_type, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
100	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
101	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
102	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
103	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
104	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
105	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> Concat@@.Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
106	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> (.Expr), 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
107	
	 Atom -> (Expr.), 
108	
	 Atom -> (Expr)., 
109	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
110	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Pow -> Sign^.Pow, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
111	
	 Atom -> string., 
112	
	 Pow -> Sign^Pow., 
113	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Pow -> Sign**.Pow, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
114	
	 Pow -> Sign**Pow., 
115	
	 Expr -> Destr_assig., 
116	
	 Term -> Pow., 
117	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
118	
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
119	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
120	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> Term*.Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
121	
	 Term -> Term*Pow., 
122	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> Term/.Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
123	
	 Term -> Term/Pow., 
124	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
125	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
126	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
127	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
128	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
129	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
130	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
131	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
132	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
133	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
134	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
135	
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Call_func, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Pow -> .Sign, 
	 Factor -> .!Atom, 
	 Sign -> .-Factor, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
136	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
137	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
138	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
139	
	 Assignment -> id:id=Expr,Assignment., 
140	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Assignment -> id=.Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Assignment -> id=.Expr,Assignment, 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
141	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
142	
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
143	
	 Assignment -> id=Expr,Assignment., 
144	
	 Let_expr -> letAssignment.inExpr, 
145	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Let_expr -> letAssignmentin.Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
146	
	 Let_expr -> letAssignmentinExpr., 
147	
	 While_loop -> while(Expr.)Expr, 
148	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 While_loop -> while(Expr).Expr, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
149	
	 While_loop -> while(Expr)Expr., 
150	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
151	
	 Expr -> .Destr_assig, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
152	
	 Vector_item_list -> Expr,Vector_item_list., 
153	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
154	
	 Vector_imp -> [Expr||.idinExpr], 
155	
	 Vector_imp -> [Expr||id.inExpr], 
156	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
157	
	 Vector_imp -> [Expr||idinExpr.], 
158	
	 Vector_imp -> [Expr||idinExpr]., 
159	
	 Vector_exp -> []., 
160	
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
161	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Index_object -> Atom[.Expr], 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
162	
	 Index_object -> Atom[Expr.], 
163	
	 Index_object -> Atom[Expr]., 
164	
	 Cast_type -> Atomas.id, 
165	
	 Cast_type -> Atomasid., 
166	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
167	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
168	
	 For_loop -> for(idinExpr.)Expr, 
169	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
170	
	 For_loop -> for(idinExpr)Expr., 
171	
	 Destr_assig -> Atom.id:=Expr., 
172	
	 Member -> Atom.Call_func., 
173	
	 Conditional -> if(Expr.)ExprCond_other_case, 
174	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
175	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
176	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
177	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
178	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
179	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
180	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
181	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Cond_other_case -> else.Expr, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
182	
	 Cond_other_case -> elseExpr., 
183	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
184	
	 Conditional -> if(Expr)ExprCond_other_case., 
185	
	 Expr_item_list -> Expr.;, 
186	
	 Expr_item_list -> Expr;., 
187	
	 Expr_block -> {Expr_list.}, 
188	
	 Expr_block -> {Expr_list}., 
189	
	 Sign -> -Factor., 
190	
	 Term -> Term%Pow., 
191	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
192	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
193	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Arguments -> .Expr, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .id, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
194	
	 Arguments -> Expr,Arguments., 
195	
	 Call_func -> id(Arguments.), 
196	
	 Call_func -> id(Arguments)., 
197	
	 Call_func -> id()., 
198	
	 Sign -> +Factor., 
199	
	 Inline_form -> Method_signature=>Expr.;, 
200	
	 Inline_form -> Method_signature=>Expr;., 
201	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
202	
	 Full_form -> Method_signatureExpr_block;., 
203	
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
204	
	 Type_function_list -> FuncType_function_list., 
205	
	 Type_dec -> .id(Params), 
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
206	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
207	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id, 
208	
	 Type_dec -> id(Params.), 
209	
	 Type_dec -> id(Params)., 
210	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
211	
	 Type -> typeType_decType_block., 
212	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
213	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
214	
	 Type -> typeType_decinheritsidType_block., 
215	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Arguments -> .Expr, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
216	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
217	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
218	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
219	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
220	
	 Type_member_item -> Inline_form., 
221	
	 Type_member_item -> Full_form., 
222	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
223	
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
224	
	 Type_member_item -> id:.id=Expr;, 
225	
	 Type_member_item -> id:id.=Expr;, 
226	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
227	
	 Type_member_item -> id:id=Expr.;, 
228	
	 Type_member_item -> id:id=Expr;., 
229	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_member_item -> id=.Expr;, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
230	
	 Type_member_item -> id=Expr.;, 
231	
	 Type_member_item -> id=Expr;., 
232	
	 Type_member_list -> Type_member_itemType_member_list., 
233	
	 Type_block -> {Type_member_list.}, 
234	
	 Type_block -> {Type_member_list}., 
235	
	 S' -> Program., 
236	
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr -> .While_loop, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 For_loop -> .for(idinExpr)Expr, 
	 Or_expr -> .And_expr, 
	 Cast_type -> .Atomasid, 
	 Sign -> .+Factor, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Expr_item_list -> .Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Index_object, 
	 Expr -> .For_loop, 
	 Expr -> .Conditional, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Factor -> .!Atom, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Program -> Type_function_list.Expr_item_list, 
	 Type_inst -> .newCall_func, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Member, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .symbol, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .symbol, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
2	
	 A -> symbol., 
3	
	 T -> .TF, 
	 A -> (.E), 
	 F -> .A*, 
	 T -> .F, 
	 A -> .(E), 
	 E -> .T, 
	 E -> .E|T, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
4	
	 F -> A.*, 
	 F -> A., 
5	
	 F -> A*., 
6	
	 A -> ε., 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
1	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
2	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
3	
	 Protocol -> protocolidProtocol_block., 
4	
	 Protocol -> protocolidextends.idProtocol_block, 
5	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
6	
	 Protocol -> protocolidextendsidProtocol_block., 
7	
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
8	
	 Protocol_block -> {Method_dec_list.}, 
9	
	 Protocol_block -> {Method_dec_list}., 
10	
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
11	
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params), 
12	
	 Params -> id.:id, 
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
	 Params -> id., 
13	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
14	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
15	
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
16	
	 Params -> id:id,Params., 
17	
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
18	
	 Params -> id,Params., 
19	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
20	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
21	
	 Method_signature -> id(Params):.id, 
22	
	 Method_signature -> id(Params):id., 
23	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
24	
	 Method_signature -> id():.id, 
25	
	 Method_signature -> id():id., 
26	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
27	
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
28	
	 Method_dec_list -> Method_signature;Method_dec_list., 
29	
	 S' -> Program., 
30	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Type.Type_function_list, 
31	
	 Type_function_list -> TypeType_function_list., 
32	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
33	
	 Type_function_list -> FuncType_function_list., 
34	
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
35	
	 Func -> functionInline_form., 
36	
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
37	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Inline_form -> Method_signature=>.Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
38	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
39	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
40	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
41	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
42	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Assignment -> id:id=.Expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
43	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Factor -> !.Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
44	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
45	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> id(.), 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Arguments -> .Expr, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Call_func -> id(.Arguments), 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
46	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
47	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
	 Concat -> Concat@@.Arithmetic, 
48	
	 Atom -> (.Expr), 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
49	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Sign -> -.Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
50	
	 Atom -> Type_inst., 
51	
	 Atom -> Cast_type., 
52	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Vector_item_list -> .Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Vector_exp -> [.], 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_exp -> [.Vector_item_list], 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Vector_imp -> [.Expr||idinExpr], 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
53	
	 For_loop -> for.(idinExpr)Expr, 
54	
	 For_loop -> for(.idinExpr)Expr, 
55	
	 For_loop -> for(id.inExpr)Expr, 
56	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
57	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
58	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp==Concat, 
59	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
60	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 And_expr -> And_expr&.Check_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp==Concat, 
61	
	 Atom -> Expr_block., 
62	
	 Term -> Pow., 
63	
	 Atom -> Index_object., 
64	
	 Atom -> string., 
65	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Expr_block -> {.Expr_list}, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
66	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_list -> Expr_item_list., 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Expr_list -> .Expr_item_list, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
67	
	 While_loop -> while.(Expr)Expr, 
68	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 While_loop -> while(.Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
69	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
70	
	 Expr -> For_loop., 
71	
	 Expr -> While_loop., 
72	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
73	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Destr_assig -> id:=.Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
74	
	 Expr -> Conditional., 
75	
	 Atom -> bool., 
76	
	 Atom -> Vector., 
77	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
78	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> Sign**.Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
79	
	 Pow -> Sign**Pow., 
80	
	 Atom -> Member., 
81	
	 Atom -> Call_func., 
82	
	 Vector -> Vector_imp., 
83	
	 Vector -> Vector_exp., 
84	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> +.Factor, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
85	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
86	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
87	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
88	
	 Member -> Atom.Call_func., 
89	
	 Arithmetic -> .Arithmetic-Term, 
	 Index_object -> Atom[.Expr], 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
90	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
91	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
92	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
93	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
94	
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
95	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> Term/.Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
96	
	 Term -> Term/Pow., 
97	
	 Atom -> num., 
98	
	 Sign -> Factor., 
99	
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
100	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
101	
	 Type_inst -> newCall_func., 
102	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Term -> Term*.Pow, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
103	
	 Term -> Term*Pow., 
104	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Term -> Term%.Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
105	
	 Term -> Term%Pow., 
106	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
107	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Arithmetic -> Arithmetic+.Term, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
108	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
109	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
110	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
111	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
112	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
113	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
114	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
115	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
116	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
117	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
118	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
119	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
120	
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
121	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
122	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
123	
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
124	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
125	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
126	
	 Conditional -> if.(Expr)ExprCond_other_case, 
127	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
128	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
129	
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Term, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp==Concat, 
130	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
131	
	 Expr -> Destr_assig., 
132	
	 Expr -> Let_expr., 
133	
	 Conditional -> if(Expr.)ExprCond_other_case, 
134	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
135	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
136	
	 Conditional -> if(Expr)ExprCond_other_case., 
137	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 Cond_other_case -> else.Expr, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
138	
	 Cond_other_case -> elseExpr., 
139	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
140	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
141	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
142	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
143	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
144	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
145	
	 Destr_assig -> Atom.id:=Expr., 
146	
	 Cast_type -> Atomas.id, 
147	
	 Cast_type -> Atomasid., 
148	
	 Index_object -> Atom[Expr.], 
149	
	 Index_object -> Atom[Expr]., 
150	
	 Sign -> +Factor., 
151	
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Pow -> Sign^.Pow, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
152	
	 Pow -> Sign^Pow., 
153	
	 Destr_assig -> id:=Expr., 
154	
	 While_loop -> while(Expr.)Expr, 
155	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 While_loop -> while(Expr).Expr, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
156	
	 While_loop -> while(Expr)Expr., 
157	
	 Expr_list -> Expr_item_listExpr_list., 
158	
	 Expr_item_list -> Expr.;, 
159	
	 Expr_item_list -> Expr;., 
160	
	 Expr_block -> {Expr_list.}, 
161	
	 Expr_block -> {Expr_list}., 
162	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
163	
	 For_loop -> for(idinExpr.)Expr, 
164	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 For_loop -> for(idinExpr).Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
165	
	 For_loop -> for(idinExpr)Expr., 
166	
	 Vector_exp -> [Vector_item_list.], 
167	
	 Vector_exp -> [Vector_item_list]., 
168	
	 Vector_exp -> []., 
169	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
170	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Vector_item_list -> .Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
171	
	 Vector_item_list -> Expr,Vector_item_list., 
172	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
173	
	 Vector_imp -> [Expr||.idinExpr], 
174	
	 Vector_imp -> [Expr||id.inExpr], 
175	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Vector_imp -> [Expr||idin.Expr], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
176	
	 Vector_imp -> [Expr||idinExpr.], 
177	
	 Vector_imp -> [Expr||idinExpr]., 
178	
	 Sign -> -Factor., 
179	
	 Atom -> (Expr.), 
180	
	 Atom -> (Expr)., 
181	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
182	
	 Call_func -> id(Arguments.), 
183	
	 Call_func -> id(Arguments)., 
184	
	 Call_func -> id()., 
185	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
186	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Arguments -> Expr,.Arguments, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Arguments -> .Expr, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
187	
	 Arguments -> Expr,Arguments., 
188	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Factor -> !Atom., 
	 Index_object -> Atom.[Expr], 
189	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
190	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
191	
	 Assignment -> id:id=Expr,Assignment., 
192	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Assignment -> id=.Expr,Assignment, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Assignment -> id=.Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
193	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
194	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
195	
	 Assignment -> id=Expr,Assignment., 
196	
	 Let_expr -> letAssignment.inExpr, 
197	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
198	
	 Let_expr -> letAssignmentinExpr., 
199	
	 Inline_form -> Method_signature=>Expr.;, 
200	
	 Inline_form -> Method_signature=>Expr;., 
201	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
202	
	 Full_form -> Method_signatureExpr_block;., 
203	
	 Func -> functionFull_form., 
204	
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
205	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
206	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
207	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
208	
	 Type -> typeType_decinheritsidType_block., 
209	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Arguments -> .Expr, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
210	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
211	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
212	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
213	
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_list -> ., 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
214	
	 Type_member_item -> Inline_form., 
215	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
216	
	 Type_member_item -> id:.id=Expr;, 
217	
	 Type_member_item -> id:id.=Expr;, 
218	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
219	
	 Type_member_item -> id:id=Expr.;, 
220	
	 Type_member_item -> id:id=Expr;., 
221	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Type_member_item -> id=.Expr;, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
222	
	 Type_member_item -> id=Expr.;, 
223	
	 Type_member_item -> id=Expr;., 
224	
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_list -> ., 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
225	
	 Type_member_list -> Type_member_itemType_member_list., 
226	
	 Type_member_item -> Full_form., 
227	
	 Type_block -> {Type_member_list.}, 
228	
	 Type_block -> {Type_member_list}., 
229	
	 Type -> typeType_decType_block., 
230	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
231	
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id,Params, 
232	
	 Type_dec -> id(Params.), 
233	
	 Type_dec -> id(Params)., 
234	
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
235	
	 Type_function_list -> ProtocolType_function_list., 
236	
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Expr -> .While_loop, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Type_inst -> .newCall_func, 
	 While_loop -> .while(Expr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Pow -> .Sign**Pow, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Index_object, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .id:=Expr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Destr_assig -> .Or_expr, 
	 Expr -> .Destr_assig, 
	 Factor -> .Atom, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Term -> .Pow, 
	 Expr -> .Let_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Sign -> .Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[Vector_item_list], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Or_expr -> .And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
3	
	 T -> F., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 F -> .A*, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 A -> (.E), 
	 E -> .E|T, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
11	
	 T -> TF., 
12	
	 A -> ε., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A, 
0	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 S' -> .Program, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
1	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
2	
	 Func -> function.Full_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
3	
	 Func -> functionInline_form., 
4	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
5	
	 Method_signature -> id(.), 
	 Method_signature -> id(.):id, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
6	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
7	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
8	
	 Method_signature -> id(Params):.id, 
9	
	 Method_signature -> id(Params):id., 
10	
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
	 Params -> id., 
	 Params -> id.:id, 
11	
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> id,.Params, 
	 Params -> .id,Params, 
12	
	 Params -> id,Params., 
13	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
14	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
15	
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
16	
	 Params -> id:id,Params., 
17	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
18	
	 Method_signature -> id():.id, 
19	
	 Method_signature -> id():id., 
20	
	 Func -> functionFull_form., 
21	
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
22	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
23	
	 Full_form -> Method_signatureExpr_block;., 
24	
	 Term -> .Term*Pow, 
	 Expr_block -> {.Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_list, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
25	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> [.], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Term, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
26	
	 Vector_exp -> []., 
27	
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
28	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Index_object -> Atom[.Expr], 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
29	
	 Expr -> For_loop., 
30	
	 Expr -> While_loop., 
31	
	 Expr -> Let_expr., 
32	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Sign -> +.Factor, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
33	
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
34	
	 Cast_type -> Atomas.id, 
35	
	 Cast_type -> Atomasid., 
36	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
37	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
38	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Call_func -> id(.Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Call_func -> id(.), 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Arguments -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
39	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Factor -> !.Atom, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
40	
	 Atom -> Expr_block., 
41	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Factor -> !Atom., 
42	
	 Vector -> Vector_imp., 
43	
	 Atom -> bool., 
44	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
45	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Atom -> (.Expr), 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
46	
	 While_loop -> while.(Expr)Expr, 
47	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 While_loop -> while(.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
48	
	 Atom -> Cast_type., 
49	
	 Expr -> Conditional., 
50	
	 Atom -> string., 
51	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
52	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Pow -> Sign**.Pow, 
53	
	 Atom -> num., 
54	
	 Sign -> Factor., 
55	
	 Pow -> Sign**Pow., 
56	
	 Atom -> Call_func., 
57	
	 Atom -> Index_object., 
58	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> -.Factor, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
59	
	 Sign -> -Factor., 
60	
	 Atom -> Member., 
61	
	 Atom -> Vector., 
62	
	 Atom -> Type_inst., 
63	
	 Vector -> Vector_exp., 
64	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
65	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
66	
	 Type_inst -> newCall_func., 
67	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Pow -> Sign^.Pow, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
68	
	 Pow -> Sign^Pow., 
69	
	 Expr -> Destr_assig., 
70	
	 For_loop -> for.(idinExpr)Expr, 
71	
	 For_loop -> for(.idinExpr)Expr, 
72	
	 For_loop -> for(id.inExpr)Expr, 
73	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 For_loop -> for(idin.Expr)Expr, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
74	
	 Term -> Pow., 
75	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
76	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> id:=.Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Pow -> .Sign**Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
77	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<Concat, 
78	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
79	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
80	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Arithmetic -> Arithmetic-.Term, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
81	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
82	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Term -> Term%.Pow, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
83	
	 Term -> Term%Pow., 
84	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Term -> Term/.Pow, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
85	
	 Term -> Term/Pow., 
86	
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> Term*.Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
87	
	 Term -> Term*Pow., 
88	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> Arithmetic+.Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
89	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.%Pow, 
90	
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
91	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
92	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Concat -> Concat@@.Arithmetic, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
93	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
94	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
95	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
96	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
97	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
98	
	 Term -> .Term*Pow, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
99	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
100	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
101	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
102	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
103	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
104	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Atom -> .Member, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
105	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
106	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
107	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> Or_expr|.And_expr, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
108	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
109	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 And_expr -> And_expr&.Check_type, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Member -> .Atom.id, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
110	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
111	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
112	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<Concat, 
113	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
114	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
115	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
116	
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
117	
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr,Assignment, 
118	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
119	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
120	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Assignment -> id:id=.Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
121	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
122	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
123	
	 Assignment -> id:id=Expr,Assignment., 
124	
	 Conditional -> if.(Expr)ExprCond_other_case, 
125	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
126	
	 Conditional -> if(Expr.)ExprCond_other_case, 
127	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
128	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
129	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
130	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
131	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
132	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
133	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
134	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Cond_other_case -> else.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
135	
	 Cond_other_case -> elseExpr., 
136	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
137	
	 Conditional -> if(Expr)ExprCond_other_case., 
138	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Assignment -> id=.Expr,Assignment, 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Assignment -> id=.Expr, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
139	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
140	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
141	
	 Assignment -> id=Expr,Assignment., 
142	
	 Let_expr -> letAssignment.inExpr, 
143	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Let_expr -> letAssignmentin.Expr, 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
144	
	 Let_expr -> letAssignmentinExpr., 
145	
	 Destr_assig -> id:=Expr., 
146	
	 For_loop -> for(idinExpr.)Expr, 
147	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
148	
	 For_loop -> for(idinExpr)Expr., 
149	
	 While_loop -> while(Expr.)Expr, 
150	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
151	
	 While_loop -> while(Expr)Expr., 
152	
	 Atom -> (Expr.), 
153	
	 Atom -> (Expr)., 
154	
	 Call_func -> id(Arguments.), 
155	
	 Call_func -> id(Arguments)., 
156	
	 Call_func -> id()., 
157	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
158	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Arguments -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
159	
	 Arguments -> Expr,Arguments., 
160	
	 Member -> Atom.Call_func., 
161	
	 Sign -> +Factor., 
162	
	 Index_object -> Atom[Expr.], 
163	
	 Index_object -> Atom[Expr]., 
164	
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
165	
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
166	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
167	
	 Destr_assig -> Atom.id:=Expr., 
168	
	 Vector_exp -> [Vector_item_list.], 
169	
	 Vector_exp -> [Vector_item_list]., 
170	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
171	
	 Vector_imp -> [Expr||.idinExpr], 
172	
	 Vector_imp -> [Expr||id.inExpr], 
173	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
174	
	 Vector_imp -> [Expr||idinExpr.], 
175	
	 Vector_imp -> [Expr||idinExpr]., 
176	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Term, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
177	
	 Vector_item_list -> Expr,Vector_item_list., 
178	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
179	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_list, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Expr_list -> Expr_item_list., 
	 And_expr -> .And_expr&Check_type, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
180	
	 Expr_item_list -> Expr.;, 
181	
	 Expr_item_list -> Expr;., 
182	
	 Expr_list -> Expr_item_listExpr_list., 
183	
	 Expr_block -> {Expr_list.}, 
184	
	 Expr_block -> {Expr_list}., 
185	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
186	
	 Inline_form -> Method_signature=>Expr.;, 
187	
	 Inline_form -> Method_signature=>Expr;., 
188	
	 Type_function_list -> TypeType_function_list., 
189	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
190	
	 Type_function_list -> FuncType_function_list., 
191	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
192	
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
193	
	 Type -> typeType_decType_block., 
194	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
195	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
196	
	 Type -> typeType_decinheritsidType_block., 
197	
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
198	
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
199	
	 Type_member_item -> id:.id=Expr;, 
200	
	 Type_member_item -> id:id.=Expr;, 
201	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
202	
	 Type_member_item -> id:id=Expr.;, 
203	
	 Type_member_item -> id:id=Expr;., 
204	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_member_item -> id=.Expr;, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
205	
	 Type_member_item -> id=Expr.;, 
206	
	 Type_member_item -> id=Expr;., 
207	
	 Type_block -> {Type_member_list.}, 
208	
	 Type_block -> {Type_member_list}., 
209	
	 Type_member_item -> Full_form., 
210	
	 Type_member_item -> Inline_form., 
211	
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id():id, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
212	
	 Type_member_list -> Type_member_itemType_member_list., 
213	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Arguments -> .Expr, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
214	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
215	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
216	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
217	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
218	
	 Params -> .id, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
219	
	 Type_dec -> id(Params.), 
220	
	 Type_dec -> id(Params)., 
221	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
222	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
223	
	 Protocol -> protocolidProtocol_block., 
224	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
225	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
226	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
227	
	 Method_dec_list -> Method_signature;Method_dec_list., 
228	
	 Protocol_block -> {Method_dec_list.}, 
229	
	 Protocol_block -> {Method_dec_list}., 
230	
	 Protocol -> protocolidextends.idProtocol_block, 
231	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
232	
	 Protocol -> protocolidextendsidProtocol_block., 
233	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
234	
	 Type_function_list -> ProtocolType_function_list., 
235	
	 Term -> .Term*Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .While_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Atom -> .id, 
	 Atom -> .num, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Factor -> .Atom, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Expr_block, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .Vector, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .For_loop, 
	 Program -> Type_function_list.Expr_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .Factor, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Atom -> .(Expr), 
	 Destr_assig -> .id:=Expr, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Check_type -> .Check_typeisAritm_comp, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
4	
	 T -> TF., 
5	
	 F -> A., 
	 F -> A.*, 
6	
	 F -> A*., 
7	
	 A -> symbol., 
8	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
11	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> .F, 
4	
	 T -> F., 
5	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A, 
6	
	 T -> TF., 
7	
	 F -> A., 
	 F -> A.*, 
8	
	 F -> A*., 
9	
	 A -> symbol., 
10	
	 T -> .TF, 
	 A -> .(E), 
	 A -> (.E), 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> .E|T, 
	 T -> .F, 
11	
	 A -> (E.), 
	 E -> E.|T, 
12	
	 A -> (E)., 
13	
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A*, 
	 A -> .symbol, 
	 F -> .A, 
	 E -> T., 
0	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
1	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
2	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
3	
	 Protocol -> protocolidProtocol_block., 
4	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Protocol_block -> {.Method_dec_list}, 
5	
	 Protocol_block -> {Method_dec_list.}, 
6	
	 Protocol_block -> {Method_dec_list}., 
7	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
8	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
9	
	 Method_dec_list -> Method_signature;Method_dec_list., 
10	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
11	
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
12	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
13	
	 Method_signature -> id():.id, 
14	
	 Method_signature -> id():id., 
15	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
16	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
17	
	 Method_signature -> id(Params):.id, 
18	
	 Method_signature -> id(Params):id., 
19	
	 Params -> id.:id, 
	 Params -> id.,Params, 
	 Params -> id., 
	 Params -> id.:id,Params, 
20	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> id,.Params, 
21	
	 Params -> id,Params., 
22	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
23	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
24	
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
25	
	 Params -> id:id,Params., 
26	
	 Protocol -> protocolidextends.idProtocol_block, 
27	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
28	
	 Protocol -> protocolidextendsidProtocol_block., 
29	
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type_dec -> .id(Params), 
30	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type_block -> .{Type_member_list}, 
31	
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Type_member_item -> .id:id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
32	
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
33	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
34	
	 Expr -> While_loop., 
35	
	 Expr -> Conditional., 
36	
	 Inline_form -> Method_signature=>Expr.;, 
37	
	 Inline_form -> Method_signature=>Expr;., 
38	
	 Atom -> Type_inst., 
39	
	 Atom -> Index_object., 
40	
	 Atom -> bool., 
41	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
42	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Concat -> Concat@.Arithmetic, 
43	
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign.**Pow, 
44	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
45	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Atom -> (.Expr), 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
46	
	 Atom -> (Expr.), 
47	
	 Atom -> (Expr)., 
48	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
49	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
50	
	 Atom -> string., 
51	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_exp -> [.Vector_item_list], 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> [.], 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Vector_item_list -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
52	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
53	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Term -> .Term/Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Cast_type -> .Atomasid, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Vector_item_list -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
54	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
55	
	 Atom -> Expr_block., 
56	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
57	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Term -> Term/.Pow, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
58	
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Factor -> !.Atom, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
59	
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
60	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Index_object -> Atom[.Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
61	
	 Index_object -> Atom[Expr.], 
62	
	 Index_object -> Atom[Expr]., 
63	
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
64	
	 Cast_type -> Atomas.id, 
65	
	 Cast_type -> Atomasid., 
66	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
67	
	 Member -> Atom.Call_func., 
68	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
69	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Call_func -> id(.), 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Arguments -> .Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Call_func -> id(.Arguments), 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Expr_block, 
70	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
71	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Arguments -> .Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Arguments -> Expr,.Arguments, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Expr_block, 
72	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
73	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
74	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
75	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> Term%.Pow, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
76	
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
77	
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
78	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
79	
	 Atom -> Cast_type., 
80	
	 Atom -> Call_func., 
81	
	 Sign -> Factor., 
82	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> {.Expr_list}, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
83	
	 Expr_item_list -> Expr.;, 
84	
	 Expr_item_list -> Expr;., 
85	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Expr_list -> Expr_item_list., 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
86	
	 Expr -> For_loop., 
87	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
88	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 And_expr -> And_expr&.Check_type, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
89	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
90	
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> +.Factor, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
91	
	 Sign -> +Factor., 
92	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
93	
	 Atom -> num., 
94	
	 Atom -> Vector., 
95	
	 Vector -> Vector_imp., 
96	
	 Vector -> Vector_exp., 
97	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
98	
	 Type_inst -> newCall_func., 
99	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
100	
	 Atom -> Member., 
101	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Check_type -> Aritm_comp., 
102	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
103	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
104	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
105	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
106	
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> Arithmetic-.Term, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
107	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
108	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Term -> Term*.Pow, 
109	
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Sign -> -.Factor, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Cast_type -> .Atomasid, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
110	
	 Sign -> -Factor., 
111	
	 Term -> Term*Pow., 
112	
	 Term -> Pow., 
113	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
114	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
115	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
116	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
117	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
118	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
119	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
120	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
121	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
122	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
123	
	 Expr_list -> Expr_item_listExpr_list., 
124	
	 Conditional -> if.(Expr)ExprCond_other_case, 
125	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
126	
	 Conditional -> if(Expr.)ExprCond_other_case, 
127	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
128	
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
129	
	 Conditional -> if(Expr)ExprCond_other_case., 
130	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 Cond_other_case -> else.Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
131	
	 Cond_other_case -> elseExpr., 
132	
	 For_loop -> for.(idinExpr)Expr, 
133	
	 For_loop -> for(.idinExpr)Expr, 
134	
	 For_loop -> for(id.inExpr)Expr, 
135	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 For_loop -> for(idin.Expr)Expr, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
136	
	 For_loop -> for(idinExpr.)Expr, 
137	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
138	
	 For_loop -> for(idinExpr)Expr., 
139	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
140	
	 Let_expr -> letAssignment.inExpr, 
141	
	 Let_expr -> letAssignmentin.Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
142	
	 Let_expr -> letAssignmentinExpr., 
143	
	 Expr -> Let_expr., 
144	
	 Expr -> Destr_assig., 
145	
	 While_loop -> while.(Expr)Expr, 
146	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 While_loop -> while(.Expr)Expr, 
147	
	 While_loop -> while(Expr.)Expr, 
148	
	 Vector_exp -> .[Vector_item_list], 
	 While_loop -> while(Expr).Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Sign -> .Factor, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
149	
	 While_loop -> while(Expr)Expr., 
150	
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
151	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Destr_assig -> id:=.Expr, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
152	
	 Destr_assig -> id:=Expr., 
153	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
154	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Or_expr -> Or_expr|.And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Term -> .Term/Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
155	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
156	
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
157	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Assignment -> id=.Expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
158	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
159	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
160	
	 Assignment -> id=Expr,Assignment., 
161	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
162	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
163	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .Cast_type, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Assignment -> id:id=.Expr, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
164	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
165	
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
166	
	 Assignment -> id:id=Expr,Assignment., 
167	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
168	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
169	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
170	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
171	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
172	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
173	
	 Expr_block -> {Expr_list.}, 
174	
	 Expr_block -> {Expr_list}., 
175	
	 Term -> Term%Pow., 
176	
	 Arguments -> Expr,Arguments., 
177	
	 Call_func -> id()., 
178	
	 Call_func -> id(Arguments.), 
179	
	 Call_func -> id(Arguments)., 
180	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .While_loop, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
181	
	 Destr_assig -> Atom.id:=Expr., 
182	
	 Term -> Term/Pow., 
183	
	 Vector_item_list -> Expr,Vector_item_list., 
184	
	 Vector_imp -> [Expr||.idinExpr], 
185	
	 Vector_imp -> [Expr||id.inExpr], 
186	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
187	
	 Vector_imp -> [Expr||idinExpr.], 
188	
	 Vector_imp -> [Expr||idinExpr]., 
189	
	 Vector_exp -> [Vector_item_list.], 
190	
	 Vector_exp -> [Vector_item_list]., 
191	
	 Vector_exp -> []., 
192	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
193	
	 Pow -> Sign**Pow., 
194	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> Sign^.Pow, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Factor -> .Atom, 
	 Sign -> .+Factor, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
195	
	 Pow -> Sign^Pow., 
196	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
197	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
198	
	 Full_form -> Method_signatureExpr_block;., 
199	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
200	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Type_member_item -> id=.Expr;, 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
201	
	 Type_member_item -> id=Expr.;, 
202	
	 Type_member_item -> id=Expr;., 
203	
	 Type_member_item -> id:.id=Expr;, 
204	
	 Type_member_item -> id:id.=Expr;, 
205	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Type_member_item -> id:id=.Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
206	
	 Type_member_item -> id:id=Expr.;, 
207	
	 Type_member_item -> id:id=Expr;., 
208	
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Type_member_item -> .id:id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
209	
	 Type_member_item -> Inline_form., 
210	
	 Type_member_item -> Full_form., 
211	
	 Type_member_list -> Type_member_itemType_member_list., 
212	
	 Type_block -> {Type_member_list.}, 
213	
	 Type_block -> {Type_member_list}., 
214	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
215	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
216	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Arguments -> .Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Expr_block, 
217	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
218	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
219	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
220	
	 Type -> typeType_decinheritsidType_block., 
221	
	 Type -> typeType_decType_block., 
222	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
223	
	 Type_dec -> id(.Params), 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
224	
	 Type_dec -> id(Params.), 
225	
	 Type_dec -> id(Params)., 
226	
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id():id, 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
227	
	 Func -> functionFull_form., 
228	
	 Func -> functionInline_form., 
229	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
230	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
231	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
232	
	 Type_function_list -> FuncType_function_list., 
233	
	 Type_function_list -> TypeType_function_list., 
234	
	 Type_function_list -> ProtocolType_function_list., 
235	
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> .Or_expr|And_expr, 
	 Sign -> .Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr -> .For_loop, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Concat, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .Call_func, 
	 Vector -> .Vector_exp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Call_func -> .id(), 
	 Or_expr -> .And_expr, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
	 Type_inst -> .newCall_func, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector -> .Vector_imp, 
	 Factor -> .!Atom, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
1	
	 A -> ε., 
2	
	 T -> F., 
3	
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
4	
	 T -> TF., 
5	
	 A -> symbol., 
6	
	 F -> A.*, 
	 F -> A., 
7	
	 F -> A*., 
8	
	 T -> .TF, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 A -> (.E), 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 T -> .F, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
11	
	 T -> T.F, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 S' -> .Program, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
1	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
2	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
3	
	 Protocol -> protocolidProtocol_block., 
4	
	 Protocol -> protocolidextends.idProtocol_block, 
5	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
6	
	 Protocol -> protocolidextendsidProtocol_block., 
7	
	 Method_signature -> .id():id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
8	
	 Protocol_block -> {Method_dec_list.}, 
9	
	 Protocol_block -> {Method_dec_list}., 
10	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
11	
	 Method_signature -> .id():id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
12	
	 Method_dec_list -> Method_signature;Method_dec_list., 
13	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
14	
	 Method_signature -> id(.Params), 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
15	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
16	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
17	
	 Method_signature -> id(Params):.id, 
18	
	 Method_signature -> id(Params):id., 
19	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
20	
	 Method_signature -> id():.id, 
21	
	 Method_signature -> id():id., 
22	
	 Params -> id.:id, 
	 Params -> id., 
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
23	
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> id,.Params, 
24	
	 Params -> id,Params., 
25	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
26	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
27	
	 Params -> id:id,.Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
28	
	 Params -> id:id,Params., 
29	
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
30	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params), 
	 Func -> function.Full_form, 
31	
	 Func -> functionInline_form., 
32	
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
33	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
34	
	 Full_form -> Method_signatureExpr_block;., 
35	
	 Destr_assig -> .Atom.id:=Expr, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
36	
	 Atom -> string., 
37	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
38	
	 Let_expr -> letAssignment.inExpr, 
39	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Let_expr -> letAssignmentin.Expr, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
40	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
41	
	 Cast_type -> Atomas.id, 
42	
	 Cast_type -> Atomasid., 
43	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
44	
	 Member -> Atom.Call_func., 
45	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
46	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
47	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Expr_list -> .Expr_item_list, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_block -> {.Expr_list}, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .bool, 
	 Check_type -> .Aritm_comp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
48	
	 Atom -> Cast_type., 
49	
	 Expr -> Conditional., 
50	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
51	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .Check_type, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
52	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
53	
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
54	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
55	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> id(.Arguments), 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Arguments -> .Expr, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Call_func -> id(.), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
56	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
57	
	 Type_inst -> newCall_func., 
58	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
59	
	 Expr -> Let_expr., 
60	
	 Atom -> bool., 
61	
	 Atom -> .Index_object, 
	 Factor -> !.Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .string, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
62	
	 Atom -> Type_inst., 
63	
	 Atom -> Member., 
64	
	 Vector -> Vector_imp., 
65	
	 Factor -> !Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
66	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Index_object -> Atom[.Expr], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
67	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
68	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
69	
	 Atom -> Vector., 
70	
	 Atom -> Index_object., 
71	
	 Vector -> Vector_exp., 
72	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
73	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Pow -> Sign**.Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
74	
	 Pow -> Sign**Pow., 
75	
	 Sign -> Factor., 
76	
	 Atom -> Expr_block., 
77	
	 Atom -> Call_func., 
78	
	 Atom -> num., 
79	
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Sign -> +.Factor, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
80	
	 Sign -> +Factor., 
81	
	 Destr_assig -> .Atom.id:=Expr, 
	 Vector_exp -> [.], 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> [.Vector_item_list], 
	 Vector_imp -> [.Expr||idinExpr], 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr, 
	 Atom -> .string, 
82	
	 Vector_exp -> []., 
83	
	 Vector_exp -> [Vector_item_list.], 
84	
	 Vector_exp -> [Vector_item_list]., 
85	
	 Expr -> For_loop., 
86	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
87	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
88	
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
89	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
90	
	 Term -> Pow., 
91	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
92	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Term -> Term*.Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
93	
	 Term -> Term*Pow., 
94	
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Atom -> .string, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Sign -> -.Factor, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
95	
	 Sign -> -Factor., 
96	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
97	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> (.Expr), 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
98	
	 Atom -> (Expr.), 
99	
	 Atom -> (Expr)., 
100	
	 Conditional -> if.(Expr)ExprCond_other_case, 
101	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
102	
	 Conditional -> if(Expr.)ExprCond_other_case, 
103	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
104	
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
105	
	 Conditional -> if(Expr)ExprCond_other_case., 
106	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
107	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
108	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
109	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
110	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
111	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
112	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Cond_other_case -> else.Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
113	
	 Cond_other_case -> elseExpr., 
114	
	 For_loop -> for.(idinExpr)Expr, 
115	
	 For_loop -> for(.idinExpr)Expr, 
116	
	 For_loop -> for(id.inExpr)Expr, 
117	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 For_loop -> for(idin.Expr)Expr, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
118	
	 For_loop -> for(idinExpr.)Expr, 
119	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 For_loop -> for(idinExpr).Expr, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
120	
	 For_loop -> for(idinExpr)Expr., 
121	
	 Expr -> Destr_assig., 
122	
	 While_loop -> while.(Expr)Expr, 
123	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
124	
	 While_loop -> while(Expr.)Expr, 
125	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 While_loop -> while(Expr).Expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
126	
	 While_loop -> while(Expr)Expr., 
127	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
128	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
129	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
130	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
131	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
132	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> Term/.Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
133	
	 Term -> Term/Pow., 
134	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> Term%.Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
135	
	 Term -> Term%Pow., 
136	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> Arithmetic+.Term, 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
137	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
138	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
139	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
140	
	 Expr -> While_loop., 
141	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
142	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 And_expr -> And_expr&.Check_type, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
143	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
144	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
145	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
146	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> id:=.Expr, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
147	
	 Destr_assig -> id:=Expr., 
148	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
149	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
150	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
151	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
152	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
153	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
154	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
155	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term%Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
156	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
157	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
158	
	 Vector_imp -> [Expr||.idinExpr], 
159	
	 Vector_imp -> [Expr||id.inExpr], 
160	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
161	
	 Vector_imp -> [Expr||idinExpr.], 
162	
	 Vector_imp -> [Expr||idinExpr]., 
163	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr, 
	 Atom -> .string, 
164	
	 Vector_item_list -> Expr,Vector_item_list., 
165	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
166	
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .bool, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .Cast_type, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Pow -> Sign^.Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .string, 
167	
	 Pow -> Sign^Pow., 
168	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
169	
	 Index_object -> Atom[Expr.], 
170	
	 Index_object -> Atom[Expr]., 
171	
	 Call_func -> id(Arguments.), 
172	
	 Call_func -> id(Arguments)., 
173	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
174	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Arguments -> .Expr, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
175	
	 Arguments -> Expr,Arguments., 
176	
	 Call_func -> id()., 
177	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
178	
	 Expr_item_list -> Expr.;, 
179	
	 Expr_item_list -> Expr;., 
180	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Sign -> .+Factor, 
	 Expr_list -> .Expr_item_list, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .bool, 
	 Check_type -> .Aritm_comp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .id, 
	 Expr_list -> Expr_item_list., 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
181	
	 Expr_list -> Expr_item_listExpr_list., 
182	
	 Expr_block -> {Expr_list.}, 
183	
	 Expr_block -> {Expr_list}., 
184	
	 Destr_assig -> Atom.id:=Expr., 
185	
	 Let_expr -> letAssignmentinExpr., 
186	
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
187	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Assignment -> id=.Expr, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Assignment -> id=.Expr,Assignment, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
188	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
189	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
190	
	 Assignment -> id=Expr,Assignment., 
191	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
192	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
193	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 Assignment -> id:id=.Expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
194	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
195	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
196	
	 Assignment -> id:id=Expr,Assignment., 
197	
	 Inline_form -> Method_signature=>Expr.;, 
198	
	 Inline_form -> Method_signature=>Expr;., 
199	
	 Func -> functionFull_form., 
200	
	 Type_function_list -> ProtocolType_function_list., 
201	
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
202	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
203	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
204	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
205	
	 Type -> typeType_decinheritsidType_block., 
206	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(), 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_block -> {.Type_member_list}, 
	 Type_member_list -> ., 
207	
	 Type_member_item -> Inline_form., 
208	
	 Type_block -> {Type_member_list.}, 
209	
	 Type_block -> {Type_member_list}., 
210	
	 Type_member_item -> Full_form., 
211	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
212	
	 Type_member_list -> Type_member_itemType_member_list., 
213	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
214	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Type_member_item -> id=.Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
215	
	 Type_member_item -> id=Expr.;, 
216	
	 Type_member_item -> id=Expr;., 
217	
	 Type_member_item -> id:.id=Expr;, 
218	
	 Type_member_item -> id:id.=Expr;, 
219	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_member_item -> id:id=.Expr;, 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
220	
	 Type_member_item -> id:id=Expr.;, 
221	
	 Type_member_item -> id:id=Expr;., 
222	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Arguments -> .Expr, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
223	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
224	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
225	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
226	
	 Type -> typeType_decType_block., 
227	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
228	
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id,Params, 
	 Params -> .id:id,Params, 
229	
	 Type_dec -> id(Params.), 
230	
	 Type_dec -> id(Params)., 
231	
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
232	
	 Type_function_list -> TypeType_function_list., 
233	
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 S' -> Program., 
236	
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Sign -> .+Factor, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .bool, 
	 Check_type -> .Aritm_comp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Factor -> .Atom, 
	 Expr -> .While_loop, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .id, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Or_expr -> .And_expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(), 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Conditional, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Atom -> .(Expr), 
	 Program -> Type_function_list.Expr_item_list, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Member -> .Atom.id, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .string, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
2	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> symbol., 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
12	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
2	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> TF., 
7	
	 A -> symbol., 
8	
	 T -> F., 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
12	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
1	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 E -> T., 
2	
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> (.E), 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .ε, 
3	
	 A -> ε., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 T -> F., 
7	
	 A -> symbol., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .(E), 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
	 T -> .TF, 
	 E -> E|.T, 
	 A -> .ε, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
	 A -> .ε, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
1	
	 Method_signature -> .id(Params):id, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Func -> function.Full_form, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
2	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
3	
	 Params -> .id,Params, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params):id, 
4	
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
5	
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
6	
	 Params -> id,Params., 
7	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
8	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
9	
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
10	
	 Params -> id:id,Params., 
11	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
12	
	 Method_signature -> id():.id, 
13	
	 Method_signature -> id():id., 
14	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
15	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
16	
	 Method_signature -> id(Params):.id, 
17	
	 Method_signature -> id(Params):id., 
18	
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
19	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Expr_list -> .Expr_item_list, 
	 Term -> .Term*Pow, 
	 Expr_block -> {.Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
20	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> (.Expr), 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
21	
	 Atom -> Expr_block., 
22	
	 Expr -> For_loop., 
23	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
24	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
25	
	 Destr_assig -> .Or_expr, 
	 Call_func -> id(.Arguments), 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Vector, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> id(.), 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
26	
	 Atom -> Vector., 
27	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
28	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
29	
	 Atom -> Type_inst., 
30	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Atom -> .Expr_block, 
	 Factor -> !.Atom, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
31	
	 Atom -> num., 
32	
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
33	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
34	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
35	
	 Member -> Atom.Call_func., 
36	
	 Cast_type -> Atomas.id, 
37	
	 Cast_type -> Atomasid., 
38	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Index_object -> Atom[.Expr], 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
39	
	 Term -> Pow., 
40	
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
41	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
42	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
43	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> Term*.Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
44	
	 Term -> Term*Pow., 
45	
	 Atom -> string., 
46	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Vector_exp -> [.], 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Vector_item_list -> .Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
47	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
48	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
49	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
50	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
51	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
52	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Term -> Term/.Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
53	
	 Term -> Term/Pow., 
54	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
55	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Pow -> Sign^.Pow, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
56	
	 Pow -> Sign^Pow., 
57	
	 Atom -> Member., 
58	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
59	
	 Atom -> Index_object., 
60	
	 Atom -> Cast_type., 
61	
	 Atom -> bool., 
62	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Sign -> -.Factor, 
	 Vector -> .Vector_exp, 
63	
	 Sign -> -Factor., 
64	
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
65	
	 Vector -> Vector_exp., 
66	
	 Vector -> Vector_imp., 
67	
	 Atom -> Call_func., 
68	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Sign -> +.Factor, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
69	
	 Sign -> +Factor., 
70	
	 Sign -> Factor., 
71	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Pow -> Sign**.Pow, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
72	
	 Pow -> Sign**Pow., 
73	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> Term%.Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
74	
	 Term -> Term%Pow., 
75	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_exp, 
76	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
77	
	 Vector_exp -> []., 
78	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
79	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Destr_assig -> id:=.Expr, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
80	
	 Expr -> Let_expr., 
81	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
82	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Or_expr -> Or_expr|.And_expr, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
	 And_expr -> .Check_type, 
83	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
84	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
85	
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
86	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Type_inst, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
87	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
88	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
89	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
90	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
91	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@@Arithmetic, 
92	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
93	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
94	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
95	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
96	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
97	
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Sign -> .-Factor, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .id, 
	 Concat -> .Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Sign -> .+Factor, 
	 Expr_block -> .{Expr_list}, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Vector -> .Vector_exp, 
98	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
99	
	 For_loop -> for.(idinExpr)Expr, 
100	
	 For_loop -> for(.idinExpr)Expr, 
101	
	 For_loop -> for(id.inExpr)Expr, 
102	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 For_loop -> for(idin.Expr)Expr, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
103	
	 Conditional -> if.(Expr)ExprCond_other_case, 
104	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
105	
	 While_loop -> while.(Expr)Expr, 
106	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 While_loop -> while(.Expr)Expr, 
107	
	 Expr -> Destr_assig., 
108	
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
109	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
110	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
111	
	 Destr_assig -> .Or_expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
112	
	 Expr -> While_loop., 
113	
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
114	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
115	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Assignment -> id=.Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Assignment -> id=.Expr,Assignment, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
116	
	 Expr -> Conditional., 
117	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
118	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
119	
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
120	
	 Assignment -> id=Expr,Assignment., 
121	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
122	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
123	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Assignment -> id:id=.Expr, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .Type_inst, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
124	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
125	
	 Assignment -> .id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
126	
	 Assignment -> id:id=Expr,Assignment., 
127	
	 Let_expr -> letAssignment.inExpr, 
128	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
129	
	 Let_expr -> letAssignmentinExpr., 
130	
	 Destr_assig -> Atom.id:=Expr., 
131	
	 While_loop -> while(Expr.)Expr, 
132	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
133	
	 While_loop -> while(Expr)Expr., 
134	
	 Conditional -> if(Expr.)ExprCond_other_case, 
135	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
136	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
137	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Cond_other_case -> else.Expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
138	
	 Cond_other_case -> elseExpr., 
139	
	 Conditional -> if(Expr)ExprCond_other_case., 
140	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
141	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
142	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
143	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
144	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
145	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
146	
	 For_loop -> for(idinExpr.)Expr, 
147	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 For_loop -> for(idinExpr).Expr, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
148	
	 For_loop -> for(idinExpr)Expr., 
149	
	 Destr_assig -> id:=Expr., 
150	
	 Vector_exp -> [Vector_item_list.], 
151	
	 Vector_exp -> [Vector_item_list]., 
152	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
153	
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Expr -> .Destr_assig, 
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Vector_item_list -> .Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
154	
	 Vector_item_list -> Expr,Vector_item_list., 
155	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
156	
	 Vector_imp -> [Expr||.idinExpr], 
157	
	 Vector_imp -> [Expr||id.inExpr], 
158	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
159	
	 Vector_imp -> [Expr||idinExpr.], 
160	
	 Vector_imp -> [Expr||idinExpr]., 
161	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
162	
	 Index_object -> Atom[Expr.], 
163	
	 Index_object -> Atom[Expr]., 
164	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
165	
	 Call_func -> id()., 
166	
	 Call_func -> id(Arguments.), 
167	
	 Call_func -> id(Arguments)., 
168	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
169	
	 Destr_assig -> .Or_expr, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arguments -> Expr,.Arguments, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
170	
	 Arguments -> Expr,Arguments., 
171	
	 Type_inst -> newCall_func., 
172	
	 Atom -> (Expr.), 
173	
	 Atom -> (Expr)., 
174	
	 Expr_block -> {Expr_list.}, 
175	
	 Expr_block -> {Expr_list}., 
176	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Expr_list -> .Expr_item_list, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Expr_list -> Expr_item_list., 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
177	
	 Expr_list -> Expr_item_listExpr_list., 
178	
	 Expr_item_list -> Expr.;, 
179	
	 Expr_item_list -> Expr;., 
180	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
181	
	 Full_form -> Method_signatureExpr_block;., 
182	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
183	
	 Inline_form -> Method_signature=>Expr.;, 
184	
	 Inline_form -> Method_signature=>Expr;., 
185	
	 Func -> functionInline_form., 
186	
	 Func -> functionFull_form., 
187	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .num, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
188	
	 Program -> Type_function_listExpr_item_list., 
189	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
190	
	 Type_function_list -> TypeType_function_list., 
191	
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsidType_block, 
192	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
193	
	 Params -> .id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
194	
	 Type_dec -> id(Params.), 
195	
	 Type_dec -> id(Params)., 
196	
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
197	
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
198	
	 Type_member_item -> Inline_form., 
199	
	 Type_block -> {Type_member_list.}, 
200	
	 Type_block -> {Type_member_list}., 
201	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
202	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Type_member_item -> id=.Expr;, 
	 Concat -> .Arithmetic, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
203	
	 Type_member_item -> id=Expr.;, 
204	
	 Type_member_item -> id=Expr;., 
205	
	 Type_member_item -> id:.id=Expr;, 
206	
	 Type_member_item -> id:id.=Expr;, 
207	
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .Destr_assig, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Type_member_item -> id:id=.Expr;, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Expr -> .While_loop, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
208	
	 Type_member_item -> id:id=Expr.;, 
209	
	 Type_member_item -> id:id=Expr;., 
210	
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
211	
	 Type_member_list -> Type_member_itemType_member_list., 
212	
	 Type_member_item -> Full_form., 
213	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
214	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
215	
	 Destr_assig -> .Or_expr, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Vector, 
	 Call_func -> .id(Arguments), 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Vector_exp -> .[], 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .string, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .-Factor, 
	 Expr -> .Let_expr, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .num, 
	 And_expr -> .Check_type, 
	 Expr -> .While_loop, 
	 Pow -> .Sign, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Or_expr -> .And_expr, 
	 Atom -> .bool, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Let_expr -> .letAssignmentinExpr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .+Factor, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr,Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Vector -> .Vector_exp, 
	 While_loop -> .while(Expr)Expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
216	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
217	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
218	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
219	
	 Type -> typeType_decinheritsidType_block., 
220	
	 Type -> typeType_decType_block., 
221	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
222	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
223	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
224	
	 Protocol_block -> {Method_dec_list.}, 
225	
	 Protocol_block -> {Method_dec_list}., 
226	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
227	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
228	
	 Method_dec_list -> Method_signature;Method_dec_list., 
229	
	 Protocol -> protocolidextends.idProtocol_block, 
230	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
231	
	 Protocol -> protocolidextendsidProtocol_block., 
232	
	 Protocol -> protocolidProtocol_block., 
233	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
236	
	 Type_function_list -> ProtocolType_function_list., 
237	
	 S' -> Program., 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> .ε, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 T -> .TF, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> .(E), 
1	
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> T., 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .(E), 
5	
	 T -> F., 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 E -> E|.T, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
8	
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .T, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
1	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 F -> .A, 
	 T -> T.F, 
	 E -> T., 
	 A -> .symbol, 
2	
	 A -> symbol., 
3	
	 A -> ε., 
4	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> (E)., 
8	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .symbol, 
9	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 A -> .symbol, 
10	
	 T -> TF., 
11	
	 F -> A.*, 
	 F -> A., 
12	
	 F -> A*., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
1	
	 A -> (.E), 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A*, 
2	
	 A -> ε., 
3	
	 A -> (E.), 
	 E -> E.|T, 
4	
	 A -> (E)., 
5	
	 A -> .ε, 
	 T -> .TF, 
	 A -> .(E), 
	 F -> .A, 
	 T -> .F, 
	 E -> E|.T, 
	 A -> .symbol, 
	 F -> .A*, 
6	
	 A -> symbol., 
7	
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 E -> E|T., 
	 A -> .symbol, 
	 F -> .A*, 
8	
	 T -> TF., 
9	
	 F -> A.*, 
	 F -> A., 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 E -> T., 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A*, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 S' -> .Program, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
1	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
2	
	 Vector_exp -> .[], 
	 Sign -> -.Factor, 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
3	
	 Atom -> Call_func., 
4	
	 Atom -> Expr_block., 
5	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
6	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Call_func -> id(.Arguments), 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Arguments -> .Expr, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Call_func -> id(.), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
7	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
8	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Cast_type -> .Atomasid, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
9	
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
10	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Term -> Term%.Pow, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
11	
	 Term -> Term%Pow., 
12	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> !.Atom, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
13	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Vector_exp -> [.], 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Vector_exp -> [.Vector_item_list], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
14	
	 For_loop -> for.(idinExpr)Expr, 
15	
	 For_loop -> for(.idinExpr)Expr, 
16	
	 For_loop -> for(id.inExpr)Expr, 
17	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 For_loop -> for(idin.Expr)Expr, 
18	
	 Term -> Pow., 
19	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
20	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 Cast_type -> .Atomasid, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Sign -> .Factor, 
21	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
22	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
23	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Expr_block -> {.Expr_list}, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Expr_list -> .Expr_item_list, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
24	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
25	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> id:=.Expr, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
26	
	 Expr -> For_loop., 
27	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
28	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Arithmetic -> Arithmetic-.Term, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
29	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
30	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> Term/.Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
31	
	 Term -> Term/Pow., 
32	
	 Atom -> Index_object., 
33	
	 Atom -> num., 
34	
	 Atom -> string., 
35	
	 Atom -> Vector., 
36	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .(Expr), 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
	 Sign -> +.Factor, 
37	
	 Vector -> Vector_imp., 
38	
	 Sign -> +Factor., 
39	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> (.Expr), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
40	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
41	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Arithmetic -> .Term, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 Cast_type -> .Atomasid, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 And_expr -> And_expr&.Check_type, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
42	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
43	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
44	
	 Vector_exp -> .[], 
	 Concat -> Concat@.Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
45	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
46	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .id, 
47	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
48	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Term -> Term*.Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
49	
	 Term -> Term*Pow., 
50	
	 Sign -> Factor., 
51	
	 Vector -> Vector_exp., 
52	
	 Atom -> Member., 
53	
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
54	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
55	
	 Type_inst -> newCall_func., 
56	
	 Atom -> bool., 
57	
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
58	
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
59	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
60	
	 Member -> Atom.Call_func., 
61	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Index_object -> Atom[.Expr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
62	
	 Expr -> Destr_assig., 
63	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
64	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
65	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
66	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
67	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
68	
	 Expr -> Conditional., 
69	
	 Expr -> While_loop., 
70	
	 Expr -> Let_expr., 
71	
	 While_loop -> while.(Expr)Expr, 
72	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 While_loop -> while(.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
73	
	 While_loop -> while(Expr.)Expr, 
74	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 While_loop -> while(Expr).Expr, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
75	
	 While_loop -> while(Expr)Expr., 
76	
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
77	
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
78	
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
79	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> Atom.id:=.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
80	
	 Destr_assig -> Atom.id:=Expr., 
81	
	 Atom -> Cast_type., 
82	
	 Atom -> Type_inst., 
83	
	 Conditional -> if.(Expr)ExprCond_other_case, 
84	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
85	
	 Conditional -> if(Expr.)ExprCond_other_case, 
86	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
87	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
88	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Cond_other_case -> else.Expr, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
89	
	 Cond_other_case -> elseExpr., 
90	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
91	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
92	
	 Pow -> Sign**Pow., 
93	
	 Vector_exp -> .[], 
	 Atom -> .bool, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Pow -> Sign^.Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
94	
	 Pow -> Sign^Pow., 
95	
	 Conditional -> if(Expr)ExprCond_other_case., 
96	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
97	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
98	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
99	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
100	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
101	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
102	
	 Cast_type -> Atomas.id, 
103	
	 Cast_type -> Atomasid., 
104	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
105	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
106	
	 Assignment -> id:id=Expr,Assignment., 
107	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Assignment -> id=.Expr, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
108	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
109	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
110	
	 Assignment -> id=Expr,Assignment., 
111	
	 Let_expr -> letAssignment.inExpr, 
112	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
113	
	 Let_expr -> letAssignmentinExpr., 
114	
	 Index_object -> Atom[Expr.], 
115	
	 Index_object -> Atom[Expr]., 
116	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> Concat@@.Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .id, 
117	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
118	
	 Atom -> (Expr.), 
119	
	 Atom -> (Expr)., 
120	
	 Destr_assig -> id:=Expr., 
121	
	 Expr_block -> {Expr_list.}, 
122	
	 Expr_block -> {Expr_list}., 
123	
	 Expr_item_list -> Expr.;, 
124	
	 Expr_item_list -> Expr;., 
125	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Expr_list -> Expr_item_list., 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Expr_list -> .Expr_item_list, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
126	
	 Expr_list -> Expr_item_listExpr_list., 
127	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
128	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
129	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
130	
	 Vector_exp -> .[], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
131	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
132	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
133	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
134	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
135	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
136	
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Atom -> .Member, 
	 Vector -> .Vector_exp, 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
137	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
138	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
139	
	 For_loop -> for(idinExpr.)Expr, 
140	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
141	
	 For_loop -> for(idinExpr)Expr., 
142	
	 Vector_exp -> []., 
143	
	 Vector_exp -> [Vector_item_list.], 
144	
	 Vector_exp -> [Vector_item_list]., 
145	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
146	
	 Vector_imp -> [Expr||.idinExpr], 
147	
	 Vector_imp -> [Expr||id.inExpr], 
148	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
149	
	 Vector_imp -> [Expr||idinExpr.], 
150	
	 Vector_imp -> [Expr||idinExpr]., 
151	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
152	
	 Vector_item_list -> Expr,Vector_item_list., 
153	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
154	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..Call_func, 
155	
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
156	
	 Call_func -> id(Arguments.), 
157	
	 Call_func -> id(Arguments)., 
158	
	 Call_func -> id()., 
159	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
160	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arguments -> Expr,.Arguments, 
	 Term -> .Term/Pow, 
	 Sign -> .-Factor, 
	 Expr -> .Conditional, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
161	
	 Arguments -> Expr,Arguments., 
162	
	 Sign -> -Factor., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
165	
	 Type_function_list -> TypeType_function_list., 
166	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
167	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
168	
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(), 
169	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
170	
	 Params -> .id:id, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.), 
	 Params -> .id:id,Params, 
171	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
172	
	 Method_signature -> id():.id, 
173	
	 Method_signature -> id():id., 
174	
	 Params -> id.,Params, 
	 Params -> id., 
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
175	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
176	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
177	
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id,Params, 
178	
	 Params -> id:id,Params., 
179	
	 Params -> id,.Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
180	
	 Params -> id,Params., 
181	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
182	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
183	
	 Method_signature -> id(Params):.id, 
184	
	 Method_signature -> id(Params):id., 
185	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
186	
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
187	
	 Method_dec_list -> Method_signature;Method_dec_list., 
188	
	 Protocol_block -> {Method_dec_list.}, 
189	
	 Protocol_block -> {Method_dec_list}., 
190	
	 Protocol -> protocolidProtocol_block., 
191	
	 Protocol -> protocolidextends.idProtocol_block, 
192	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
193	
	 Protocol -> protocolidextendsidProtocol_block., 
194	
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
195	
	 Type_function_list -> FuncType_function_list., 
196	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
197	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
198	
	 Type_dec -> id(.Params), 
	 Params -> .id:id, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
199	
	 Type_dec -> id(Params.), 
200	
	 Type_dec -> id(Params)., 
201	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
202	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
203	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
204	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Arguments -> .Expr,Arguments, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
205	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
206	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
207	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
208	
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(), 
209	
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
210	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
211	
	 Full_form -> Method_signatureExpr_block;., 
212	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
213	
	 Inline_form -> Method_signature=>Expr.;, 
214	
	 Inline_form -> Method_signature=>Expr;., 
215	
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(), 
216	
	 Type_member_list -> Type_member_itemType_member_list., 
217	
	 Type_member_item -> Full_form., 
218	
	 Type_member_item -> Inline_form., 
219	
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
220	
	 Type_member_item -> id:.id=Expr;, 
221	
	 Type_member_item -> id:id.=Expr;, 
222	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Type_member_item -> id:id=.Expr;, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
223	
	 Type_member_item -> id:id=Expr.;, 
224	
	 Type_member_item -> id:id=Expr;., 
225	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .bool, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .!Atom, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Arithmetic, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector -> .Vector_exp, 
	 Atom -> .Member, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Expr -> .Destr_assig, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr -> .Let_expr, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Type_member_item -> id=.Expr;, 
226	
	 Type_member_item -> id=Expr.;, 
227	
	 Type_member_item -> id=Expr;., 
228	
	 Type_block -> {Type_member_list.}, 
229	
	 Type_block -> {Type_member_list}., 
230	
	 Type -> typeType_decinheritsidType_block., 
231	
	 Type -> typeType_decType_block., 
232	
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
233	
	 Type_function_list -> ProtocolType_function_list., 
234	
	 Method_signature -> .id(Params):id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Inline_form, 
	 Func -> function.Full_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
235	
	 Func -> functionInline_form., 
236	
	 Func -> functionFull_form., 
237	
	 S' -> Program., 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 E -> E.|T, 
	 S' -> E., 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 T -> .TF, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 T -> F., 
6	
	 S' -> E., 
	 E -> E.|T, 
7	
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|.T, 
	 F -> .A*, 
8	
	 T -> .TF, 
	 E -> .T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> (.E), 
9	
	 A -> (E.), 
	 E -> E.|T, 
10	
	 A -> (E)., 
11	
	 E -> T., 
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
12	
	 T -> TF., 
13	
	 A -> .symbol, 
	 A -> .ε, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
	 F -> .A, 
	 F -> .A*, 
0	
	 Program -> .Type_function_listExpr_item_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Type_function_list -> ., 
1	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr_item_list -> .Expr;, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
2	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
3	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Concat -> Concat@.Arithmetic, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
4	
	 Atom -> num., 
5	
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
6	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Index_object -> Atom[.Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
7	
	 Expr -> Let_expr., 
8	
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
9	
	 Cast_type -> Atomas.id, 
10	
	 Cast_type -> Atomasid., 
11	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
12	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
13	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Call_func -> id(.), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arguments -> .Expr,Arguments, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> id(.Arguments), 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
14	
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
15	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
16	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
17	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Concat -> Concat@@.Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
18	
	 Atom -> Cast_type., 
19	
	 Atom -> Member., 
20	
	 Term -> Pow., 
21	
	 Atom -> bool., 
22	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Sign -> +.Factor, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
23	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
24	
	 Type_inst -> newCall_func., 
25	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
26	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> !.Atom, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
27	
	 Vector -> Vector_imp., 
28	
	 Atom -> Vector., 
29	
	 Atom -> Expr_block., 
30	
	 Atom -> Type_inst., 
31	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
32	
	 Atom -> Call_func., 
33	
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
34	
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
35	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
36	
	 Member -> Atom.Call_func., 
37	
	 Vector -> Vector_exp., 
38	
	 Atom -> Index_object., 
39	
	 Vector_item_list -> .Expr, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Vector_exp -> [.], 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Vector_exp -> [.Vector_item_list], 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
40	
	 Expr -> While_loop., 
41	
	 Expr -> Conditional., 
42	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
43	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> Or_expr|.And_expr, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 And_expr -> .And_expr&Check_type, 
	 Sign -> .Factor, 
44	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
45	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
46	
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
47	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
48	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
49	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
50	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Arithmetic -> Arithmetic-.Term, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
51	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> (.Expr), 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
52	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
53	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
54	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Assignment -> id=.Expr, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
55	
	 Expr -> For_loop., 
56	
	 While_loop -> while.(Expr)Expr, 
57	
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
58	
	 For_loop -> for.(idinExpr)Expr, 
59	
	 For_loop -> for(.idinExpr)Expr, 
60	
	 For_loop -> for(id.inExpr)Expr, 
61	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 For_loop -> for(idin.Expr)Expr, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
62	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> {.Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
63	
	 Expr_block -> {Expr_list.}, 
64	
	 Expr_block -> {Expr_list}., 
65	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Expr_list -> Expr_item_list., 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Expr_list -> Expr_item_list.Expr_list, 
66	
	 Expr_list -> Expr_item_listExpr_list., 
67	
	 Atom -> string., 
68	
	 Expr -> Destr_assig., 
69	
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
70	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Destr_assig -> id:=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
71	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Member -> .Atom.Call_func, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Sign -> -.Factor, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
72	
	 Sign -> -Factor., 
73	
	 Conditional -> if.(Expr)ExprCond_other_case, 
74	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
75	
	 Conditional -> if(Expr.)ExprCond_other_case, 
76	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
77	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
78	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
79	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
80	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
81	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
82	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
83	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
84	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Cond_other_case -> else.Expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
85	
	 Cond_other_case -> elseExpr., 
86	
	 Sign -> Factor., 
87	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
88	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 And_expr -> And_expr&.Check_type, 
89	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
90	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
91	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> Sign**.Pow, 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
92	
	 Pow -> Sign**Pow., 
93	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Pow -> Sign^.Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
94	
	 Pow -> Sign^Pow., 
95	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
96	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Term -> Term/.Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
97	
	 Term -> Term/Pow., 
98	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> Term%.Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
99	
	 Term -> Term%Pow., 
100	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Term -> Term*.Pow, 
	 Atom -> .id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
101	
	 Term -> Term*Pow., 
102	
	 Conditional -> if(Expr)ExprCond_other_case., 
103	
	 Destr_assig -> id:=Expr., 
104	
	 Expr_item_list -> Expr.;, 
105	
	 Expr_item_list -> Expr;., 
106	
	 For_loop -> for(idinExpr.)Expr, 
107	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> for(idinExpr).Expr, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
108	
	 For_loop -> for(idinExpr)Expr., 
109	
	 While_loop -> while(Expr.)Expr, 
110	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 While_loop -> while(Expr).Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
111	
	 While_loop -> while(Expr)Expr., 
112	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
113	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
114	
	 Assignment -> id=Expr,Assignment., 
115	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
116	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
117	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Assignment -> id:id=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
118	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
119	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
120	
	 Assignment -> id:id=Expr,Assignment., 
121	
	 Let_expr -> letAssignment.inExpr, 
122	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
123	
	 Let_expr -> letAssignmentinExpr., 
124	
	 Atom -> (Expr.), 
125	
	 Atom -> (Expr)., 
126	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
127	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> Arithmetic+.Term, 
	 Vector_exp -> .[], 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
128	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
129	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
130	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
131	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
132	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
133	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
134	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
135	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Sign -> .-Factor, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(), 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign**Pow, 
	 Member -> .Atom.id, 
	 Atom -> .string, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
136	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
137	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
138	
	 Vector_exp -> []., 
139	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
140	
	 Vector_imp -> [Expr||.idinExpr], 
141	
	 Vector_imp -> [Expr||id.inExpr], 
142	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
143	
	 Vector_imp -> [Expr||idinExpr.], 
144	
	 Vector_imp -> [Expr||idinExpr]., 
145	
	 Vector_item_list -> .Expr, 
	 Atom -> .(Expr), 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
	 Vector_item_list -> Expr,.Vector_item_list, 
146	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
147	
	 Vector_item_list -> Expr,Vector_item_list., 
148	
	 Vector_exp -> [Vector_item_list.], 
149	
	 Vector_exp -> [Vector_item_list]., 
150	
	 Sign -> +Factor., 
151	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
152	
	 Call_func -> id()., 
153	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
154	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arguments -> .Expr,Arguments, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Arguments -> Expr,.Arguments, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
155	
	 Arguments -> Expr,Arguments., 
156	
	 Call_func -> id(Arguments.), 
157	
	 Call_func -> id(Arguments)., 
158	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
159	
	 Destr_assig -> Atom.id:=Expr., 
160	
	 Index_object -> Atom[Expr.], 
161	
	 Index_object -> Atom[Expr]., 
162	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
165	
	 Type_function_list -> ProtocolType_function_list., 
166	
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type_dec -> .id, 
167	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
168	
	 Params -> .id, 
	 Type_dec -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
169	
	 Params -> id.:id, 
	 Params -> id., 
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
170	
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
171	
	 Params -> id,Params., 
172	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
173	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
174	
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
175	
	 Params -> id:id,Params., 
176	
	 Type_dec -> id(Params.), 
177	
	 Type_dec -> id(Params)., 
178	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
179	
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(), 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> .Type_member_itemType_member_list, 
180	
	 Type_member_item -> Inline_form., 
181	
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
182	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
183	
	 Inline_form -> Method_signature=>Expr.;, 
184	
	 Inline_form -> Method_signature=>Expr;., 
185	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
186	
	 Full_form -> Method_signatureExpr_block;., 
187	
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
188	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Type_member_item -> id=.Expr;, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
189	
	 Type_member_item -> id=Expr.;, 
190	
	 Type_member_item -> id=Expr;., 
191	
	 Method_signature -> id(.Params):id, 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Method_signature -> id(.), 
	 Params -> .id:id, 
	 Method_signature -> id(.Params), 
192	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
193	
	 Method_signature -> id():.id, 
194	
	 Method_signature -> id():id., 
195	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
196	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
197	
	 Method_signature -> id(Params):.id, 
198	
	 Method_signature -> id(Params):id., 
199	
	 Type_member_item -> id:.id=Expr;, 
200	
	 Type_member_item -> id:id.=Expr;, 
201	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_member_item -> id:id=.Expr;, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
202	
	 Type_member_item -> id:id=Expr.;, 
203	
	 Type_member_item -> id:id=Expr;., 
204	
	 Type_block -> {Type_member_list.}, 
205	
	 Type_block -> {Type_member_list}., 
206	
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(), 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
207	
	 Type_member_list -> Type_member_itemType_member_list., 
208	
	 Type_member_item -> Full_form., 
209	
	 Type -> typeType_decType_block., 
210	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
211	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
212	
	 Index_object -> .Atom[Expr], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign^Pow, 
	 And_expr -> .And_expr&Check_type, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Atom -> .bool, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Sign -> .-Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 Term -> .Term*Pow, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Factor -> .Atom, 
	 Factor -> .!Atom, 
	 Arithmetic -> .Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .id, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Expr -> .For_loop, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arguments -> .Expr,Arguments, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign**Pow, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Expr -> .Destr_assig, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> .[], 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Vector, 
	 Expr -> .Let_expr, 
	 Sign -> .Factor, 
213	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
214	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
215	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
216	
	 Type -> typeType_decinheritsidType_block., 
217	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
218	
	 Type_function_list -> FuncType_function_list., 
219	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
220	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
221	
	 Protocol -> protocolidextends.idProtocol_block, 
222	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
223	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
224	
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
225	
	 Protocol_block -> {Method_dec_list.}, 
226	
	 Protocol_block -> {Method_dec_list}., 
227	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
228	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
229	
	 Method_dec_list -> Method_signature;Method_dec_list., 
230	
	 Protocol -> protocolidextendsidProtocol_block., 
231	
	 Protocol -> protocolidProtocol_block., 
232	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
233	
	 Type_function_list -> TypeType_function_list., 
234	
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Func -> function.Full_form, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
235	
	 Func -> functionInline_form., 
236	
	 Func -> functionFull_form., 
237	
	 S' -> Program., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 T -> F., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> symbol., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 A -> (E)., 
9	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
11	
	 T -> TF., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .T, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 E -> .E|T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
1	
	 A -> ε., 
2	
	 F -> A.*, 
	 F -> A., 
3	
	 F -> A*., 
4	
	 A -> symbol., 
5	
	 A -> .ε, 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 T -> .TF, 
	 F -> .A*, 
	 A -> (.E), 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
6	
	 A -> (E.), 
	 E -> E.|T, 
7	
	 A -> (E)., 
8	
	 E -> E|.T, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
9	
	 A -> .ε, 
	 T -> T.F, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 T -> F., 
12	
	 A -> .ε, 
	 T -> T.F, 
	 E -> T., 
	 F -> .A*, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
1	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Program -> Type_function_list.Expr_item_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
2	
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> !.Atom, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Atom -> .Type_inst, 
	 Atom -> .string, 
3	
	 Atom -> Index_object., 
4	
	 Atom -> Vector., 
5	
	 Vector -> Vector_imp., 
6	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector_item_list -> .Expr, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Vector_exp -> [.], 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
7	
	 Atom -> string., 
8	
	 Atom -> Member., 
9	
	 Atom -> bool., 
10	
	 Sign -> Factor., 
11	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> (.Expr), 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
12	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
13	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
14	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Arguments -> .Expr, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Call_func -> id(.Arguments), 
	 Expr -> .Conditional, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> id(.), 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
15	
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Sign -> +.Factor, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
16	
	 Sign -> +Factor., 
17	
	 Vector -> Vector_exp., 
18	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr_block -> {.Expr_list}, 
	 Term -> .Pow, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
19	
	 Conditional -> if.(Expr)ExprCond_other_case, 
20	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
21	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
22	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
23	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
24	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Arithmetic -> Arithmetic+.Term, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
25	
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign.**Pow, 
26	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Pow -> Sign**.Pow, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
27	
	 Atom -> Expr_block., 
28	
	 Pow -> Sign**Pow., 
29	
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
30	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
31	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
32	
	 Member -> Atom.Call_func., 
33	
	 Cast_type -> Atomas.id, 
34	
	 Cast_type -> Atomasid., 
35	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Index_object -> Atom[.Expr], 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
36	
	 Expr -> For_loop., 
37	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
38	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
39	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
40	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Term -> Term*.Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
41	
	 Term -> Term*Pow., 
42	
	 Atom -> Call_func., 
43	
	 Atom -> Cast_type., 
44	
	 Atom -> num., 
45	
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Sign -> -.Factor, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
46	
	 Sign -> -Factor., 
47	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
48	
	 Atom -> Type_inst., 
49	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> Term/.Pow, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
50	
	 Term -> Term/Pow., 
51	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Term -> Term%.Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
52	
	 Term -> Term%Pow., 
53	
	 Term -> Pow., 
54	
	 Expr -> While_loop., 
55	
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
56	
	 For_loop -> for.(idinExpr)Expr, 
57	
	 For_loop -> for(.idinExpr)Expr, 
58	
	 For_loop -> for(id.inExpr)Expr, 
59	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
60	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
61	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
62	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
63	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Concat -> Concat@.Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
64	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
65	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
66	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
67	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
68	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
69	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
70	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
71	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
72	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
73	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
74	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
75	
	 For_loop -> for(idinExpr.)Expr, 
76	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> for(idinExpr).Expr, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
77	
	 For_loop -> for(idinExpr)Expr., 
78	
	 While_loop -> while.(Expr)Expr, 
79	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 While_loop -> while(.Expr)Expr, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
80	
	 While_loop -> while(Expr.)Expr, 
81	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 While_loop -> while(Expr).Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
82	
	 While_loop -> while(Expr)Expr., 
83	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
84	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
85	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Assignment -> id=.Expr, 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
86	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
87	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
88	
	 Assignment -> id=Expr,Assignment., 
89	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
90	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> Or_expr|.And_expr, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 And_expr -> .Check_type, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
91	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
92	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
	 And_expr -> And_expr&.Check_type, 
93	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
94	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .num, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
95	
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
96	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
97	
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
98	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
99	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
100	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
101	
	 Destr_assig -> Atom.id:=Expr., 
102	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
103	
	 Expr -> Destr_assig., 
104	
	 Expr -> Let_expr., 
105	
	 Destr_assig -> id.:=Expr, 
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
106	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Destr_assig -> id:=.Expr, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
107	
	 Destr_assig -> id:=Expr., 
108	
	 Expr -> Conditional., 
109	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
110	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
111	
	 Assignment -> id:id=.Expr, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
112	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
113	
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
114	
	 Assignment -> id:id=Expr,Assignment., 
115	
	 Let_expr -> letAssignment.inExpr, 
116	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Let_expr -> letAssignmentin.Expr, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
117	
	 Let_expr -> letAssignmentinExpr., 
118	
	 Index_object -> Atom[Expr.], 
119	
	 Index_object -> Atom[Expr]., 
120	
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Vector -> .Vector_imp, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .id, 
	 Factor -> .Atom, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .num, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Expr_block -> .{Expr_list}, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Pow -> Sign^.Pow, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
121	
	 Pow -> Sign^Pow., 
122	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
123	
	 Conditional -> if(Expr.)ExprCond_other_case, 
124	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
125	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
126	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Cond_other_case -> else.Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
127	
	 Cond_other_case -> elseExpr., 
128	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
129	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
130	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
131	
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
132	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
133	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
134	
	 Conditional -> if(Expr)ExprCond_other_case., 
135	
	 Expr_item_list -> Expr.;, 
136	
	 Expr_item_list -> Expr;., 
137	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Term -> .Pow, 
	 Sign -> .+Factor, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Expr_item_list -> .Expr;, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Expr_list -> Expr_item_list., 
138	
	 Expr_list -> Expr_item_listExpr_list., 
139	
	 Expr_block -> {Expr_list.}, 
140	
	 Expr_block -> {Expr_list}., 
141	
	 Call_func -> id()., 
142	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
143	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Arguments -> Expr,.Arguments, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Arguments -> .Expr, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
144	
	 Arguments -> Expr,Arguments., 
145	
	 Call_func -> id(Arguments.), 
146	
	 Call_func -> id(Arguments)., 
147	
	 Type_inst -> newCall_func., 
148	
	 Atom -> (Expr.), 
149	
	 Atom -> (Expr)., 
150	
	 Vector_exp -> [Vector_item_list.], 
151	
	 Vector_exp -> [Vector_item_list]., 
152	
	 Vector_exp -> []., 
153	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
154	
	 Vector_imp -> [Expr||.idinExpr], 
155	
	 Vector_imp -> [Expr||id.inExpr], 
156	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
157	
	 Vector_imp -> [Expr||idinExpr.], 
158	
	 Vector_imp -> [Expr||idinExpr]., 
159	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector_item_list -> .Expr, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
160	
	 Vector_item_list -> Expr,Vector_item_list., 
161	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
162	
	 Member -> Atom..id, 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
165	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
166	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Type_dec -> id(.Params), 
167	
	 Params -> id.:id,Params, 
	 Params -> id.:id, 
	 Params -> id.,Params, 
	 Params -> id., 
168	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> id,.Params, 
169	
	 Params -> id,Params., 
170	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
171	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
172	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
173	
	 Params -> id:id,Params., 
174	
	 Type_dec -> id(Params.), 
175	
	 Type_dec -> id(Params)., 
176	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
177	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
178	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
179	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Arguments -> .Expr, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
180	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
181	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
182	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
183	
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Inline_form, 
184	
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
185	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
186	
	 Full_form -> Method_signatureExpr_block;., 
187	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
188	
	 Inline_form -> Method_signature=>Expr.;, 
189	
	 Inline_form -> Method_signature=>Expr;., 
190	
	 Type_block -> {Type_member_list.}, 
191	
	 Type_block -> {Type_member_list}., 
192	
	 Type_member_item -> Full_form., 
193	
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
194	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Type_member_item -> id=.Expr;, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Aritm_comp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
195	
	 Type_member_item -> id=Expr.;, 
196	
	 Type_member_item -> id=Expr;., 
197	
	 Type_member_item -> id:.id=Expr;, 
198	
	 Type_member_item -> id:id.=Expr;, 
199	
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_imp, 
	 Expr -> .Let_expr, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 For_loop -> .for(idinExpr)Expr, 
	 Type_member_item -> id:id=.Expr;, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Expr_block, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Member, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr -> .For_loop, 
	 Cast_type -> .Atomasid, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Pow, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Or_expr -> .And_expr, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.Call_func, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Term -> .Term%Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .-Factor, 
	 Expr -> .While_loop, 
	 Atom -> .Type_inst, 
	 Factor -> .!Atom, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .string, 
	 Sign -> .+Factor, 
200	
	 Type_member_item -> id:id=Expr.;, 
201	
	 Type_member_item -> id:id=Expr;., 
202	
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params), 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id,Params, 
	 Params -> .id, 
203	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
204	
	 Method_signature -> id():.id, 
205	
	 Method_signature -> id():id., 
206	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
207	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
208	
	 Method_signature -> id(Params):.id, 
209	
	 Method_signature -> id(Params):id., 
210	
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Inline_form, 
211	
	 Type_member_list -> Type_member_itemType_member_list., 
212	
	 Type_member_item -> Inline_form., 
213	
	 Type -> typeType_decinheritsidType_block., 
214	
	 Type -> typeType_decType_block., 
215	
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
216	
	 Type_function_list -> TypeType_function_list., 
217	
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
218	
	 Type_function_list -> FuncType_function_list., 
219	
	 Type_function_list -> ., 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
220	
	 Type_function_list -> ProtocolType_function_list., 
221	
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params):id, 
222	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
223	
	 Func -> functionInline_form., 
224	
	 Func -> functionFull_form., 
225	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
226	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
227	
	 Protocol -> protocolidextends.idProtocol_block, 
228	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
229	
	 Protocol -> protocolidextendsidProtocol_block., 
230	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
231	
	 Protocol_block -> {Method_dec_list.}, 
232	
	 Protocol_block -> {Method_dec_list}., 
233	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
234	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
235	
	 Method_dec_list -> Method_signature;Method_dec_list., 
236	
	 Protocol -> protocolidProtocol_block., 
237	
	 S' -> Program., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
1	
	 A -> symbol., 
2	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 F -> .A, 
	 T -> T.F, 
3	
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 E -> .T, 
	 T -> .F, 
	 E -> .E|T, 
	 A -> (.E), 
4	
	 T -> F., 
5	
	 F -> A.*, 
	 F -> A., 
6	
	 F -> A*., 
7	
	 A -> ε., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
11	
	 E -> E|T., 
	 A -> .(E), 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A, 
	 T -> T.F, 
12	
	 T -> TF., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
1	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Or_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
2	
	 Atom -> num., 
3	
	 Atom -> Member., 
4	
	 Atom -> Call_func., 
5	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> (.Expr), 
	 Check_type -> .Aritm_comp, 
6	
	 Atom -> Expr_block., 
7	
	 Expr -> Conditional., 
8	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Vector_exp -> [.Vector_item_list], 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Vector_exp -> [.], 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
9	
	 Vector_exp -> []., 
10	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
11	
	 Factor -> .!Atom, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_item_list -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
12	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
13	
	 Type_inst -> newCall_func., 
14	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
15	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> id(.), 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> id(.Arguments), 
	 Atom -> .Type_inst, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
16	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
17	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Arguments -> Expr,.Arguments, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
18	
	 Atom -> Type_inst., 
19	
	 Atom -> Vector., 
20	
	 Atom -> Index_object., 
21	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
22	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term/Pow, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
23	
	 Atom -> bool., 
24	
	 Atom -> Cast_type., 
25	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Or_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Expr_block -> {.Expr_list}, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
26	
	 Expr_item_list -> Expr.;, 
27	
	 Expr_item_list -> Expr;., 
28	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
29	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[], 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Or_expr -> Or_expr|.And_expr, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Type_inst, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
30	
	 Vector -> Vector_imp., 
31	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
32	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Term -> Term*.Pow, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
33	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Factor -> !.Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
34	
	 Atom -> string., 
35	
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
36	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
37	
	 Member -> Atom.Call_func., 
38	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
39	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Index_object -> Atom[.Expr], 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
40	
	 Index_object -> Atom[Expr.], 
41	
	 Index_object -> Atom[Expr]., 
42	
	 Expr -> While_loop., 
43	
	 Expr -> Let_expr., 
44	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Sign -> -.Factor, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
45	
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
46	
	 Cast_type -> Atomas.id, 
47	
	 Cast_type -> Atomasid., 
48	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
49	
	 Sign -> -Factor., 
50	
	 Vector -> Vector_exp., 
51	
	 Term -> Pow., 
52	
	 Expr -> Destr_assig., 
53	
	 Expr -> For_loop., 
54	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
55	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
56	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
57	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> Concat@@.Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
58	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
59	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> Arithmetic-.Term, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
60	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
61	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Term -> Term%.Pow, 
	 Factor -> .Atom, 
62	
	 Term -> Term%Pow., 
63	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Atom -> .(Expr), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> +.Factor, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
64	
	 Sign -> +Factor., 
65	
	 Sign -> Factor., 
66	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
67	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Pow -> .Sign^Pow, 
	 Pow -> Sign^.Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
68	
	 Pow -> Sign^Pow., 
69	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
70	
	 Pow -> Sign**Pow., 
71	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Term -> Term/.Pow, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
72	
	 Term -> Term/Pow., 
73	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
74	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
75	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
76	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
77	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
78	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
79	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
80	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
81	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
82	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
83	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
84	
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
85	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
86	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
87	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
88	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
89	
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Sign -> .Factor, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Vector, 
	 Type_inst -> .newCall_func, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Index_object -> .Atom[Expr], 
	 Call_func -> .id(Arguments), 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
90	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
91	
	 While_loop -> while.(Expr)Expr, 
92	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 While_loop -> while(.Expr)Expr, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
93	
	 While_loop -> while(Expr.)Expr, 
94	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
95	
	 While_loop -> while(Expr)Expr., 
96	
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
97	
	 Let_expr -> letAssignment.inExpr, 
98	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Let_expr -> letAssignmentin.Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
99	
	 Let_expr -> letAssignmentinExpr., 
100	
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
101	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
102	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
103	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
104	
	 Destr_assig -> Atom.id:=Expr., 
105	
	 Conditional -> if.(Expr)ExprCond_other_case, 
106	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
107	
	 Conditional -> if(Expr.)ExprCond_other_case, 
108	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
109	
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
110	
	 Conditional -> if(Expr)ExprCond_other_case., 
111	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
112	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
113	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
114	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
115	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
116	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
117	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Cond_other_case -> else.Expr, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
118	
	 Cond_other_case -> elseExpr., 
119	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
120	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> id:=.Expr, 
	 Atom -> .Type_inst, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
121	
	 Destr_assig -> id:=Expr., 
122	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
123	
	 For_loop -> for.(idinExpr)Expr, 
124	
	 For_loop -> for(.idinExpr)Expr, 
125	
	 For_loop -> for(id.inExpr)Expr, 
126	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 For_loop -> for(idin.Expr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
127	
	 For_loop -> for(idinExpr.)Expr, 
128	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> for(idinExpr).Expr, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
129	
	 For_loop -> for(idinExpr)Expr., 
130	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
131	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Assignment -> id=.Expr, 
	 Expr -> .For_loop, 
	 Sign -> .Factor, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 Assignment -> id=.Expr,Assignment, 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Atom -> .Type_inst, 
	 Expr_block -> .{Expr_list}, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
132	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
133	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
134	
	 Assignment -> id=Expr,Assignment., 
135	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
136	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
137	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Assignment -> id:id=.Expr,Assignment, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Assignment -> id:id=.Expr, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
138	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
139	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
140	
	 Assignment -> id:id=Expr,Assignment., 
141	
	 Term -> Term*Pow., 
142	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
143	
	 Expr_block -> {Expr_list.}, 
144	
	 Expr_block -> {Expr_list}., 
145	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Or_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr_list -> Expr_item_list., 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr_list -> .Expr_item_list, 
	 Expr -> .Destr_assig, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
146	
	 Expr_list -> Expr_item_listExpr_list., 
147	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
148	
	 Arguments -> Expr,Arguments., 
149	
	 Call_func -> id(Arguments.), 
150	
	 Call_func -> id(Arguments)., 
151	
	 Call_func -> id()., 
152	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
153	
	 Vector_item_list -> Expr,Vector_item_list., 
154	
	 Vector_imp -> [Expr||.idinExpr], 
155	
	 Vector_imp -> [Expr||id.inExpr], 
156	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
157	
	 Vector_imp -> [Expr||idinExpr.], 
158	
	 Vector_imp -> [Expr||idinExpr]., 
159	
	 Vector_exp -> [Vector_item_list.], 
160	
	 Vector_exp -> [Vector_item_list]., 
161	
	 Atom -> (Expr.), 
162	
	 Atom -> (Expr)., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type_dec -> .id, 
	 Type -> type.Type_decType_block, 
165	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
166	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
167	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
168	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Arguments -> .Expr,Arguments, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Arguments -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
169	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
170	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
171	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
172	
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_block -> {.Type_member_list}, 
	 Inline_form -> .Method_signature=>Expr;, 
173	
	 Type_member_item -> Inline_form., 
174	
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
175	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
176	
	 Full_form -> Method_signatureExpr_block;., 
177	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
178	
	 Inline_form -> Method_signature=>Expr.;, 
179	
	 Inline_form -> Method_signature=>Expr;., 
180	
	 Type_block -> {Type_member_list.}, 
181	
	 Type_block -> {Type_member_list}., 
182	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
183	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Type_member_item -> id=.Expr;, 
	 Expr -> .For_loop, 
	 Sign -> .Factor, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
184	
	 Type_member_item -> id=Expr.;, 
185	
	 Type_member_item -> id=Expr;., 
186	
	 Type_member_item -> id:.id=Expr;, 
187	
	 Type_member_item -> id:id.=Expr;, 
188	
	 Factor -> .!Atom, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 While_loop -> .while(Expr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Expr -> .Conditional, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .num, 
	 Aritm_comp -> .Concat, 
	 Let_expr -> .letAssignmentinExpr, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Term, 
	 Atom -> .id, 
	 Sign -> .Factor, 
	 Expr -> .For_loop, 
	 Type_member_item -> id:id=.Expr;, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Pow -> .Sign**Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Atom -> .bool, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Pow, 
	 Vector -> .Vector_imp, 
	 Atom -> .Vector, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Member -> .Atom.Call_func, 
	 Atom -> .string, 
	 Or_expr -> .Or_expr|And_expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .Check_type, 
	 Vector -> .Vector_exp, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Member, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Pow -> .Sign, 
	 Term -> .Term%Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Index_object, 
	 Expr -> .While_loop, 
	 Concat -> .Concat@Arithmetic, 
	 Check_type -> .Aritm_comp, 
189	
	 Type_member_item -> id:id=Expr.;, 
190	
	 Type_member_item -> id:id=Expr;., 
191	
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Method_signature -> id(.), 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.Params):id, 
192	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
193	
	 Method_signature -> id():.id, 
194	
	 Method_signature -> id():id., 
195	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
196	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
197	
	 Method_signature -> id(Params):.id, 
198	
	 Method_signature -> id(Params):id., 
199	
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id., 
200	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
201	
	 Params -> id,Params., 
202	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
203	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
204	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id,Params, 
205	
	 Params -> id:id,Params., 
206	
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
207	
	 Type_member_list -> Type_member_itemType_member_list., 
208	
	 Type_member_item -> Full_form., 
209	
	 Type -> typeType_decinheritsidType_block., 
210	
	 Type -> typeType_decType_block., 
211	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
212	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
213	
	 Type_dec -> id(Params.), 
214	
	 Type_dec -> id(Params)., 
215	
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
216	
	 Type_function_list -> TypeType_function_list., 
217	
	 Func -> function.Inline_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Inline_form -> .Method_signature=>Expr;, 
218	
	 Func -> functionInline_form., 
219	
	 Func -> functionFull_form., 
220	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
221	
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
222	
	 Type_function_list -> FuncType_function_list., 
223	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
224	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
225	
	 Protocol -> protocolidProtocol_block., 
226	
	 Protocol -> protocolidextends.idProtocol_block, 
227	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
228	
	 Protocol -> protocolidextendsidProtocol_block., 
229	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
230	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
231	
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
232	
	 Method_dec_list -> Method_signature;Method_dec_list., 
233	
	 Protocol_block -> {Method_dec_list.}, 
234	
	 Protocol_block -> {Method_dec_list}., 
235	
	 Func -> .functionFull_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> ., 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
236	
	 Type_function_list -> ProtocolType_function_list., 
237	
	 S' -> Program., 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 E -> E.|T, 
	 S' -> E., 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 A -> symbol., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 S' -> E., 
	 E -> E.|T, 
6	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 T -> .F, 
	 A -> .symbol, 
7	
	 T -> F., 
8	
	 T -> .TF, 
	 F -> .A, 
	 A -> .ε, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> (.E), 
	 A -> .symbol, 
9	
	 E -> E.|T, 
	 A -> (E.), 
10	
	 A -> (E)., 
11	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
12	
	 T -> TF., 
13	
	 A -> .ε, 
	 T -> T.F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .symbol, 
0	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 S' -> .Program, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
1	
	 S' -> Program., 
2	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
3	
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
4	
	 Protocol -> protocolidextends.idProtocol_block, 
5	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
6	
	 Protocol -> protocolidextendsidProtocol_block., 
7	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
8	
	 Protocol_block -> {Method_dec_list.}, 
9	
	 Protocol_block -> {Method_dec_list}., 
10	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
11	
	 Method_signature -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.):id, 
12	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
13	
	 Method_signature -> id():.id, 
14	
	 Method_signature -> id():id., 
15	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
16	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
17	
	 Method_signature -> id(Params):.id, 
18	
	 Method_signature -> id(Params):id., 
19	
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
	 Params -> id., 
	 Params -> id.,Params, 
20	
	 Params -> id,.Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
21	
	 Params -> id,Params., 
22	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
23	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
24	
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
25	
	 Params -> id:id,Params., 
26	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
27	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
28	
	 Method_dec_list -> Method_signature;Method_dec_list., 
29	
	 Protocol -> protocolidProtocol_block., 
30	
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
31	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
32	
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
33	
	 Type_dec -> id(Params.), 
34	
	 Type_dec -> id(Params)., 
35	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
36	
	 Type -> typeType_decType_block., 
37	
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id():id, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
38	
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
39	
	 Type_member_list -> Type_member_itemType_member_list., 
40	
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
41	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
42	
	 Full_form -> Method_signatureExpr_block;., 
43	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
44	
	 Atom -> Member., 
45	
	 Atom -> Call_func., 
46	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
47	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
48	
	 Atom -> Cast_type., 
49	
	 Atom -> bool., 
50	
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> -.Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
51	
	 Atom -> Expr_block., 
52	
	 Atom -> Index_object., 
53	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
54	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Index_object -> Atom[.Expr], 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
55	
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Sign -> +.Factor, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
56	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Vector_exp -> [.], 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Vector_exp -> [.Vector_item_list], 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Vector_item_list -> .Expr, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
57	
	 Assignment -> .id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
58	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
59	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Assignment -> id=.Expr,Assignment, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Assignment -> id=.Expr, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
60	
	 Expr -> While_loop., 
61	
	 For_loop -> for.(idinExpr)Expr, 
62	
	 For_loop -> for(.idinExpr)Expr, 
63	
	 For_loop -> for(id.inExpr)Expr, 
64	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 For_loop -> for(idin.Expr)Expr, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
65	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
66	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
67	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
68	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Arithmetic -> Arithmetic+.Term, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
69	
	 Atom -> num., 
70	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Atom -> (.Expr), 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
71	
	 Atom -> (Expr.), 
72	
	 Atom -> (Expr)., 
73	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
74	
	 Cast_type -> Atomas.id, 
75	
	 Cast_type -> Atomasid., 
76	
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
77	
	 Member -> Atom.Call_func., 
78	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
79	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
80	
	 Destr_assig -> Atom.id:=Expr., 
81	
	 Expr -> For_loop., 
82	
	 Expr -> Let_expr., 
83	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
84	
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
85	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
86	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .string, 
	 Concat -> Concat@@.Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
87	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
88	
	 Vector -> Vector_exp., 
89	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
90	
	 Pow -> Sign^.Pow, 
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
91	
	 Vector -> Vector_imp., 
92	
	 Atom -> string., 
93	
	 Atom -> Vector., 
94	
	 Atom -> Type_inst., 
95	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
96	
	 Type_inst -> newCall_func., 
97	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
98	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> id(.Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Call_func -> id(.), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Arithmetic, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
99	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
100	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Arguments -> Expr,.Arguments, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
101	
	 Conditional -> if.(Expr)ExprCond_other_case, 
102	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
103	
	 Conditional -> if(Expr.)ExprCond_other_case, 
104	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
105	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
106	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
107	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
108	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
109	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
110	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
111	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
112	
	 Cond_other_case -> else.Expr, 
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
113	
	 Cond_other_case -> elseExpr., 
114	
	 Expr -> Destr_assig., 
115	
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
116	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Term -> Term/.Pow, 
117	
	 Term -> Term/Pow., 
118	
	 Sign -> Factor., 
119	
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_list, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_item_list -> .Expr;, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Expr_block -> {.Expr_list}, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
120	
	 Expr_item_list -> Expr.;, 
121	
	 Expr_item_list -> Expr;., 
122	
	 Expr_block -> {Expr_list.}, 
123	
	 Expr_block -> {Expr_list}., 
124	
	 Pow -> .Sign, 
	 Expr_list -> .Expr_item_list, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_item_list -> .Expr;, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Expr_list -> Expr_item_list., 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
125	
	 Expr_list -> Expr_item_listExpr_list., 
126	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
127	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
128	
	 Term -> Pow., 
129	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
130	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
131	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
132	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
133	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
134	
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Type_inst, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Factor -> !.Atom, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
135	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
136	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
137	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
138	
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
139	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
140	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
141	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
142	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
143	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
144	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
145	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
146	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
147	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
148	
	 Expr -> Conditional., 
149	
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
150	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Destr_assig -> id:=.Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
151	
	 Destr_assig -> id:=Expr., 
152	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
153	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Check_type -> .Aritm_comp, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Or_expr -> Or_expr|.And_expr, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
154	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
155	
	 While_loop -> while.(Expr)Expr, 
156	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
157	
	 While_loop -> while(Expr.)Expr, 
158	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 While_loop -> while(Expr).Expr, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
159	
	 While_loop -> while(Expr)Expr., 
160	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Term -> Term*.Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
161	
	 Term -> Term*Pow., 
162	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Term -> Term%.Pow, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
163	
	 Term -> Term%Pow., 
164	
	 Conditional -> if(Expr)ExprCond_other_case., 
165	
	 Arguments -> Expr,Arguments., 
166	
	 Call_func -> id()., 
167	
	 Call_func -> id(Arguments.), 
168	
	 Call_func -> id(Arguments)., 
169	
	 Pow -> Sign^Pow., 
170	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector -> .Vector_exp, 
	 Sign -> .-Factor, 
	 Vector_exp -> .[], 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 Pow -> Sign**.Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
171	
	 Pow -> Sign**Pow., 
172	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
173	
	 For_loop -> for(idinExpr.)Expr, 
174	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 For_loop -> for(idinExpr).Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Term*Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
175	
	 For_loop -> for(idinExpr)Expr., 
176	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
177	
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
178	
	 Assignment -> id=Expr,Assignment., 
179	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
180	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
181	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Assignment -> id:id=.Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
182	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
183	
	 Assignment -> .id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
184	
	 Assignment -> id:id=Expr,Assignment., 
185	
	 Let_expr -> letAssignment.inExpr, 
186	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Let_expr -> letAssignmentin.Expr, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
187	
	 Let_expr -> letAssignmentinExpr., 
188	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
189	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Vector_item_list -> .Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
190	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
191	
	 Vector_item_list -> Expr,Vector_item_list., 
192	
	 Vector_imp -> [Expr||.idinExpr], 
193	
	 Vector_imp -> [Expr||id.inExpr], 
194	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
195	
	 Vector_imp -> [Expr||idinExpr.], 
196	
	 Vector_imp -> [Expr||idinExpr]., 
197	
	 Vector_exp -> [Vector_item_list.], 
198	
	 Vector_exp -> [Vector_item_list]., 
199	
	 Vector_exp -> []., 
200	
	 Sign -> +Factor., 
201	
	 Index_object -> Atom[Expr.], 
202	
	 Index_object -> Atom[Expr]., 
203	
	 Sign -> -Factor., 
204	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
205	
	 Inline_form -> Method_signature=>Expr.;, 
206	
	 Inline_form -> Method_signature=>Expr;., 
207	
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
208	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 Type_member_item -> id=.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
209	
	 Type_member_item -> id=Expr.;, 
210	
	 Type_member_item -> id=Expr;., 
211	
	 Type_member_item -> id:.id=Expr;, 
212	
	 Type_member_item -> id:id.=Expr;, 
213	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Type_member_item -> id:id=.Expr;, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
214	
	 Type_member_item -> id:id=Expr.;, 
215	
	 Type_member_item -> id:id=Expr;., 
216	
	 Type_member_item -> Full_form., 
217	
	 Type_member_item -> Inline_form., 
218	
	 Type_block -> {Type_member_list.}, 
219	
	 Type_block -> {Type_member_list}., 
220	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
221	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
222	
	 Type -> typeType_decinheritsidType_block., 
223	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr -> .For_loop, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .id, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Arguments -> .Expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
224	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
225	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
226	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
227	
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
228	
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
	 Func -> function.Inline_form, 
229	
	 Func -> functionFull_form., 
230	
	 Func -> functionInline_form., 
231	
	 Type_function_list -> ProtocolType_function_list., 
232	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> Func.Type_function_list, 
233	
	 Type_function_list -> FuncType_function_list., 
234	
	 Type_function_list -> ., 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
235	
	 Type_function_list -> TypeType_function_list., 
236	
	 Pow -> .Sign, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .Factor, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 And_expr -> .And_expr&Check_type, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term/Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_item_list -> .Expr;, 
	 Expr -> .For_loop, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Term -> .Term*Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Sign -> .-Factor, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_exp -> .[Vector_item_list], 
	 Pow -> .Sign**Pow, 
	 Factor -> .!Atom, 
	 Atom -> .Vector, 
	 Atom -> .Call_func, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Concat -> .Concat@@Arithmetic, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr -> .While_loop, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_imp, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Expr -> .Conditional, 
	 Atom -> .string, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Cast_type -> .Atomasid, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .(E), 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
5	
	 T -> TF., 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 E -> E.|T, 
	 A -> (E.), 
13	
	 A -> (E)., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
1	
	 T -> F., 
2	
	 A -> .ε, 
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> T.F, 
	 F -> .A, 
	 E -> T., 
3	
	 T -> TF., 
4	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> .E|T, 
	 F -> .A, 
	 E -> .T, 
	 A -> (.E), 
5	
	 E -> E.|T, 
	 A -> (E.), 
6	
	 A -> .ε, 
	 A -> .symbol, 
	 T -> .TF, 
	 T -> .F, 
	 A -> .(E), 
	 F -> .A*, 
	 E -> E|.T, 
	 F -> .A, 
7	
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|T., 
	 F -> .A*, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A, 
8	
	 A -> ε., 
9	
	 A -> symbol., 
10	
	 F -> A.*, 
	 F -> A., 
11	
	 F -> A*., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 S' -> .Program, 
	 Program -> .Type_function_listExpr_item_list, 
1	
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Func -> function.Inline_form, 
	 Full_form -> .Method_signatureExpr_block;, 
2	
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
3	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
4	
	 Expr -> Let_expr., 
5	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
6	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
7	
	 Atom -> bool., 
8	
	 Atom -> Call_func., 
9	
	 Atom -> Index_object., 
10	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Vector_exp -> [.Vector_item_list], 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector_exp -> [.], 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Vector_imp -> [.Expr||idinExpr], 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
11	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
12	
	 Let_expr -> letAssignment.inExpr, 
13	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Let_expr -> letAssignmentin.Expr, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
14	
	 Expr -> Destr_assig., 
15	
	 While_loop -> while.(Expr)Expr, 
16	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 While_loop -> while(.Expr)Expr, 
17	
	 For_loop -> for.(idinExpr)Expr, 
18	
	 For_loop -> for(.idinExpr)Expr, 
19	
	 For_loop -> for(id.inExpr)Expr, 
20	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 For_loop -> for(idin.Expr)Expr, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
21	
	 Vector -> Vector_exp., 
22	
	 Sign -> Factor., 
23	
	 Atom -> num., 
24	
	 Expr -> Conditional., 
25	
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
26	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
27	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Call_func -> id(.Arguments), 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Call_func -> id(.), 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
28	
	 Call_func -> id()., 
29	
	 Atom -> Vector., 
30	
	 Atom -> Expr_block., 
31	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
32	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
33	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
34	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
35	
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
36	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Term -> Term*.Pow, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
37	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> +.Factor, 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
38	
	 Sign -> +Factor., 
39	
	 Atom -> Type_inst., 
40	
	 Atom -> Cast_type., 
41	
	 Vector -> Vector_imp., 
42	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
43	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
	 Vector_exp -> .[], 
	 Factor -> !.Atom, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
44	
	 Atom -> Member., 
45	
	 Atom -> string., 
46	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Atom -> (.Expr), 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
47	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
48	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
49	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
50	
	 Term -> Term%.Pow, 
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
51	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Vector, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Sign -> -.Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
52	
	 Sign -> -Factor., 
53	
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
54	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Index_object -> Atom[.Expr], 
55	
	 Conditional -> if.(Expr)ExprCond_other_case, 
56	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
57	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
58	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Destr_assig -> id:=.Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
59	
	 Factor -> Atom., 
	 Cast_type -> Atom.asid, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
60	
	 Cast_type -> Atomas.id, 
61	
	 Cast_type -> Atomasid., 
62	
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
63	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
64	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
65	
	 Expr -> While_loop., 
66	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Expr_block -> {.Expr_list}, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Index_object, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_list, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
67	
	 Expr_block -> {Expr_list.}, 
68	
	 Expr_block -> {Expr_list}., 
69	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
70	
	 Atom -> .Cast_type, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
71	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
72	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> Arithmetic+.Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
73	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
74	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Term -> Term/.Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
75	
	 Term -> Term/Pow., 
76	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
77	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Pow -> Sign**.Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
78	
	 Pow -> Sign**Pow., 
79	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Pow -> Sign^.Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Atom -> .(Expr), 
80	
	 Pow -> Sign^Pow., 
81	
	 Term -> Pow., 
82	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
83	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
84	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
85	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 And_expr -> And_expr&.Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
86	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
87	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
88	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 And_expr -> .Check_type, 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> .[], 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
89	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
90	
	 Expr -> For_loop., 
91	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Expr_list -> Expr_item_list., 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Index_object, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_list, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
92	
	 Expr_list -> Expr_item_listExpr_list., 
93	
	 Expr_item_list -> Expr.;, 
94	
	 Expr_item_list -> Expr;., 
95	
	 Destr_assig -> Atom.id:=Expr., 
96	
	 Member -> Atom.Call_func., 
97	
	 Destr_assig -> id:=Expr., 
98	
	 Conditional -> if(Expr.)ExprCond_other_case, 
99	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
100	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
101	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Cond_other_case -> else.Expr, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
102	
	 Cond_other_case -> elseExpr., 
103	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
104	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
105	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
106	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
107	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
108	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
109	
	 Conditional -> if(Expr)ExprCond_other_case., 
110	
	 Index_object -> Atom[Expr.], 
111	
	 Index_object -> Atom[Expr]., 
112	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
113	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
114	
	 Term -> Term%Pow., 
115	
	 Atom -> (Expr.), 
116	
	 Atom -> (Expr)., 
117	
	 Cast_type -> Atom.asid, 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
118	
	 Term -> Term*Pow., 
119	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
120	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
121	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
122	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
123	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
124	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
125	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
126	
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Atom -> .bool, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Atom -> .Vector, 
	 Sign -> .+Factor, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Vector_exp -> .[], 
	 Pow -> .Sign^Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .!Atom, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Factor -> .Atom, 
	 Index_object -> .Atom[Expr], 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Atom -> .Call_func, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
127	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
128	
	 Call_func -> id(Arguments.), 
129	
	 Call_func -> id(Arguments)., 
130	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
131	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Arguments -> Expr,.Arguments, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
132	
	 Arguments -> Expr,Arguments., 
133	
	 Type_inst -> newCall_func., 
134	
	 For_loop -> for(idinExpr.)Expr, 
135	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> for(idinExpr).Expr, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
136	
	 For_loop -> for(idinExpr)Expr., 
137	
	 While_loop -> while(Expr.)Expr, 
138	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 While_loop -> while(Expr).Expr, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
139	
	 While_loop -> while(Expr)Expr., 
140	
	 Let_expr -> letAssignmentinExpr., 
141	
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
142	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Assignment -> id=.Expr,Assignment, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Assignment -> id=.Expr, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
143	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
144	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
145	
	 Assignment -> id=Expr,Assignment., 
146	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
147	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
148	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id:id=.Expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
149	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
150	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
151	
	 Assignment -> id:id=Expr,Assignment., 
152	
	 Vector_exp -> []., 
153	
	 Vector_exp -> [Vector_item_list.], 
154	
	 Vector_exp -> [Vector_item_list]., 
155	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
156	
	 Vector_imp -> [Expr||.idinExpr], 
157	
	 Vector_imp -> [Expr||id.inExpr], 
158	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
159	
	 Vector_imp -> [Expr||idinExpr.], 
160	
	 Vector_imp -> [Expr||idinExpr]., 
161	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
162	
	 Vector_item_list -> Expr,Vector_item_list., 
163	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
164	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
165	
	 Inline_form -> Method_signature=>Expr.;, 
166	
	 Inline_form -> Method_signature=>Expr;., 
167	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
168	
	 Full_form -> Method_signatureExpr_block;., 
169	
	 Func -> functionInline_form., 
170	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
171	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
172	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
173	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
174	
	 Method_signature -> id(Params):.id, 
175	
	 Method_signature -> id(Params):id., 
176	
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
	 Params -> id., 
177	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id, 
178	
	 Params -> id,Params., 
179	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
180	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
181	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
182	
	 Params -> id:id,Params., 
183	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
184	
	 Method_signature -> id():.id, 
185	
	 Method_signature -> id():id., 
186	
	 Func -> functionFull_form., 
187	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Func -> .functionInline_form, 
188	
	 Type_function_list -> FuncType_function_list., 
189	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
190	
	 Type_function_list -> TypeType_function_list., 
191	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
192	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
193	
	 Protocol -> protocolidProtocol_block., 
194	
	 Protocol -> protocolidextends.idProtocol_block, 
195	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
196	
	 Protocol -> protocolidextendsidProtocol_block., 
197	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
	 Protocol_block -> {.Method_dec_list}, 
198	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
199	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
200	
	 Method_dec_list -> Method_signature;Method_dec_list., 
201	
	 Protocol_block -> {Method_dec_list.}, 
202	
	 Protocol_block -> {Method_dec_list}., 
203	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Func -> .functionInline_form, 
204	
	 Type_function_list -> ProtocolType_function_list., 
205	
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
206	
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type_block -> .{Type_member_list}, 
207	
	 Type -> typeType_decType_block., 
208	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
209	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
210	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Arguments -> .Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .Index_object, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
211	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
212	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
213	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
214	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
215	
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
216	
	 Type_member_list -> Type_member_itemType_member_list., 
217	
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
218	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Type_member_item -> id=.Expr;, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
219	
	 Type_member_item -> id=Expr.;, 
220	
	 Type_member_item -> id=Expr;., 
221	
	 Type_member_item -> id:.id=Expr;, 
222	
	 Type_member_item -> id:id.=Expr;, 
223	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Term -> .Term%Pow, 
	 Concat -> .Arithmetic, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Type_member_item -> id:id=.Expr;, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
224	
	 Type_member_item -> id:id=Expr.;, 
225	
	 Type_member_item -> id:id=Expr;., 
226	
	 Type_member_item -> Full_form., 
227	
	 Type_member_item -> Inline_form., 
228	
	 Type_block -> {Type_member_list.}, 
229	
	 Type_block -> {Type_member_list}., 
230	
	 Type -> typeType_decinheritsidType_block., 
231	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
232	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
233	
	 Type_dec -> id(Params.), 
234	
	 Type_dec -> id(Params)., 
235	
	 Atom -> .Cast_type, 
	 Atom -> .bool, 
	 Expr -> .Let_expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Vector, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Sign -> .+Factor, 
	 Expr -> .For_loop, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Expr -> .Conditional, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Or_expr -> .And_expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Cast_type -> .Atomasid, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Call_func -> .id(Arguments), 
	 For_loop -> .for(idinExpr)Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .Index_object, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector -> .Vector_exp, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_block -> .{Expr_list}, 
	 Factor -> .!Atom, 
	 Expr_item_list -> .Expr;, 
	 Atom -> .id, 
	 Call_func -> .id(), 
	 Concat -> .Arithmetic, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Factor -> .Atom, 
	 Expr -> .Destr_assig, 
	 Expr -> .While_loop, 
	 Index_object -> .Atom[Expr], 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign, 
	 Member -> .Atom.id, 
	 Atom -> .num, 
	 Program -> Type_function_list.Expr_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Call_func, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp==Concat, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
1	
	 E -> T., 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> T.F, 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 T -> TF., 
5	
	 A -> ε., 
6	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 A -> (.E), 
7	
	 T -> F., 
8	
	 A -> (E.), 
	 E -> E.|T, 
9	
	 A -> (E)., 
10	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|.T, 
	 T -> .TF, 
11	
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
	 T -> T.F, 
12	
	 A -> symbol., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 S' -> .Program, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
1	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_item_list -> .Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Program -> Type_function_list.Expr_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
2	
	 Atom -> string., 
3	
	 For_loop -> for.(idinExpr)Expr, 
4	
	 For_loop -> for(.idinExpr)Expr, 
5	
	 For_loop -> for(id.inExpr)Expr, 
6	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 For_loop -> for(idin.Expr)Expr, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
7	
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
8	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Arithmetic -> Arithmetic-.Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
9	
	 Vector -> Vector_imp., 
10	
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> +.Factor, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
11	
	 Atom -> Call_func., 
12	
	 Atom -> Cast_type., 
13	
	 Atom -> num., 
14	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Expr_block -> {.Expr_list}, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_item_list -> .Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_list -> .Expr_item_list, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
15	
	 Atom -> Type_inst., 
16	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Expr_list -> Expr_item_list., 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_item_list -> .Expr;, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Expr_list -> .Expr_item_list, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
17	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
18	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Pow -> Sign**.Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
19	
	 Pow -> Sign**Pow., 
20	
	 Vector -> Vector_exp., 
21	
	 Atom -> Index_object., 
22	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
23	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
24	
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> id(.Arguments), 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Call_func -> id(.), 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
25	
	 Call_func -> id()., 
26	
	 Term -> Pow., 
27	
	 Expr -> For_loop., 
28	
	 Expr -> Conditional., 
29	
	 Expr -> Destr_assig., 
30	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
31	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
32	
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> -.Factor, 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
33	
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
	 Call_func -> id.(), 
34	
	 Vector_exp -> [.Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Vector_imp -> [.Expr||idinExpr], 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Vector_exp -> [.], 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
35	
	 Vector_exp -> [Vector_item_list.], 
36	
	 Vector_exp -> [Vector_item_list]., 
37	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
38	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Or_expr -> Or_expr|.And_expr, 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
39	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@@Arithmetic, 
40	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> Concat@.Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
41	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
42	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .Member, 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
43	
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.%Pow, 
44	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> Term%.Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
45	
	 Term -> Term%Pow., 
46	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Atom -> (.Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
47	
	 Atom -> (Expr.), 
48	
	 Atom -> (Expr)., 
49	
	 Conditional -> if.(Expr)ExprCond_other_case, 
50	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
51	
	 Conditional -> if(Expr.)ExprCond_other_case, 
52	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Factor -> .!Atom, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
53	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
54	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cond_other_case -> else.Expr, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
55	
	 Cond_other_case -> elseExpr., 
56	
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Arithmetic -> Term., 
57	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Term -> Term/.Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
58	
	 Term -> Term/Pow., 
59	
	 Atom -> Vector., 
60	
	 Sign -> Factor., 
61	
	 Atom -> Member., 
62	
	 Atom -> Expr_block., 
63	
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
64	
	 Cast_type -> Atomas.id, 
65	
	 Cast_type -> Atomasid., 
66	
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
67	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
68	
	 Member -> Atom.Call_func., 
69	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Index_object -> Atom[.Expr], 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
70	
	 Index_object -> Atom[Expr.], 
71	
	 Index_object -> Atom[Expr]., 
72	
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(), 
73	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Destr_assig -> id:=.Expr, 
	 Destr_assig -> .id:=Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Factor -> .!Atom, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
74	
	 Destr_assig -> id:=Expr., 
75	
	 While_loop -> while.(Expr)Expr, 
76	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 While_loop -> while(.Expr)Expr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
77	
	 While_loop -> while(Expr.)Expr, 
78	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 While_loop -> while(Expr).Expr, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
79	
	 While_loop -> while(Expr)Expr., 
80	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
81	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 And_expr -> And_expr&.Check_type, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
82	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
83	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
84	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
85	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
86	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Concat -> Concat@@.Arithmetic, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
87	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
88	
	 Atom -> bool., 
89	
	 Atom -> .Vector, 
	 Factor -> !.Atom, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(), 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
90	
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
91	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
92	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
93	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
94	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
95	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
96	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
97	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
98	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
99	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
100	
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
101	
	 Expr -> Let_expr., 
102	
	 Expr -> While_loop., 
103	
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
104	
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
105	
	 Call_func -> id.(Arguments), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
106	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
107	
	 Destr_assig -> Atom.id:=Expr., 
108	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
109	
	 Let_expr -> letAssignment.inExpr, 
110	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Let_expr -> letAssignmentin.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
111	
	 Let_expr -> letAssignmentinExpr., 
112	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
113	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 Assignment -> id=.Expr,Assignment, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Assignment -> id=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
114	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
115	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
116	
	 Assignment -> id=Expr,Assignment., 
117	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
118	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
119	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Concat -> .Arithmetic, 
	 Factor -> .!Atom, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Assignment -> id:id=.Expr, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
120	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
121	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
122	
	 Assignment -> id:id=Expr,Assignment., 
123	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> Term*.Pow, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
124	
	 Term -> Term*Pow., 
125	
	 Conditional -> if(Expr)ExprCond_other_case., 
126	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
127	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
128	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
129	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
130	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
131	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
132	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
133	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
134	
	 Vector_imp -> [Expr||.idinExpr], 
135	
	 Vector_imp -> [Expr||id.inExpr], 
136	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
137	
	 Vector_imp -> [Expr||idinExpr.], 
138	
	 Vector_imp -> [Expr||idinExpr]., 
139	
	 Vector_item_list -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
140	
	 Vector_item_list -> Expr,Vector_item_list., 
141	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
142	
	 Vector_exp -> []., 
143	
	 Sign -> -Factor., 
144	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
145	
	 Call_func -> id(Arguments.), 
146	
	 Call_func -> id(Arguments)., 
147	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
148	
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Arguments -> Expr,.Arguments, 
	 Vector_exp -> .[Vector_item_list], 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Sign -> .+Factor, 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
149	
	 Arguments -> Expr,Arguments., 
150	
	 Type_inst -> newCall_func., 
151	
	 Atom -> .Vector, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Atom -> .Call_func, 
	 Atom -> .id, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Call_func -> .id(), 
	 Sign -> .-Factor, 
	 Expr_block -> .{Expr_list}, 
	 Type_inst -> .newCall_func, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Atom -> .Index_object, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Factor -> .!Atom, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign**Pow, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Pow -> Sign^.Pow, 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
152	
	 Pow -> Sign^Pow., 
153	
	 Expr_item_list -> Expr.;, 
154	
	 Expr_item_list -> Expr;., 
155	
	 Expr_list -> Expr_item_listExpr_list., 
156	
	 Expr_block -> {Expr_list.}, 
157	
	 Expr_block -> {Expr_list}., 
158	
	 Sign -> +Factor., 
159	
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
160	
	 For_loop -> for(idinExpr.)Expr, 
161	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 For_loop -> for(idinExpr).Expr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
162	
	 For_loop -> for(idinExpr)Expr., 
163	
	 Program -> Type_function_listExpr_item_list., 
164	
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
165	
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
166	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
167	
	 Full_form -> Method_signatureExpr_block;., 
168	
	 Atom -> .Cast_type, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Inline_form -> Method_signature=>.Expr;, 
169	
	 Inline_form -> Method_signature=>Expr.;, 
170	
	 Inline_form -> Method_signature=>Expr;., 
171	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
172	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params):id, 
	 Params -> .id, 
	 Params -> .id:id, 
173	
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
	 Params -> id., 
174	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id:id, 
175	
	 Params -> id,Params., 
176	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
177	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
178	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id, 
179	
	 Params -> id:id,Params., 
180	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
181	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
182	
	 Method_signature -> id(Params):.id, 
183	
	 Method_signature -> id(Params):id., 
184	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
185	
	 Method_signature -> id():.id, 
186	
	 Method_signature -> id():id., 
187	
	 Func -> functionFull_form., 
188	
	 Func -> functionInline_form., 
189	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
190	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
191	
	 Method_signature -> .id(Params), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
192	
	 Protocol_block -> {Method_dec_list.}, 
193	
	 Protocol_block -> {Method_dec_list}., 
194	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
195	
	 Method_signature -> .id(Params), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id():id, 
196	
	 Method_dec_list -> Method_signature;Method_dec_list., 
197	
	 Protocol -> protocolidProtocol_block., 
198	
	 Protocol -> protocolidextends.idProtocol_block, 
199	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
200	
	 Protocol -> protocolidextendsidProtocol_block., 
201	
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
202	
	 Type_function_list -> ProtocolType_function_list., 
203	
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
204	
	 Type_function_list -> FuncType_function_list., 
205	
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
206	
	 Type_function_list -> TypeType_function_list., 
207	
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
208	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
209	
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id, 
210	
	 Type_dec -> id(Params.), 
211	
	 Type_dec -> id(Params)., 
212	
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsidType_block, 
213	
	 Type -> typeType_decType_block., 
214	
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
215	
	 Type_member_item -> Full_form., 
216	
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
217	
	 Type_member_item -> Inline_form., 
218	
	 Type_member_list -> Type_member_itemType_member_list., 
219	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
220	
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Type_member_item -> id=.Expr;, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
221	
	 Type_member_item -> id=Expr.;, 
222	
	 Type_member_item -> id=Expr;., 
223	
	 Type_member_item -> id:.id=Expr;, 
224	
	 Type_member_item -> id:id.=Expr;, 
225	
	 Type_member_item -> id:id=.Expr;, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Check_type -> .Aritm_comp, 
	 Atom -> .string, 
	 Member -> .Atom.Call_func, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
226	
	 Type_member_item -> id:id=Expr.;, 
227	
	 Type_member_item -> id:id=Expr;., 
228	
	 Type_block -> {Type_member_list.}, 
229	
	 Type_block -> {Type_member_list}., 
230	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
231	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
232	
	 Type -> typeType_decinheritsidType_block., 
233	
	 Arguments -> .Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Vector, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .Factor, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Or_expr -> .And_expr, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Call_func -> .id(Arguments), 
	 Arithmetic -> .Term, 
	 Vector -> .Vector_imp, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 And_expr -> .Check_type, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term*Pow, 
	 Atom -> .Member, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Expr_block -> .{Expr_list}, 
	 Arithmetic -> .Arithmetic-Term, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Term/Pow, 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .string, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Expr -> .Conditional, 
	 Atom -> .Type_inst, 
	 Or_expr -> .Or_expr|And_expr, 
	 Destr_assig -> .id:=Expr, 
	 Vector -> .Vector_exp, 
	 Atom -> .(Expr), 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Factor -> .!Atom, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Pow -> .Sign**Pow, 
	 Expr -> .While_loop, 
	 Pow -> .Sign^Pow, 
	 Index_object -> .Atom[Expr], 
	 Factor -> .Atom, 
	 Atom -> .num, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .Cast_type, 
234	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
235	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
236	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
237	
	 S' -> Program., 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
1	
	 A -> symbol., 
2	
	 T -> F., 
3	
	 F -> A., 
	 F -> A.*, 
4	
	 F -> A*., 
5	
	 A -> (.E), 
	 E -> .T, 
	 F -> .A, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 F -> .A, 
	 A -> .symbol, 
	 E -> E|.T, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 T -> .TF, 
	 A -> .ε, 
8	
	 A -> ε., 
9	
	 E -> E|T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 E -> T., 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 S' -> .Program, 
1	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> Protocol.Type_function_list, 
2	
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Func -> function.Full_form, 
3	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
4	
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
5	
	 Params -> id.,Params, 
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
6	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
7	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
8	
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
9	
	 Params -> id:id,Params., 
10	
	 Params -> .id,Params, 
	 Params -> id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
11	
	 Params -> id,Params., 
12	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
13	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
14	
	 Method_signature -> id(Params):.id, 
15	
	 Method_signature -> id(Params):id., 
16	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
17	
	 Method_signature -> id():.id, 
18	
	 Method_signature -> id():id., 
19	
	 Func -> functionFull_form., 
20	
	 Func -> functionInline_form., 
21	
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
22	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Expr_block -> {.Expr_list}, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_list, 
	 Or_expr -> .And_expr, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
23	
	 While_loop -> while.(Expr)Expr, 
24	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
25	
	 Term -> Pow., 
26	
	 Atom -> Expr_block., 
27	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
28	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
29	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
30	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> id(.), 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Call_func -> id(.Arguments), 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
31	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
32	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Destr_assig -> id:=.Expr, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
33	
	 Vector -> Vector_imp., 
34	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
35	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
36	
	 Type_inst -> newCall_func., 
37	
	 Atom -> Call_func., 
38	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
39	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> Or_expr|.And_expr, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 And_expr -> .And_expr&Check_type, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
40	
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
41	
	 Cast_type -> Atomas.id, 
42	
	 Cast_type -> Atomasid., 
43	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
44	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
45	
	 Member -> Atom.Call_func., 
46	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Index_object -> Atom[.Expr], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
47	
	 Expr -> Conditional., 
48	
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
49	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
50	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
51	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
52	
	 Sign -> Factor., 
53	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
54	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> Sign**.Pow, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
55	
	 Pow -> Sign**Pow., 
56	
	 Atom -> string., 
57	
	 Atom -> num., 
58	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Atom -> (.Expr), 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
59	
	 Expr -> For_loop., 
60	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
61	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
62	
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
63	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Term -> Term%.Pow, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
64	
	 Term -> Term%Pow., 
65	
	 Atom -> Cast_type., 
66	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Sign -> +.Factor, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
67	
	 Sign -> +Factor., 
68	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Vector_item_list -> .Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_exp -> [.], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Vector_exp -> [.Vector_item_list], 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
69	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
70	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Arithmetic -> .Term, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 And_expr -> And_expr&.Check_type, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
71	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
72	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
73	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> Arithmetic+.Term, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
74	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
75	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Term -> Term*.Pow, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
76	
	 Term -> Term*Pow., 
77	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Sign -> -.Factor, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
78	
	 Sign -> -Factor., 
79	
	 Vector -> Vector_exp., 
80	
	 Atom -> Index_object., 
81	
	 Atom -> Member., 
82	
	 Atom -> Type_inst., 
83	
	 Atom -> Vector., 
84	
	 Atom -> bool., 
85	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> !.Atom, 
	 Atom -> .Type_inst, 
	 Member -> .Atom.Call_func, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
86	
	 Member -> Atom..Call_func, 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
87	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Term -> Term/.Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
88	
	 Term -> Term/Pow., 
89	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Arithmetic -> Arithmetic-.Term, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
90	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
91	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
92	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Concat -> Concat@@.Arithmetic, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
93	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
94	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> Concat@.Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
95	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
96	
	 Expr -> Let_expr., 
97	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
98	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
99	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
100	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
101	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
102	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
103	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
104	
	 Assignment -> id:id=Expr,Assignment., 
105	
	 For_loop -> for.(idinExpr)Expr, 
106	
	 For_loop -> for(.idinExpr)Expr, 
107	
	 For_loop -> for(id.inExpr)Expr, 
108	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 For_loop -> for(idin.Expr)Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
109	
	 For_loop -> for(idinExpr.)Expr, 
110	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 For_loop -> for(idinExpr).Expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
111	
	 For_loop -> for(idinExpr)Expr., 
112	
	 Expr -> While_loop., 
113	
	 Expr -> Destr_assig., 
114	
	 Conditional -> if.(Expr)ExprCond_other_case, 
115	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Or_expr -> .And_expr, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
116	
	 Conditional -> if(Expr.)ExprCond_other_case, 
117	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
118	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
119	
	 Conditional -> if(Expr)ExprCond_other_case., 
120	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Cond_other_case -> else.Expr, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
121	
	 Cond_other_case -> elseExpr., 
122	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
123	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
124	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
125	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
126	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
127	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
128	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Assignment -> id=.Expr, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Assignment -> id=.Expr,Assignment, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
129	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
130	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
131	
	 Assignment -> id=Expr,Assignment., 
132	
	 Let_expr -> letAssignment.inExpr, 
133	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Let_expr -> letAssignmentin.Expr, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
134	
	 Let_expr -> letAssignmentinExpr., 
135	
	 Vector_exp -> []., 
136	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
137	
	 Vector_imp -> [Expr||.idinExpr], 
138	
	 Vector_imp -> [Expr||id.inExpr], 
139	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 And_expr -> .Check_type, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
140	
	 Vector_imp -> [Expr||idinExpr.], 
141	
	 Vector_imp -> [Expr||idinExpr]., 
142	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Vector_item_list -> .Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
143	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
144	
	 Vector_item_list -> Expr,Vector_item_list., 
145	
	 Vector_exp -> [Vector_item_list.], 
146	
	 Vector_exp -> [Vector_item_list]., 
147	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
148	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
149	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
150	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
151	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
152	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
153	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
154	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
155	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
156	
	 Arithmetic -> .Term, 
	 Atom -> .Member, 
	 Concat -> .Arithmetic, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
157	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
158	
	 Atom -> (Expr.), 
159	
	 Atom -> (Expr)., 
160	
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Pow -> Sign^.Pow, 
	 Call_func -> .id(), 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Member -> .Atom.Call_func, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Atom -> .(Expr), 
	 Pow -> .Sign^Pow, 
161	
	 Pow -> Sign^Pow., 
162	
	 Destr_assig -> Atom.id:=Expr., 
163	
	 Index_object -> Atom[Expr.], 
164	
	 Index_object -> Atom[Expr]., 
165	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
166	
	 Destr_assig -> id:=Expr., 
167	
	 Call_func -> id()., 
168	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
169	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .Type_inst, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Sign -> .-Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
170	
	 Arguments -> Expr,Arguments., 
171	
	 Call_func -> id(Arguments.), 
172	
	 Call_func -> id(Arguments)., 
173	
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
174	
	 While_loop -> while(Expr.)Expr, 
175	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
176	
	 While_loop -> while(Expr)Expr., 
177	
	 Expr_block -> {Expr_list.}, 
178	
	 Expr_block -> {Expr_list}., 
179	
	 Expr_item_list -> Expr.;, 
180	
	 Expr_item_list -> Expr;., 
181	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_list, 
	 Or_expr -> .And_expr, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Expr_list -> Expr_item_list., 
	 Vector_exp -> .[Vector_item_list], 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
182	
	 Expr_list -> Expr_item_listExpr_list., 
183	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
184	
	 Inline_form -> Method_signature=>Expr.;, 
185	
	 Inline_form -> Method_signature=>Expr;., 
186	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
187	
	 Full_form -> Method_signatureExpr_block;., 
188	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
189	
	 Type_dec -> .id(Params), 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decType_block, 
190	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
191	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
192	
	 Type_dec -> id(Params.), 
193	
	 Type_dec -> id(Params)., 
194	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
195	
	 Type_member_list -> ., 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Inline_form, 
	 Type_block -> {.Type_member_list}, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
196	
	 Type_block -> {Type_member_list.}, 
197	
	 Type_block -> {Type_member_list}., 
198	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
	 Type_member_item -> id.=Expr;, 
199	
	 Type_member_item -> id:.id=Expr;, 
200	
	 Type_member_item -> id:id.=Expr;, 
201	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Type_member_item -> id:id=.Expr;, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
202	
	 Type_member_item -> id:id=Expr.;, 
203	
	 Type_member_item -> id:id=Expr;., 
204	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Type_member_item -> id=.Expr;, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Term -> .Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
205	
	 Type_member_item -> id=Expr.;, 
206	
	 Type_member_item -> id=Expr;., 
207	
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .Full_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_member_item -> .Inline_form, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
208	
	 Type_member_list -> Type_member_itemType_member_list., 
209	
	 Type_member_item -> Full_form., 
210	
	 Type_member_item -> Inline_form., 
211	
	 Type -> typeType_decType_block., 
212	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
213	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
214	
	 Type -> typeType_decinheritsidType_block., 
215	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Term -> .Term*Pow, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Arguments -> .Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
216	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
217	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
218	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
219	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
220	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
221	
	 Protocol -> protocolidextends.idProtocol_block, 
222	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
223	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
224	
	 Protocol_block -> {Method_dec_list.}, 
225	
	 Protocol_block -> {Method_dec_list}., 
226	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
227	
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
228	
	 Method_dec_list -> Method_signature;Method_dec_list., 
229	
	 Protocol -> protocolidextendsidProtocol_block., 
230	
	 Protocol -> protocolidProtocol_block., 
231	
	 Type_function_list -> FuncType_function_list., 
232	
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
233	
	 Type_function_list -> TypeType_function_list., 
234	
	 Type_function_list -> ProtocolType_function_list., 
235	
	 S' -> Program., 
236	
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Destr_assig -> .id:=Expr, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Term, 
	 Member -> .Atom.id, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> .id(), 
	 Expr -> .Conditional, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Arithmetic -> .Arithmetic+Term, 
	 Concat -> .Concat@@Arithmetic, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign, 
	 Sign -> .-Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .num, 
	 Cast_type -> .Atomasid, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Or_expr -> .And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .(Expr), 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 And_expr -> .And_expr&Check_type, 
	 Vector_exp -> .[], 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Atom -> .id, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Or_expr, 
	 Term -> .Term/Pow, 
	 Atom -> .Vector, 
	 Index_object -> .Atom[Expr], 
	 Program -> Type_function_list.Expr_item_list, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign^Pow, 
	 Expr -> .For_loop, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 F -> .A, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 A -> .ε, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 T -> .F, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 E -> .E|T, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
1	
	 F -> A., 
	 F -> A.*, 
2	
	 F -> A*., 
3	
	 A -> .(E), 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 A -> .symbol, 
	 F -> .A*, 
	 A -> .ε, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
4	
	 A -> symbol., 
5	
	 A -> ε., 
6	
	 T -> F., 
7	
	 A -> (E.), 
	 E -> E.|T, 
8	
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A, 
9	
	 E -> E|T., 
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 F -> .A, 
10	
	 T -> TF., 
11	
	 A -> (E)., 
12	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 A -> .symbol, 
	 F -> .A*, 
	 E -> T., 
	 F -> .A, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .TF, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .symbol, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
1	
	 A -> symbol., 
2	
	 A -> .symbol, 
	 E -> .E|T, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .F, 
	 F -> .A*, 
	 F -> .A, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .TF, 
3	
	 T -> F., 
4	
	 A -> (E.), 
	 E -> E.|T, 
5	
	 A -> .symbol, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .F, 
	 F -> .A, 
	 A -> .ε, 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 A -> ε., 
7	
	 A -> .symbol, 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
	 E -> E|T., 
8	
	 T -> TF., 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 A -> (E)., 
12	
	 A -> .symbol, 
	 E -> T., 
	 A -> .(E), 
	 T -> T.F, 
	 F -> .A*, 
	 F -> .A, 
	 A -> .ε, 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 S' -> .Program, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Func -> .functionInline_form, 
1	
	 S' -> Program., 
2	
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
3	
	 Type -> typeType_dec.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
4	
	 Type -> typeType_decType_block., 
5	
	 Type_block -> {.Type_member_list}, 
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Full_form, 
6	
	 Type_block -> {Type_member_list.}, 
7	
	 Type_block -> {Type_member_list}., 
8	
	 Type_member_item -> Inline_form., 
9	
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_list -> ., 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Full_form, 
10	
	 Type_member_list -> Type_member_itemType_member_list., 
11	
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(Params):id, 
12	
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
13	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
14	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
15	
	 Method_signature -> id(Params):.id, 
16	
	 Method_signature -> id(Params):id., 
17	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
18	
	 Method_signature -> id():.id, 
19	
	 Method_signature -> id():id., 
20	
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id., 
21	
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> id,.Params, 
	 Params -> .id,Params, 
22	
	 Params -> id,Params., 
23	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
24	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
25	
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
26	
	 Params -> id:id,Params., 
27	
	 Type_member_item -> id:.id=Expr;, 
28	
	 Type_member_item -> id:id.=Expr;, 
29	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Type_member_item -> id:id=.Expr;, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
30	
	 Sign -> Factor., 
31	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
32	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
33	
	 Term -> Pow., 
34	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Expr_list -> .Expr_item_list, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> {.Expr_list}, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
35	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Expr_list -> Expr_item_list., 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Call_func -> .id(), 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Expr_list -> .Expr_item_list, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
36	
	 For_loop -> for.(idinExpr)Expr, 
37	
	 For_loop -> for(.idinExpr)Expr, 
38	
	 For_loop -> for(id.inExpr)Expr, 
39	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 For_loop -> for(idin.Expr)Expr, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
40	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
41	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> Concat@@.Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
42	
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
43	
	 Type_inst -> newCall_func., 
44	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
45	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Call_func -> id(.), 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Call_func -> id(.Arguments), 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
46	
	 Call_func -> id()., 
47	
	 Call_func -> id(Arguments.), 
48	
	 Call_func -> id(Arguments)., 
49	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
50	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Destr_assig -> id:=.Expr, 
	 Expr -> .Destr_assig, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
51	
	 Expr -> For_loop., 
52	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
53	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
54	
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
55	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Concat -> Concat@.Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
56	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
57	
	 Vector -> Vector_imp., 
58	
	 Vector -> Vector_exp., 
59	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Atom -> (.Expr), 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
60	
	 While_loop -> while.(Expr)Expr, 
61	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 While_loop -> while(.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
62	
	 Atom -> Type_inst., 
63	
	 Atom -> Member., 
64	
	 Atom -> bool., 
65	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Term, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Vector_exp -> [.], 
	 Pow -> .Sign, 
	 Vector_exp -> [.Vector_item_list], 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
66	
	 Vector_exp -> [Vector_item_list.], 
67	
	 Vector_exp -> [Vector_item_list]., 
68	
	 Vector_exp -> []., 
69	
	 Expr_block -> .{Expr_list}, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Sign -> +.Factor, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
70	
	 Sign -> +Factor., 
71	
	 Atom -> Index_object., 
72	
	 Atom -> Cast_type., 
73	
	 Atom -> Call_func., 
74	
	 Atom -> string., 
75	
	 Expr_block -> .{Expr_list}, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Factor -> !.Atom, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
76	
	 Atom -> Vector., 
77	
	 Atom -> Expr_block., 
78	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
79	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
80	
	 Member -> Atom.Call_func., 
81	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
82	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Index_object -> Atom[.Expr], 
	 Check_type -> .Aritm_comp, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
83	
	 Expr -> Let_expr., 
84	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
85	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
86	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
87	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
88	
	 Sign -> .Factor, 
	 Term -> Term/.Pow, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
89	
	 Term -> Term/Pow., 
90	
	 Expr_block -> .{Expr_list}, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Member -> .Atom.id, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Sign -> -.Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Vector -> .Vector_exp, 
91	
	 Sign -> -Factor., 
92	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
93	
	 Cast_type -> Atomas.id, 
94	
	 Cast_type -> Atomasid., 
95	
	 Atom -> num., 
96	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
97	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Pow -> Sign**.Pow, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
98	
	 Pow -> Sign**Pow., 
99	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Pow -> Sign^.Pow, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Call_func -> .id(), 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
100	
	 Pow -> Sign^Pow., 
101	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Term -> Term%.Pow, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
102	
	 Term -> Term%Pow., 
103	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Term -> Term*.Pow, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
104	
	 Term -> Term*Pow., 
105	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
106	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
107	
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
108	
	 Sign -> .Factor, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> Arithmetic+.Term, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Atom -> .id, 
	 Term -> .Term*Pow, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
109	
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
110	
	 Expr -> While_loop., 
111	
	 Expr -> Destr_assig., 
112	
	 Index_object -> Atom[Expr.], 
113	
	 Index_object -> Atom[Expr]., 
114	
	 Conditional -> if.(Expr)ExprCond_other_case, 
115	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .Index_object, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Term -> .Pow, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
116	
	 Conditional -> if(Expr.)ExprCond_other_case, 
117	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[], 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
118	
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
119	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
120	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
121	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
122	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
123	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
124	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
125	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Cond_other_case -> else.Expr, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
126	
	 Cond_other_case -> elseExpr., 
127	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
128	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Or_expr -> Or_expr|.And_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
129	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
130	
	 Cast_type -> Atom.asid, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
131	
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
132	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
133	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
134	
	 Destr_assig -> Atom.id:=Expr., 
135	
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
136	
	 Let_expr -> letAssignment.inExpr, 
137	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Cast_type, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Let_expr -> letAssignmentin.Expr, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
138	
	 Let_expr -> letAssignmentinExpr., 
139	
	 Expr -> Conditional., 
140	
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.:id=Expr, 
141	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
142	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
143	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Call_func -> .id(), 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
144	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
145	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
146	
	 Assignment -> id:id=Expr,Assignment., 
147	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Assignment -> id=.Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Pow -> .Sign^Pow, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
148	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
149	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
150	
	 Assignment -> id=Expr,Assignment., 
151	
	 Conditional -> if(Expr)ExprCond_other_case., 
152	
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
153	
	 Vector_imp -> [Expr||.idinExpr], 
154	
	 Vector_imp -> [Expr||id.inExpr], 
155	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
156	
	 Vector_imp -> [Expr||idinExpr.], 
157	
	 Vector_imp -> [Expr||idinExpr]., 
158	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_item_list -> .Expr, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Term, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Concat -> .Concat@@Arithmetic, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
159	
	 Vector_item_list -> Expr,Vector_item_list., 
160	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
161	
	 While_loop -> while(Expr.)Expr, 
162	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 While_loop -> while(Expr).Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
163	
	 While_loop -> while(Expr)Expr., 
164	
	 Atom -> (Expr.), 
165	
	 Atom -> (Expr)., 
166	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
167	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Factor -> .!Atom, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
168	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
169	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
170	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
171	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Vector -> .Vector_exp, 
172	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
173	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
174	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
175	
	 Sign -> .Factor, 
	 Concat -> .Arithmetic, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Atom -> .Vector, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@@Arithmetic, 
	 Factor -> .Atom, 
	 Member -> .Atom.Call_func, 
	 Index_object -> .Atom[Expr], 
	 Term -> .Pow, 
	 Atom -> .Index_object, 
	 Atom -> .num, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Term -> .Term/Pow, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
176	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
177	
	 Destr_assig -> id:=Expr., 
178	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
179	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Arguments -> Expr,.Arguments, 
	 Or_expr -> .And_expr, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
180	
	 Arguments -> Expr,Arguments., 
181	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
182	
	 For_loop -> for(idinExpr.)Expr, 
183	
	 For_loop -> for(idinExpr).Expr, 
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
184	
	 For_loop -> for(idinExpr)Expr., 
185	
	 Expr_list -> Expr_item_listExpr_list., 
186	
	 Expr_item_list -> Expr.;, 
187	
	 Expr_item_list -> Expr;., 
188	
	 Expr_block -> {Expr_list.}, 
189	
	 Expr_block -> {Expr_list}., 
190	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
191	
	 Type_member_item -> id:id=Expr.;, 
192	
	 Type_member_item -> id:id=Expr;., 
193	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Type_member_item -> id=.Expr;, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Pow -> .Sign, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
194	
	 Type_member_item -> id=Expr.;, 
195	
	 Type_member_item -> id=Expr;., 
196	
	 Type_member_item -> Full_form., 
197	
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block, 
198	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
199	
	 Full_form -> Method_signatureExpr_block;., 
200	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
201	
	 Inline_form -> Method_signature=>Expr.;, 
202	
	 Inline_form -> Method_signature=>Expr;., 
203	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
204	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
205	
	 Type -> typeType_decinheritsidType_block., 
206	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Vector, 
	 Arithmetic -> .Term, 
	 Expr -> .Conditional, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Pow -> .Sign**Pow, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
207	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
208	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
209	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
210	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
211	
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
212	
	 Type_dec -> id(Params.), 
213	
	 Type_dec -> id(Params)., 
214	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
215	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
216	
	 Protocol -> protocolidextends.idProtocol_block, 
217	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
218	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
219	
	 Protocol_block -> {Method_dec_list.}, 
220	
	 Protocol_block -> {Method_dec_list}., 
221	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
222	
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params), 
223	
	 Method_dec_list -> Method_signature;Method_dec_list., 
224	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
225	
	 Protocol -> protocolidextendsidProtocol_block., 
226	
	 Protocol -> protocolidProtocol_block., 
227	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Func -> .functionInline_form, 
228	
	 Func -> function.Full_form, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Func -> function.Inline_form, 
229	
	 Func -> functionInline_form., 
230	
	 Func -> functionFull_form., 
231	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Func -> .functionInline_form, 
232	
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionFull_form, 
	 Func -> .functionInline_form, 
233	
	 Type_function_list -> ProtocolType_function_list., 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 Type_function_list -> TypeType_function_list., 
236	
	 Sign -> .Factor, 
	 Expr -> .While_loop, 
	 Concat -> .Arithmetic, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Arithmetic+Term, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .Vector, 
	 Expr -> .Conditional, 
	 Arithmetic -> .Term, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Let_expr -> .letAssignmentinExpr, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Member, 
	 Call_func -> .id(), 
	 Atom -> .Call_func, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Atom -> .Type_inst, 
	 And_expr -> .Check_type, 
	 Call_func -> .id(Arguments), 
	 While_loop -> .while(Expr)Expr, 
	 Concat -> .Concat@@Arithmetic, 
	 Expr -> .For_loop, 
	 Member -> .Atom.Call_func, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Expr -> .Let_expr, 
	 Index_object -> .Atom[Expr], 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Index_object, 
	 Term -> .Pow, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Expr_block, 
	 Factor -> .!Atom, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .id, 
	 Arithmetic -> .Arithmetic-Term, 
	 Term -> .Term*Pow, 
	 Term -> .Term%Pow, 
	 Or_expr -> .And_expr, 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .(Expr), 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Concat, 
	 Term -> .Term/Pow, 
	 Destr_assig -> .id:=Expr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_item_list -> .Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr -> .Destr_assig, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Atom -> .Cast_type, 
	 Pow -> .Sign**Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
237	
	 Program -> Type_function_listExpr_item_list., 
