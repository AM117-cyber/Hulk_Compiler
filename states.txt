0	
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A*, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 S' -> .E, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 S' -> .E, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
1	
	 A -> ε., 
2	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
3	
	 T -> TF., 
4	
	 A -> symbol., 
5	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
	 E -> .E|T, 
	 E -> .T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
6	
	 E -> E.|T, 
	 A -> (E.), 
7	
	 A -> .(E), 
	 T -> .F, 
	 A -> .ε, 
	 E -> E|.T, 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
	 T -> .TF, 
8	
	 T -> T.F, 
	 A -> .(E), 
	 A -> .ε, 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .symbol, 
9	
	 F -> A., 
	 F -> A.*, 
10	
	 F -> A*., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decinheritsidType_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 S' -> .Program, 
	 Type -> .typeType_decType_block, 
1	
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
2	
	 Type_dec -> .id, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
3	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
4	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
5	
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
6	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
7	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
8	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
9	
	 Term -> Term./Pow, 
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
10	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Term -> Term/.Pow, 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
11	
	 Atom -> num., 
12	
	 Atom -> Expr_block., 
13	
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> Atom., 
	 Member -> Atom..Call_func, 
	 Cast_type -> Atom.asid, 
14	
	 Cast_type -> Atomas.id, 
15	
	 Cast_type -> Atomasid., 
16	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Index_object -> Atom[.Expr], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
17	
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Destr_assig -> Atom..id:=Expr, 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
18	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Destr_assig -> Atom..id:=Expr, 
19	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
20	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Call_func -> id(.Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Call_func -> id(.), 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
21	
	 Call_func -> id()., 
22	
	 Sign -> Factor., 
23	
	 Atom -> Index_object., 
24	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
25	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
26	
	 And_expr -> And_expr&Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
27	
	 Atom -> string., 
28	
	 Atom -> Type_inst., 
29	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Atom -> (.Expr), 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
30	
	 Conditional -> if.(Expr)ExprCond_other_case, 
31	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
32	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
33	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Arithmetic -> Arithmetic+.Term, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
34	
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
35	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Term -> Term%.Pow, 
	 Atom -> .Index_object, 
36	
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Atom -> .Member, 
	 Atom -> .Index_object, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Sign -> +.Factor, 
	 Cast_type -> .Atomasid, 
37	
	 Sign -> +Factor., 
38	
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(), 
39	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
40	
	 Type_inst -> newCall_func., 
41	
	 Atom -> Cast_type., 
42	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
43	
	 Atom -> Member., 
44	
	 Vector -> Vector_exp., 
45	
	 Atom -> Call_func., 
46	
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Atom -> .Member, 
	 Atom -> .Index_object, 
	 Call_func -> .id(Arguments), 
	 Factor -> !.Atom, 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Cast_type -> .Atomasid, 
47	
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
	 Factor -> !Atom., 
	 Member -> Atom..Call_func, 
	 Cast_type -> Atom.asid, 
48	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
49	
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
50	
	 Member -> Atom.Call_func., 
51	
	 Atom -> Vector., 
52	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Expr_block, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Expr_list -> .Expr_item_list, 
	 Expr_block -> {.Expr_list}, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
53	
	 For_loop -> for.(idinExpr)Expr, 
54	
	 For_loop -> for(.idinExpr)Expr, 
55	
	 For_loop -> for(id.inExpr)Expr, 
56	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 For_loop -> for(idin.Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
57	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
	 Destr_assig -> id.:=Expr, 
58	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> id:=.Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
59	
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
	 Pow -> Sign.^Pow, 
60	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Index_object, 
61	
	 Atom -> bool., 
62	
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Atom -> .Member, 
	 Atom -> .Index_object, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Sign -> -.Factor, 
	 Member -> .Atom.id, 
	 Cast_type -> .Atomasid, 
63	
	 Sign -> -Factor., 
64	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Vector_exp -> [.], 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector_exp -> [.Vector_item_list], 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
65	
	 Vector_exp -> [Vector_item_list.], 
66	
	 Vector_exp -> [Vector_item_list]., 
67	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
68	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
69	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
70	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
71	
	 Term -> Term./Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
72	
	 Atom -> .Vector, 
	 Term -> Term*.Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
73	
	 Term -> Term*Pow., 
74	
	 Vector -> Vector_imp., 
75	
	 Term -> Pow., 
76	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
77	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
78	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
79	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Check_type -> .Aritm_comp, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Arithmetic -> .Arithmetic-Term, 
	 Sign -> .-Factor, 
	 And_expr -> .Check_type, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Cast_type, 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
80	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
81	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Check_type -> Aritm_comp., 
82	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .Expr_block, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
83	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
84	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
85	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
86	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
87	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
88	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
89	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
90	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
91	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
92	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Arithmetic -> .Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
93	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
94	
	 Vector_exp -> []., 
95	
	 Expr -> Let_expr., 
96	
	 Expr -> For_loop., 
97	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
98	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Vector_item_list -> .Expr, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
99	
	 Vector_item_list -> Expr,Vector_item_list., 
100	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
101	
	 While_loop -> while.(Expr)Expr, 
102	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Pow -> .Sign^Pow, 
	 Sign -> .Factor, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
103	
	 While_loop -> while(Expr.)Expr, 
104	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 While_loop -> while(Expr).Expr, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
105	
	 While_loop -> while(Expr)Expr., 
106	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
107	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.=Expr, 
108	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
109	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
110	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
111	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
112	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
113	
	 Assignment -> id:id=Expr,Assignment., 
114	
	 Expr -> While_loop., 
115	
	 Expr -> Destr_assig., 
116	
	 Expr -> Conditional., 
117	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Assignment -> id=.Expr,Assignment, 
	 Let_expr -> .letAssignmentinExpr, 
	 For_loop -> .for(idinExpr)Expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .num, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Assignment -> id=.Expr, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
118	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
119	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
120	
	 Assignment -> id=Expr,Assignment., 
121	
	 Let_expr -> letAssignment.inExpr, 
122	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Let_expr -> letAssignmentin.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
123	
	 Let_expr -> letAssignmentinExpr., 
124	
	 Vector_imp -> [Expr||.idinExpr], 
125	
	 Vector_imp -> [Expr||id.inExpr], 
126	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
127	
	 Vector_imp -> [Expr||idinExpr.], 
128	
	 Vector_imp -> [Expr||idinExpr]., 
129	
	 Pow -> Sign**Pow., 
130	
	 Atom -> .Vector, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Expr_block -> .{Expr_list}, 
	 Sign -> .-Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .Cast_type, 
	 Sign -> .+Factor, 
	 Member -> .Atom.Call_func, 
	 Atom -> .num, 
	 Pow -> .Sign, 
	 Atom -> .Call_func, 
	 Type_inst -> .newCall_func, 
	 Sign -> .Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> Sign^.Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .(Expr), 
	 Factor -> .!Atom, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
131	
	 Pow -> Sign^Pow., 
132	
	 Destr_assig -> id:=Expr., 
133	
	 For_loop -> for(idinExpr.)Expr, 
134	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 For_loop -> for(idinExpr).Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
135	
	 For_loop -> for(idinExpr)Expr., 
136	
	 Expr_block -> {Expr_list.}, 
137	
	 Expr_block -> {Expr_list}., 
138	
	 Expr_item_list -> Expr.;, 
139	
	 Expr_item_list -> Expr;., 
140	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_list -> Expr_item_list., 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .Expr_block, 
	 Vector_exp -> .[], 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Expr_list -> .Expr_item_list, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
141	
	 Expr_list -> Expr_item_listExpr_list., 
142	
	 Term -> Term%Pow., 
143	
	 Conditional -> if(Expr.)ExprCond_other_case, 
144	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
145	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
146	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
147	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
148	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
149	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
150	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
151	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Cond_other_case -> else.Expr, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
152	
	 Cond_other_case -> elseExpr., 
153	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
154	
	 Conditional -> if(Expr)ExprCond_other_case., 
155	
	 Atom -> (Expr.), 
156	
	 Atom -> (Expr)., 
157	
	 Call_func -> id(Arguments.), 
158	
	 Call_func -> id(Arguments)., 
159	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
160	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arguments -> .Expr, 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Arguments -> .Expr,Arguments, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arguments -> Expr,.Arguments, 
	 Atom -> .Index_object, 
161	
	 Arguments -> Expr,Arguments., 
162	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
163	
	 Destr_assig -> Atom.id:=Expr., 
164	
	 Index_object -> Atom[Expr.], 
165	
	 Index_object -> Atom[Expr]., 
166	
	 Term -> Term/Pow., 
167	
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
168	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
169	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
170	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
171	
	 Type_member_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .Inline_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .id=Expr;, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> .Type_member_itemType_member_list, 
172	
	 Type_member_item -> Inline_form., 
173	
	 Type_member_item -> Full_form., 
174	
	 Type_member_list -> ., 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
175	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
176	
	 Type_member_item -> id:.id=Expr;, 
177	
	 Type_member_item -> id:id.=Expr;, 
178	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 Type_member_item -> id:id=.Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
179	
	 Type_member_item -> id:id=Expr.;, 
180	
	 Type_member_item -> id:id=Expr;., 
181	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Type_member_item -> id=.Expr;, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
182	
	 Type_member_item -> id=Expr.;, 
183	
	 Type_member_item -> id=Expr;., 
184	
	 Params -> .id,Params, 
	 Method_signature -> id(.Params), 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.Params):id, 
	 Method_signature -> id(.), 
185	
	 Params -> id.:id,Params, 
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.,Params, 
186	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
187	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
188	
	 Params -> .id,Params, 
	 Params -> id:id,.Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
189	
	 Params -> id:id,Params., 
190	
	 Params -> id,.Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
191	
	 Params -> id,Params., 
192	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
193	
	 Method_signature -> id():.id, 
194	
	 Method_signature -> id():id., 
195	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
196	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
197	
	 Method_signature -> id(Params):.id, 
198	
	 Method_signature -> id(Params):id., 
199	
	 Type_member_list -> Type_member_itemType_member_list., 
200	
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
201	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .string, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
202	
	 Inline_form -> Method_signature=>Expr.;, 
203	
	 Inline_form -> Method_signature=>Expr;., 
204	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
205	
	 Full_form -> Method_signatureExpr_block;., 
206	
	 Type_block -> {Type_member_list.}, 
207	
	 Type_block -> {Type_member_list}., 
208	
	 Type -> typeType_decinheritsidType_block., 
209	
	 Type -> typeType_decType_block., 
210	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
211	
	 Params -> .id,Params, 
	 Params -> .id, 
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
212	
	 Type_dec -> id(Params.), 
213	
	 Type_dec -> id(Params)., 
214	
	 Type_function_list -> TypeType_function_list., 
215	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
216	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
217	
	 Protocol -> protocolidProtocol_block., 
218	
	 Protocol -> protocolidextends.idProtocol_block, 
219	
	 Protocol -> protocolidextendsid.Protocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
220	
	 Protocol -> protocolidextendsidProtocol_block., 
221	
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
222	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
223	
	 Protocol_block -> {Method_dec_list.}, 
224	
	 Protocol_block -> {Method_dec_list}., 
225	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
226	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
227	
	 Method_dec_list -> Method_signature;Method_dec_list., 
228	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Protocol.Type_function_list, 
229	
	 Type_function_list -> ProtocolType_function_list., 
230	
	 Method_signature -> .id(Params), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Func -> function.Inline_form, 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(), 
231	
	 Func -> functionInline_form., 
232	
	 Func -> functionFull_form., 
233	
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> ., 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Func.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decType_block, 
234	
	 Type_function_list -> FuncType_function_list., 
235	
	 S' -> Program., 
236	
	 Atom -> .Vector, 
	 Concat -> .Arithmetic, 
	 Expr_item_list -> .Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Aritm_comp -> .Concat, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Cast_type -> .Atomasid, 
	 Expr -> .Let_expr, 
	 Atom -> .Member, 
	 Call_func -> .id(Arguments), 
	 And_expr -> .And_expr&Check_type, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Arithmetic -> .Arithmetic-Term, 
	 Concat -> .Concat@Arithmetic, 
	 Term -> .Pow, 
	 Expr -> .For_loop, 
	 And_expr -> .Check_type, 
	 Expr -> .Conditional, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term%Pow, 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> .for(idinExpr)Expr, 
	 Let_expr -> .letAssignmentinExpr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .num, 
	 Sign -> .+Factor, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign, 
	 Sign -> .Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_exp, 
	 Program -> Type_function_list.Expr_item_list, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_exp -> .[], 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .id, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Atom -> .(Expr), 
	 Expr -> .Destr_assig, 
	 Factor -> .!Atom, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Factor -> .Atom, 
	 Call_func -> .id(), 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .bool, 
	 Vector -> .Vector_imp, 
	 Member -> .Atom.id, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Or_expr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Term -> .Term*Pow, 
	 Atom -> .Index_object, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 S' -> .E, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 S' -> .E, 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 S' -> .E, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A, 
	 E -> .T, 
	 S' -> .E, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
1	
	 F -> .A, 
	 A -> .(E), 
	 E -> T., 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 A -> .ε, 
2	
	 A -> ε., 
3	
	 T -> TF., 
4	
	 F -> A., 
	 F -> A.*, 
5	
	 F -> A*., 
6	
	 F -> .A, 
	 E -> .T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 E -> .E|T, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
	 A -> (.E), 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 F -> .A, 
	 E -> E|.T, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> .TF, 
	 F -> .A*, 
	 T -> .F, 
	 A -> .ε, 
9	
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
	 T -> T.F, 
	 F -> .A*, 
	 E -> E|T., 
	 A -> .ε, 
10	
	 A -> symbol., 
11	
	 T -> F., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Func -> .functionInline_form, 
	 S' -> .Program, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
1	
	 S' -> Program., 
2	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_item_list -> .Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Program -> Type_function_list.Expr_item_list, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
3	
	 Expr -> While_loop., 
4	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Expr_block -> {.Expr_list}, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_item_list -> .Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
5	
	 Atom -> Vector., 
6	
	 Expr -> For_loop., 
7	
	 Call_func -> id.(), 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
8	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Conditional, 
	 Sign -> .+Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Call_func -> id(.), 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Call_func -> id(.Arguments), 
	 Arguments -> .Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
9	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
10	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
11	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
	 Atom -> id., 
12	
	 Atom -> bool., 
13	
	 Atom -> Index_object., 
14	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
15	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Arithmetic -> Arithmetic-.Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
16	
	 Atom -> Call_func., 
17	
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
	 Call_func -> .id(Arguments), 
18	
	 Type_inst -> newCall_func., 
19	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
20	
	 Atom -> Type_inst., 
21	
	 Atom -> Member., 
22	
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
	 Pow -> Sign.**Pow, 
23	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Pow -> Sign^.Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
24	
	 Pow -> Sign^Pow., 
25	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> (.Expr), 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
26	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
27	
	 Let_expr -> letAssignment.inExpr, 
28	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
29	
	 Expr -> Conditional., 
30	
	 Expr -> Let_expr., 
31	
	 Expr -> Destr_assig., 
32	
	 Or_expr -> And_expr., 
	 And_expr -> And_expr.&Check_type, 
33	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 And_expr -> And_expr&.Check_type, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
34	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
35	
	 Term -> Pow., 
36	
	 Aritm_comp -> Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
37	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
38	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
39	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Arithmetic -> Arithmetic+.Term, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
40	
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
41	
	 Call_func -> .id(), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
42	
	 Member -> Atom.Call_func., 
43	
	 Member -> Atom.id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
44	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Index_object -> Atom[.Expr], 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
45	
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Factor -> Atom., 
	 Member -> Atom..id, 
46	
	 Call_func -> .id(Arguments), 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
47	
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
48	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
49	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Sign -> -.Factor, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
50	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Vector_exp -> [.], 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> [.Vector_item_list], 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Vector_item_list -> .Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
51	
	 Vector_exp -> []., 
52	
	 Vector -> Vector_exp., 
53	
	 Atom -> num., 
54	
	 Atom -> string., 
55	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
56	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Vector_item_list -> .Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
57	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
58	
	 While_loop -> while.(Expr)Expr, 
59	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 While_loop -> while(.Expr)Expr, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
60	
	 While_loop -> while(Expr.)Expr, 
61	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 While_loop -> while(Expr).Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
62	
	 While_loop -> while(Expr)Expr., 
63	
	 Conditional -> if.(Expr)ExprCond_other_case, 
64	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
65	
	 Conditional -> if(Expr.)ExprCond_other_case, 
66	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
67	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
68	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Cond_other_case -> else.Expr, 
	 Expr -> .Let_expr, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
69	
	 Cond_other_case -> elseExpr., 
70	
	 For_loop -> for.(idinExpr)Expr, 
71	
	 For_loop -> for(.idinExpr)Expr, 
72	
	 For_loop -> for(id.inExpr)Expr, 
73	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 For_loop -> for(idin.Expr)Expr, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
74	
	 For_loop -> for(idinExpr.)Expr, 
75	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 For_loop -> for(idinExpr).Expr, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
76	
	 For_loop -> for(idinExpr)Expr., 
77	
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
78	
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
79	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@Arithmetic, 
80	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Concat -> Concat@.Arithmetic, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
81	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
82	
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
83	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> Term*.Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
84	
	 Term -> Term*Pow., 
85	
	 Sign -> Factor., 
86	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Factor -> !.Atom, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
87	
	 Atom -> Cast_type., 
88	
	 Atom -> Expr_block., 
89	
	 Vector -> Vector_imp., 
90	
	 Index_object -> Atom.[Expr], 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Factor -> !Atom., 
91	
	 Cast_type -> Atomas.id, 
92	
	 Cast_type -> Atomasid., 
93	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Type_inst, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Sign -> +.Factor, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
94	
	 Sign -> +Factor., 
95	
	 Term -> Term%.Pow, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
96	
	 Term -> Term%Pow., 
97	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Term -> Term/.Pow, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
98	
	 Term -> Term/Pow., 
99	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
100	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
101	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
102	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
103	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
104	
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
105	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
106	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
107	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
108	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
109	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
110	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Type_inst, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Or_expr -> Or_expr|.And_expr, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Term -> .Pow, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_exp, 
	 Aritm_comp -> .Concat, 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Vector_exp -> .[], 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
111	
	 Or_expr -> Or_expr|And_expr., 
	 And_expr -> And_expr.&Check_type, 
112	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
113	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
114	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
115	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
116	
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
117	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
118	
	 Conditional -> if(Expr)ExprCond_other_case., 
119	
	 Vector_item_list -> Expr,Vector_item_list., 
120	
	 Vector_imp -> [Expr||.idinExpr], 
121	
	 Vector_imp -> [Expr||id.inExpr], 
122	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
123	
	 Vector_imp -> [Expr||idinExpr.], 
124	
	 Vector_imp -> [Expr||idinExpr]., 
125	
	 Vector_exp -> [Vector_item_list.], 
126	
	 Vector_exp -> [Vector_item_list]., 
127	
	 Sign -> -Factor., 
128	
	 Destr_assig -> Atom.id:=Expr., 
129	
	 Index_object -> Atom[Expr.], 
130	
	 Index_object -> Atom[Expr]., 
131	
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term.%Pow, 
132	
	 Let_expr -> letAssignmentinExpr., 
133	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
134	
	 Assignment -> id:.id=Expr,Assignment, 
	 Assignment -> id:.id=Expr, 
135	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
136	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Assignment -> id:id=.Expr, 
	 Check_type -> .Aritm_comp, 
	 Sign -> .-Factor, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Assignment -> id:id=.Expr,Assignment, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
137	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
138	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
139	
	 Assignment -> id:id=Expr,Assignment., 
140	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Assignment -> id=.Expr,Assignment, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Assignment -> id=.Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
141	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
142	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
143	
	 Assignment -> id=Expr,Assignment., 
144	
	 Atom -> (Expr.), 
145	
	 Atom -> (Expr)., 
146	
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Atom -> .Type_inst, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.Call_func, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Type_inst -> .newCall_func, 
	 Atom -> .bool, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Factor -> .Atom, 
	 Pow -> .Sign**Pow, 
147	
	 Pow -> Sign**Pow., 
148	
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term./Pow, 
	 Term -> Term.%Pow, 
149	
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
150	
	 Call_func -> id(Arguments.), 
151	
	 Call_func -> id(Arguments)., 
152	
	 Call_func -> id()., 
153	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
154	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Conditional, 
	 Sign -> .+Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arguments -> Expr,.Arguments, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Arguments -> .Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
155	
	 Arguments -> Expr,Arguments., 
156	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Destr_assig -> id:=.Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
157	
	 Destr_assig -> id:=Expr., 
158	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> Expr_item_list., 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 Expr_list -> .Expr_item_list, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
159	
	 Expr_item_list -> Expr.;, 
160	
	 Expr_item_list -> Expr;., 
161	
	 Expr_list -> Expr_item_listExpr_list., 
162	
	 Expr_block -> {Expr_list.}, 
163	
	 Expr_block -> {Expr_list}., 
164	
	 Program -> Type_function_listExpr_item_list., 
165	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Full_form, 
166	
	 Func -> functionFull_form., 
167	
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
168	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
169	
	 Full_form -> Method_signatureExpr_block;., 
170	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Inline_form -> Method_signature=>.Expr;, 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
171	
	 Inline_form -> Method_signature=>Expr.;, 
172	
	 Inline_form -> Method_signature=>Expr;., 
173	
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
174	
	 Method_signature -> id(.Params), 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Params -> .id:id,Params, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id,Params, 
	 Params -> .id, 
175	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
176	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
177	
	 Method_signature -> id(Params):.id, 
178	
	 Method_signature -> id(Params):id., 
179	
	 Method_signature -> id().:id, 
	 Method_signature -> id()., 
180	
	 Method_signature -> id():.id, 
181	
	 Method_signature -> id():id., 
182	
	 Params -> id.:id, 
	 Params -> id., 
	 Params -> id.:id,Params, 
	 Params -> id.,Params, 
183	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
184	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
185	
	 Params -> id:id,.Params, 
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
186	
	 Params -> id:id,Params., 
187	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Params -> id,.Params, 
	 Params -> .id,Params, 
	 Params -> .id, 
188	
	 Params -> id,Params., 
189	
	 Func -> functionInline_form., 
190	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
191	
	 Type_function_list -> ProtocolType_function_list., 
192	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
193	
	 Type_function_list -> FuncType_function_list., 
194	
	 Type -> .typeType_decType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionFull_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Type.Type_function_list, 
195	
	 Type_function_list -> TypeType_function_list., 
196	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
197	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
	 Protocol -> protocolid.extendsidProtocol_block, 
198	
	 Protocol -> protocolidextends.idProtocol_block, 
199	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
200	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Protocol_block -> {.Method_dec_list}, 
201	
	 Protocol_block -> {Method_dec_list.}, 
202	
	 Protocol_block -> {Method_dec_list}., 
203	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
204	
	 Method_signature -> .id():id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
205	
	 Method_dec_list -> Method_signature;Method_dec_list., 
206	
	 Protocol -> protocolidextendsidProtocol_block., 
207	
	 Protocol -> protocolidProtocol_block., 
208	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
209	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
210	
	 Type -> typeType_decType_block., 
211	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Type_block -> {.Type_member_list}, 
212	
	 Type_member_item -> Full_form., 
213	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .Full_form, 
	 Method_signature -> .id(Params):id, 
	 Type_member_list -> ., 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .id:id=Expr;, 
	 Method_signature -> .id(Params), 
	 Full_form -> .Method_signatureExpr_block;, 
214	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Type_member_item -> id.=Expr;, 
	 Type_member_item -> id.:id=Expr;, 
215	
	 Type_member_item -> id:.id=Expr;, 
216	
	 Type_member_item -> id:id.=Expr;, 
217	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 Type_member_item -> id:id=.Expr;, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
218	
	 Type_member_item -> id:id=Expr.;, 
219	
	 Type_member_item -> id:id=Expr;., 
220	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Sign -> .+Factor, 
	 Expr -> .Conditional, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Type_member_item -> id=.Expr;, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type_inst -> .newCall_func, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
221	
	 Type_member_item -> id=Expr.;, 
222	
	 Type_member_item -> id=Expr;., 
223	
	 Type_member_item -> Inline_form., 
224	
	 Type_member_list -> Type_member_itemType_member_list., 
225	
	 Type_block -> {Type_member_list.}, 
226	
	 Type_block -> {Type_member_list}., 
227	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
228	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
	 Type_block -> .{Type_member_list}, 
229	
	 Type -> typeType_decinheritsidType_block., 
230	
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Index_object -> .Atom[Expr], 
	 Atom -> .Member, 
	 Atom -> .Call_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .-Factor, 
	 Check_type -> .Aritm_comp, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Type_inst, 
	 Or_expr -> .And_expr, 
	 Term -> .Term/Pow, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Term, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Atom -> .(Expr), 
	 Arguments -> .Expr,Arguments, 
	 Expr -> .Conditional, 
	 Sign -> .+Factor, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign, 
	 Atom -> .num, 
	 Destr_assig -> .id:=Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Destr_assig -> .Or_expr, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .string, 
	 Expr_block -> .{Expr_list}, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> .id(Arguments), 
	 Expr -> .Let_expr, 
	 Member -> .Atom.Call_func, 
	 Expr -> .Destr_assig, 
	 Atom -> .Index_object, 
	 Factor -> .!Atom, 
	 And_expr -> .Check_type, 
	 Atom -> .Cast_type, 
	 Cast_type -> .Atomasid, 
	 Vector -> .Vector_imp, 
	 Term -> .Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Type_inst -> .newCall_func, 
	 Arguments -> .Expr, 
	 Expr -> .For_loop, 
	 Atom -> .bool, 
	 And_expr -> .And_expr&Check_type, 
	 Vector -> .Vector_exp, 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Member -> .Atom.id, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Concat, 
	 Expr -> .While_loop, 
	 Let_expr -> .letAssignmentinExpr, 
	 Sign -> .Factor, 
	 Atom -> .Expr_block, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@@Arithmetic, 
231	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
232	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
233	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
234	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
235	
	 Params -> .id:id, 
	 Params -> .id:id,Params, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
	 Params -> .id, 
236	
	 Type_dec -> id(Params.), 
237	
	 Type_dec -> id(Params)., 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 S' -> .E, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 E -> E.|T, 
	 S' -> E., 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 S' -> .E, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 S' -> .E, 
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 E -> E.|T, 
	 S' -> E., 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 S' -> E., 
	 E -> E.|T, 
3	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 S' -> .E, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 E -> .E|T, 
1	
	 S' -> E., 
	 E -> E.|T, 
2	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> E|.T, 
3	
	 A -> ε., 
4	
	 T -> .F, 
	 F -> .A, 
	 A -> .(E), 
	 F -> .A*, 
	 T -> .TF, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> .T, 
	 A -> (.E), 
	 E -> .E|T, 
5	
	 A -> (E.), 
	 E -> E.|T, 
6	
	 A -> (E)., 
7	
	 T -> F., 
8	
	 F -> A.*, 
	 F -> A., 
9	
	 F -> A*., 
10	
	 A -> .(E), 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 E -> T., 
	 T -> T.F, 
11	
	 T -> TF., 
12	
	 A -> symbol., 
13	
	 A -> .(E), 
	 E -> E|T., 
	 F -> .A, 
	 F -> .A*, 
	 A -> .ε, 
	 A -> .symbol, 
	 T -> T.F, 
0	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 S' -> .Program, 
	 Program -> .Type_function_listExpr_item_list, 
	 Type_function_list -> .ProtocolType_function_list, 
1	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
2	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
3	
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> ., 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type_function_list -> .TypeType_function_list, 
	 Func -> .functionInline_form, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Type_function_list -> .ProtocolType_function_list, 
4	
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
5	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.Type_block, 
6	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
7	
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.Type_block, 
8	
	 Type -> typeType_decinheritsidType_block., 
9	
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_block -> {.Type_member_list}, 
	 Method_signature -> .id():id, 
	 Type_member_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
10	
	 Expr_block -> .{Expr_list}, 
	 Full_form -> Method_signature.Expr_block, 
	 Full_form -> Method_signature.Expr_block;, 
	 Inline_form -> Method_signature.=>Expr;, 
11	
	 Full_form -> Method_signatureExpr_block., 
	 Full_form -> Method_signatureExpr_block.;, 
12	
	 Full_form -> Method_signatureExpr_block;., 
13	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Cast_type, 
	 Sign -> .Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
14	
	 Term -> Term.%Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
15	
	 Vector_exp -> .[], 
	 Term -> Term/.Pow, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
16	
	 Atom -> string., 
17	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Sign -> +.Factor, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
18	
	 Atom -> bool., 
19	
	 Atom -> num., 
20	
	 Atom -> Cast_type., 
21	
	 Atom -> Index_object., 
22	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_exp -> [.Vector_item_list], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_item_list -> .Expr, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Vector_exp -> [.], 
	 Vector_imp -> [.Expr||idinExpr], 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
23	
	 Atom -> Type_inst., 
24	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> (.Expr), 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
25	
	 Atom -> (Expr.), 
26	
	 Atom -> (Expr)., 
27	
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.<=Concat, 
28	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
29	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
30	
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> Arithmetic+.Term, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
31	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
32	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Term -> Term%.Pow, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
33	
	 Term -> Term%Pow., 
34	
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Type_inst -> new.Call_func, 
35	
	 Type_inst -> newCall_func., 
36	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
37	
	 Arguments -> .Expr,Arguments, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Call_func -> id(.), 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Call_func -> id(.Arguments), 
	 Sign -> .-Factor, 
	 Atom -> .Cast_type, 
	 Sign -> .Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
38	
	 Call_func -> id()., 
39	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
40	
	 Arguments -> .Expr,Arguments, 
	 Term -> .Term*Pow, 
	 Arguments -> Expr,.Arguments, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
41	
	 Arguments -> Expr,Arguments., 
42	
	 Conditional -> if.(Expr)ExprCond_other_case, 
43	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
44	
	 Conditional -> if(Expr.)ExprCond_other_case, 
45	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
46	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
47	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 Cond_other_case -> else.Expr, 
	 While_loop -> .while(Expr)Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .id:=Expr, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
48	
	 Cond_other_case -> elseExpr., 
49	
	 Term -> Pow., 
50	
	 Expr -> Destr_assig., 
51	
	 Atom -> Vector., 
52	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Sign -> -.Factor, 
	 Atom -> .Member, 
	 Factor -> .!Atom, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Factor -> .Atom, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Atom -> .bool, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
53	
	 Sign -> -Factor., 
54	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Expr_list -> .Expr_item_list, 
	 Expr_item_list -> .Expr;, 
	 Expr_block -> {.Expr_list}, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Atom -> .Cast_type, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
55	
	 Expr_block -> {Expr_list.}, 
56	
	 Expr_block -> {Expr_list}., 
57	
	 Expr_item_list -> Expr.;, 
58	
	 Expr_item_list -> Expr;., 
59	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Expr_list -> Expr_item_list., 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Expr_item_list -> .Expr;, 
	 Expr_list -> .Expr_item_list, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Cast_type, 
	 Sign -> .-Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Sign -> .Factor, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
60	
	 Expr_list -> Expr_item_listExpr_list., 
61	
	 Expr -> Conditional., 
62	
	 Sign -> Factor., 
63	
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
64	
	 Let_expr -> letAssignment.inExpr, 
65	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Let_expr -> letAssignmentin.Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .id, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
66	
	 Let_expr -> letAssignmentinExpr., 
67	
	 For_loop -> for.(idinExpr)Expr, 
68	
	 For_loop -> for(.idinExpr)Expr, 
69	
	 For_loop -> for(id.inExpr)Expr, 
70	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 For_loop -> for(idin.Expr)Expr, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
71	
	 For_loop -> for(idinExpr.)Expr, 
72	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 For_loop -> for(idinExpr).Expr, 
	 Member -> .Atom.Call_func, 
73	
	 For_loop -> for(idinExpr)Expr., 
74	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
75	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
76	
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
77	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
78	
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
79	
	 Cast_type -> Atomas.id, 
80	
	 Cast_type -> Atomasid., 
81	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
	 Member -> Atom..id, 
82	
	 Member -> Atom.Call_func., 
83	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
84	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Index_object -> Atom[.Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
85	
	 Index_object -> Atom[Expr.], 
86	
	 Index_object -> Atom[Expr]., 
87	
	 Expr -> While_loop., 
88	
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
	 Cast_type -> Atom.asid, 
89	
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
	 Member -> Atom..id, 
90	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Destr_assig -> Atom.id.:=Expr, 
	 Member -> Atom.id., 
91	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Call_func -> .id(), 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
92	
	 Destr_assig -> Atom.id:=Expr., 
93	
	 Vector -> Vector_imp., 
94	
	 While_loop -> while.(Expr)Expr, 
95	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
96	
	 While_loop -> while(Expr.)Expr, 
97	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 While_loop -> while(Expr).Expr, 
	 Atom -> .id, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
98	
	 While_loop -> while(Expr)Expr., 
99	
	 Destr_assig -> Or_expr., 
	 Or_expr -> Or_expr.|And_expr, 
100	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 And_expr -> .And_expr&Check_type, 
	 Call_func -> .id(), 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Or_expr -> Or_expr|.And_expr, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
101	
	 Vector -> Vector_exp., 
102	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
103	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
104	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Pow -> Sign^.Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
105	
	 Pow -> Sign^Pow., 
106	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Atom -> .Index_object, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .(Expr), 
	 Atom -> .num, 
	 Type_inst -> .newCall_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Atom -> .bool, 
	 Factor -> !.Atom, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
107	
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
108	
	 Atom -> Call_func., 
109	
	 Atom -> Expr_block., 
110	
	 Atom -> Member., 
111	
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Pow -> Sign**.Pow, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
112	
	 Pow -> Sign**Pow., 
113	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
114	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
115	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
116	
	 Term -> .Term*Pow, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Arithmetic -> Arithmetic-.Term, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
117	
	 Term -> Term./Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
118	
	 Term -> Term*.Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .Atom, 
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
119	
	 Term -> Term*Pow., 
120	
	 Term -> .Term*Pow, 
	 Concat -> Concat@.Arithmetic, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
121	
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
122	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
123	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
124	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
125	
	 Expr -> Let_expr., 
126	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
127	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Destr_assig -> id:=.Expr, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
128	
	 Destr_assig -> id:=Expr., 
129	
	 Expr -> For_loop., 
130	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
131	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@@Arithmetic, 
132	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
133	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
134	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
135	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
136	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
137	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@@Arithmetic, 
138	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Member, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .id, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Call_func -> .id(Arguments), 
	 Vector -> .Vector_imp, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Term -> .Term%Pow, 
	 Factor -> .Atom, 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .Cast_type, 
	 Atom -> .Call_func, 
	 Pow -> .Sign, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .bool, 
	 Pow -> .Sign^Pow, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Member -> .Atom.Call_func, 
139	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
140	
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
141	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
142	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
143	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 Assignment -> id:id=.Expr, 
	 Atom -> .id, 
	 And_expr -> .Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
144	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
145	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
146	
	 Assignment -> id:id=Expr,Assignment., 
147	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Assignment -> id=.Expr, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
148	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
149	
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> .id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
150	
	 Assignment -> id=Expr,Assignment., 
151	
	 Conditional -> if(Expr)ExprCond_other_case., 
152	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
153	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 Member -> .Atom.Call_func, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 And_expr -> .And_expr&Check_type, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
154	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
155	
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
156	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
157	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
158	
	 Call_func -> id(Arguments.), 
159	
	 Call_func -> id(Arguments)., 
160	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
161	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
162	
	 Vector_imp -> [Expr||.idinExpr], 
163	
	 Vector_imp -> [Expr||id.inExpr], 
164	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Member -> .Atom.Call_func, 
165	
	 Vector_imp -> [Expr||idinExpr.], 
166	
	 Vector_imp -> [Expr||idinExpr]., 
167	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_item_list -> .Expr, 
	 Sign -> .+Factor, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Term -> .Term%Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Cast_type, 
	 Sign -> .Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
168	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
169	
	 Vector_item_list -> Expr,Vector_item_list., 
170	
	 Vector_exp -> []., 
171	
	 Vector_exp -> [Vector_item_list.], 
172	
	 Vector_exp -> [Vector_item_list]., 
173	
	 Sign -> +Factor., 
174	
	 Term -> Term/Pow., 
175	
	 Inline_form -> Method_signature=>Expr.;, 
176	
	 Inline_form -> Method_signature=>Expr;., 
177	
	 Type_member_item -> Full_form., 
178	
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
	 Method_signature -> id.():id, 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(), 
179	
	 Type_member_item -> id:.id=Expr;, 
180	
	 Type_member_item -> id:id.=Expr;, 
181	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Type_member_item -> id:id=.Expr;, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
182	
	 Type_member_item -> id:id=Expr.;, 
183	
	 Type_member_item -> id:id=Expr;., 
184	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Type_member_item -> id=.Expr;, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
185	
	 Type_member_item -> id=Expr.;, 
186	
	 Type_member_item -> id=Expr;., 
187	
	 Method_signature -> id(.Params), 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id,Params, 
188	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
189	
	 Method_signature -> id():.id, 
190	
	 Method_signature -> id():id., 
191	
	 Method_signature -> id(Params.), 
	 Method_signature -> id(Params.):id, 
192	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
193	
	 Method_signature -> id(Params):.id, 
194	
	 Method_signature -> id(Params):id., 
195	
	 Params -> id.:id,Params, 
	 Params -> id., 
	 Params -> id.:id, 
	 Params -> id.,Params, 
196	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
197	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
198	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id:id,.Params, 
	 Params -> .id,Params, 
199	
	 Params -> id:id,Params., 
200	
	 Params -> id,.Params, 
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
201	
	 Params -> id,Params., 
202	
	 Type_member_item -> Inline_form., 
203	
	 Inline_form -> .Method_signature=>Expr;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_list -> ., 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Inline_form, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id=Expr;, 
204	
	 Type_member_list -> Type_member_itemType_member_list., 
205	
	 Type_block -> {Type_member_list.}, 
206	
	 Type_block -> {Type_member_list}., 
207	
	 Arguments -> .Expr,Arguments, 
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Arguments -> .Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Atom -> .string, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Sign -> .Factor, 
	 Atom -> .Cast_type, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
208	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
209	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
210	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
211	
	 Type -> typeType_decType_block., 
212	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
213	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
214	
	 Type_dec -> id(Params.), 
215	
	 Type_dec -> id(Params)., 
216	
	 Type_function_list -> ProtocolType_function_list., 
217	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
218	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
219	
	 Protocol -> protocolidextends.idProtocol_block, 
220	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
221	
	 Protocol -> protocolidextendsidProtocol_block., 
222	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
223	
	 Protocol_block -> {Method_dec_list.}, 
224	
	 Protocol_block -> {Method_dec_list}., 
225	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
226	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
227	
	 Method_dec_list -> Method_signature;Method_dec_list., 
228	
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params), 
229	
	 Protocol -> protocolidProtocol_block., 
230	
	 Method_signature -> .id(Params), 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Inline_form -> .Method_signature=>Expr;, 
	 Full_form -> .Method_signatureExpr_block, 
231	
	 Func -> functionInline_form., 
232	
	 Func -> functionFull_form., 
233	
	 Type_function_list -> FuncType_function_list., 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 Term -> .Term*Pow, 
	 Arithmetic -> .Term, 
	 Term -> .Term/Pow, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Type_inst, 
	 Atom -> .Expr_block, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Expr -> .For_loop, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Expr_block -> .{Expr_list}, 
	 Expr -> .Conditional, 
	 Atom -> .Member, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .!Atom, 
	 Atom -> .Index_object, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Vector -> .Vector_exp, 
	 Call_func -> .id(), 
	 And_expr -> .And_expr&Check_type, 
	 Expr -> .While_loop, 
	 While_loop -> .while(Expr)Expr, 
	 Destr_assig -> .id:=Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Or_expr, 
	 And_expr -> .Check_type, 
	 Atom -> .id, 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Vector, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .string, 
	 Factor -> .Atom, 
	 Aritm_comp -> .Concat, 
	 Expr -> .Let_expr, 
	 Call_func -> .id(Arguments), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector -> .Vector_imp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Atom -> .num, 
	 Atom -> .(Expr), 
	 Type_inst -> .newCall_func, 
	 For_loop -> .for(idinExpr)Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Arithmetic -> .Arithmetic+Term, 
	 Term -> .Term%Pow, 
	 Expr_item_list -> .Expr;, 
	 Or_expr -> .Or_expr|And_expr, 
	 Term -> .Pow, 
	 Pow -> .Sign**Pow, 
	 Sign -> .-Factor, 
	 Atom -> .Cast_type, 
	 Sign -> .Factor, 
	 Atom -> .Call_func, 
	 Or_expr -> .And_expr, 
	 Pow -> .Sign, 
	 Let_expr -> .letAssignmentinExpr, 
	 Atom -> .bool, 
	 Concat -> .Concat@Arithmetic, 
	 Pow -> .Sign^Pow, 
	 Check_type -> .Aritm_comp, 
	 Concat -> .Arithmetic, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Member -> .Atom.Call_func, 
236	
	 Program -> Type_function_listExpr_item_list., 
237	
	 S' -> Program., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 S' -> .E, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 S' -> .E, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 T -> .TF, 
	 F -> .A*, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 E -> .T, 
	 T -> .F, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 S' -> E., 
	 E -> E.|T, 
0	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
	 S' -> .E, 
1	
	 F -> A.*, 
	 F -> A., 
2	
	 F -> A*., 
3	
	 T -> F., 
4	
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 E -> T., 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
5	
	 T -> TF., 
6	
	 A -> ε., 
7	
	 F -> .A*, 
	 T -> .TF, 
	 E -> .E|T, 
	 A -> (.E), 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 E -> .T, 
	 T -> .F, 
8	
	 E -> E.|T, 
	 A -> (E.), 
9	
	 F -> .A*, 
	 T -> .TF, 
	 A -> .symbol, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .F, 
	 E -> E|.T, 
10	
	 E -> E|T., 
	 F -> .A*, 
	 T -> T.F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .(E), 
	 A -> .symbol, 
11	
	 A -> symbol., 
12	
	 A -> (E)., 
13	
	 E -> E.|T, 
	 S' -> E., 
0	
	 Type -> .typeType_decType_block, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 S' -> .Program, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
1	
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
2	
	 Protocol -> protocol.idextendsidProtocol_block, 
	 Protocol -> protocol.idProtocol_block, 
3	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol -> protocolid.Protocol_block, 
4	
	 Protocol -> protocolidextends.idProtocol_block, 
5	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
6	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(), 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
7	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
8	
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_signature -> .id(), 
	 Method_signature -> .id():id, 
	 Method_dec_list -> ., 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
9	
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Method_signature -> id.(Params), 
10	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Method_signature -> id(.), 
	 Params -> .id:id, 
	 Method_signature -> id(.Params), 
	 Method_signature -> id(.):id, 
	 Params -> .id,Params, 
	 Method_signature -> id(.Params):id, 
11	
	 Params -> id.:id, 
	 Params -> id., 
	 Params -> id.,Params, 
	 Params -> id.:id,Params, 
12	
	 Params -> id:.id,Params, 
	 Params -> id:.id, 
13	
	 Params -> id:id., 
	 Params -> id:id.,Params, 
14	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
	 Params -> .id:id, 
	 Params -> .id,Params, 
15	
	 Params -> id:id,Params., 
16	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Params -> id,.Params, 
	 Params -> .id,Params, 
17	
	 Params -> id,Params., 
18	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
19	
	 Method_signature -> id():.id, 
20	
	 Method_signature -> id():id., 
21	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
22	
	 Method_signature -> id(Params).:id, 
	 Method_signature -> id(Params)., 
23	
	 Method_signature -> id(Params):.id, 
24	
	 Method_signature -> id(Params):id., 
25	
	 Method_dec_list -> Method_signature;Method_dec_list., 
26	
	 Protocol_block -> {Method_dec_list.}, 
27	
	 Protocol_block -> {Method_dec_list}., 
28	
	 Protocol -> protocolidextendsidProtocol_block., 
29	
	 Protocol -> protocolidProtocol_block., 
30	
	 Func -> function.Inline_form, 
	 Func -> function.Full_form, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Method_signature -> .id(Params), 
	 Inline_form -> .Method_signature=>Expr;, 
31	
	 Func -> functionInline_form., 
32	
	 Full_form -> Method_signature.Expr_block, 
	 Inline_form -> Method_signature.=>Expr;, 
	 Full_form -> Method_signature.Expr_block;, 
	 Expr_block -> .{Expr_list}, 
33	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_list -> .Expr_item_list, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_block -> {.Expr_list}, 
	 Expr -> .Conditional, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
34	
	 Pow -> Sign.^Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.**Pow, 
35	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Pow -> Sign**.Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
36	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> (.Expr), 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
37	
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Sign -> -.Factor, 
	 Atom -> .(Expr), 
38	
	 Atom -> Member., 
39	
	 Atom -> Vector., 
40	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
41	
	 Type_inst -> newCall_func., 
42	
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
43	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Call_func -> id(.Arguments), 
	 Sign -> .Factor, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Call_func -> id(.), 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
44	
	 Conditional -> if.(Expr)ExprCond_other_case, 
45	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
46	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
47	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 And_expr -> And_expr&.Check_type, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign^Pow, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
48	
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Sign -> +.Factor, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
49	
	 Atom -> bool., 
50	
	 Atom -> Expr_block., 
51	
	 Atom -> num., 
52	
	 Atom -> string., 
53	
	 Vector -> Vector_exp., 
54	
	 Atom -> Call_func., 
55	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Call_func -> id.(Arguments), 
56	
	 Atom -> Index_object., 
57	
	 Atom -> Type_inst., 
58	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
59	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Index_object -> Atom[.Expr], 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
60	
	 Expr -> Destr_assig., 
61	
	 Index_object -> Atom[Expr.], 
62	
	 Index_object -> Atom[Expr]., 
63	
	 Expr -> Conditional., 
64	
	 Expr -> While_loop., 
65	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Term., 
	 Term -> Term./Pow, 
66	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Term -> Term/.Pow, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
67	
	 Term -> Term/Pow., 
68	
	 Vector -> Vector_imp., 
69	
	 Atom -> Cast_type., 
70	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_exp -> [.], 
	 Vector_item_list -> .Expr, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Vector_exp -> [.Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
71	
	 Vector_item_list -> Expr., 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr.,Vector_item_list, 
72	
	 Vector_imp -> [Expr||.idinExpr], 
73	
	 Vector_imp -> [Expr||id.inExpr], 
74	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
75	
	 Vector_imp -> [Expr||idinExpr.], 
76	
	 Vector_imp -> [Expr||idinExpr]., 
77	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Concat., 
78	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Concat -> Concat@.Arithmetic, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
79	
	 Term -> Pow., 
80	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
81	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Arithmetic -> Arithmetic-.Term, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
82	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
83	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Sign -> .Factor, 
	 Term -> Term%.Pow, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
84	
	 Term -> Term%Pow., 
85	
	 Sign -> Factor., 
86	
	 Vector -> .Vector_exp, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .string, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Atom -> .Expr_block, 
	 Factor -> !.Atom, 
	 Atom -> .(Expr), 
87	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Factor -> !Atom., 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
88	
	 Cast_type -> Atomas.id, 
89	
	 Cast_type -> Atomasid., 
90	
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
91	
	 Member -> Atom.Call_func., 
92	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
93	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Term -> Term*.Pow, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
94	
	 Term -> Term*Pow., 
95	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Arithmetic -> Arithmetic+.Term, 
	 Factor -> .Atom, 
	 Member -> .Atom.id, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
96	
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term./Pow, 
97	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Concat -> Concat@@.Arithmetic, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
98	
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
99	
	 Expr -> For_loop., 
100	
	 For_loop -> for.(idinExpr)Expr, 
101	
	 For_loop -> for(.idinExpr)Expr, 
102	
	 For_loop -> for(id.inExpr)Expr, 
103	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 For_loop -> for(idin.Expr)Expr, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
104	
	 For_loop -> for(idinExpr.)Expr, 
105	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 For_loop -> for(idinExpr).Expr, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
106	
	 For_loop -> for(idinExpr)Expr., 
107	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Destr_assig -> Atom..id:=Expr, 
	 Index_object -> Atom.[Expr], 
	 Member -> Atom..Call_func, 
108	
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Call_func -> .id(), 
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(Arguments), 
109	
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(Arguments), 
110	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
111	
	 Destr_assig -> Atom.id:=Expr., 
112	
	 Arithmetic -> Arithmetic.+Term, 
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Arithmetic., 
113	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Let_expr -> let.AssignmentinExpr, 
114	
	 Let_expr -> letAssignment.inExpr, 
115	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Let_expr -> letAssignmentin.Expr, 
	 Atom -> .bool, 
	 Or_expr -> .Or_expr|And_expr, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
116	
	 Let_expr -> letAssignmentinExpr., 
117	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> Check_type., 
118	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
119	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
120	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
121	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
122	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
123	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
124	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
125	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
126	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
127	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
	 Concat -> Concat.@@Arithmetic, 
128	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
129	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
130	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Arithmetic -> .Arithmetic-Term, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Type_inst -> .newCall_func, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Term -> .Pow, 
	 Atom -> .Expr_block, 
	 Atom -> .(Expr), 
131	
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
	 Concat -> Concat.@@Arithmetic, 
132	
	 Expr -> Let_expr., 
133	
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
134	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
135	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Or_expr -> Or_expr|.And_expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Concat -> .Arithmetic, 
	 Call_func -> .id(Arguments), 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Term -> .Term%Pow, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Type_inst -> .newCall_func, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 And_expr -> .And_expr&Check_type, 
	 Atom -> .Member, 
	 Check_type -> .Aritm_comp, 
	 Pow -> .Sign^Pow, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
136	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
137	
	 Call_func -> id.(), 
	 Atom -> id., 
	 Destr_assig -> id.:=Expr, 
	 Call_func -> id.(Arguments), 
138	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> id:=.Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
139	
	 Destr_assig -> id:=Expr., 
140	
	 While_loop -> while.(Expr)Expr, 
141	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 While_loop -> while(.Expr)Expr, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
142	
	 While_loop -> while(Expr.)Expr, 
143	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 While_loop -> while(Expr).Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
144	
	 While_loop -> while(Expr)Expr., 
145	
	 Assignment -> id.=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.:id=Expr, 
146	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
147	
	 Assignment -> id:id.=Expr,Assignment, 
	 Assignment -> id:id.=Expr, 
148	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Assignment -> id:id=.Expr, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Assignment -> id:id=.Expr,Assignment, 
	 Expr -> .While_loop, 
149	
	 Assignment -> id:id=Expr.,Assignment, 
	 Assignment -> id:id=Expr., 
150	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id:id=Expr, 
151	
	 Assignment -> id:id=Expr,Assignment., 
152	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Assignment -> id=.Expr, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Destr_assig -> .Or_expr, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
153	
	 Assignment -> id=Expr.,Assignment, 
	 Assignment -> id=Expr., 
154	
	 Assignment -> .id=Expr, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id:id=Expr, 
	 Assignment -> id=Expr,.Assignment, 
155	
	 Assignment -> id=Expr,Assignment., 
156	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Vector_item_list -> .Expr, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
157	
	 Vector_item_list -> Expr., 
	 Vector_item_list -> Expr.,Vector_item_list, 
158	
	 Vector_item_list -> Expr,Vector_item_list., 
159	
	 Vector_exp -> [Vector_item_list.], 
160	
	 Vector_exp -> [Vector_item_list]., 
161	
	 Vector_exp -> []., 
162	
	 Sign -> +Factor., 
163	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
164	
	 Conditional -> if(Expr.)ExprCond_other_case, 
165	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
166	
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
167	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
168	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
169	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
170	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
171	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
	 Cond_other_case -> .elseExpr, 
172	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
173	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Cond_other_case -> else.Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
174	
	 Cond_other_case -> elseExpr., 
175	
	 Conditional -> if(Expr)ExprCond_other_case., 
176	
	 Arguments -> Expr.,Arguments, 
	 Arguments -> Expr., 
177	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arguments -> Expr,.Arguments, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
178	
	 Arguments -> Expr,Arguments., 
179	
	 Call_func -> id(Arguments.), 
180	
	 Call_func -> id(Arguments)., 
181	
	 Call_func -> id()., 
182	
	 Sign -> -Factor., 
183	
	 Atom -> (Expr.), 
184	
	 Atom -> (Expr)., 
185	
	 Pow -> Sign**Pow., 
186	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Sign -> .+Factor, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Sign -> .Factor, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Type_inst -> .newCall_func, 
	 Factor -> .!Atom, 
	 Atom -> .string, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Vector_exp -> .[], 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 Expr_block -> .{Expr_list}, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 Pow -> Sign^.Pow, 
	 Atom -> .(Expr), 
187	
	 Pow -> Sign^Pow., 
188	
	 Expr_block -> {Expr_list.}, 
189	
	 Expr_block -> {Expr_list}., 
190	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Expr_list -> .Expr_item_list, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 Atom -> .string, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr_list -> Expr_item_list., 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
191	
	 Expr_list -> Expr_item_listExpr_list., 
192	
	 Expr_item_list -> Expr.;, 
193	
	 Expr_item_list -> Expr;., 
194	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Arithmetic -> .Term, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
195	
	 Inline_form -> Method_signature=>Expr.;, 
196	
	 Inline_form -> Method_signature=>Expr;., 
197	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
198	
	 Full_form -> Method_signatureExpr_block;., 
199	
	 Func -> functionFull_form., 
200	
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Type_function_list -> .ProtocolType_function_list, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> .FuncType_function_list, 
201	
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id(Params), 
	 Type -> type.Type_decType_block, 
	 Type_dec -> .id, 
202	
	 Type -> typeType_dec.inheritsidType_block, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.Type_block, 
203	
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
	 Type -> typeType_decinherits.idType_block, 
204	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
205	
	 Type -> typeType_decinheritsidType_block., 
206	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Arguments -> .Expr,Arguments, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Arguments -> .Expr, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
207	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
208	
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
	 Type_block -> .{Type_member_list}, 
209	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
210	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Type_block -> {.Type_member_list}, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
211	
	 Type_block -> {Type_member_list.}, 
212	
	 Type_block -> {Type_member_list}., 
213	
	 Type_member_item -> Inline_form., 
214	
	 Type_member_item -> Full_form., 
215	
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Type_member_item -> .id=Expr;, 
	 Type_member_list -> ., 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(), 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(Params), 
	 Type_member_item -> .Inline_form, 
	 Method_signature -> .id():id, 
	 Method_signature -> .id(Params):id, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
216	
	 Type_member_list -> Type_member_itemType_member_list., 
217	
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.(Params), 
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
218	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Type_member_item -> id=.Expr;, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
219	
	 Type_member_item -> id=Expr.;, 
220	
	 Type_member_item -> id=Expr;., 
221	
	 Type_member_item -> id:.id=Expr;, 
222	
	 Type_member_item -> id:id.=Expr;, 
223	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Term -> .Term%Pow, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Type_member_item -> id:id=.Expr;, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Pow -> .Sign^Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
224	
	 Type_member_item -> id:id=Expr.;, 
225	
	 Type_member_item -> id:id=Expr;., 
226	
	 Type -> typeType_decType_block., 
227	
	 Type_dec -> id.(Params), 
	 Type_dec -> id., 
228	
	 Params -> .id:id,Params, 
	 Params -> .id, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id,Params, 
229	
	 Type_dec -> id(Params.), 
230	
	 Type_dec -> id(Params)., 
231	
	 Type_function_list -> ProtocolType_function_list., 
232	
	 Type -> .typeType_decType_block, 
	 Func -> .functionInline_form, 
	 Type_function_list -> .TypeType_function_list, 
	 Type -> .typeType_decinheritsidType_block, 
	 Type_function_list -> ., 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Func.Type_function_list, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
233	
	 Type_function_list -> FuncType_function_list., 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 S' -> Program., 
236	
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .bool, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 For_loop -> .for(idinExpr)Expr, 
	 Arithmetic -> .Arithmetic+Term, 
	 Sign -> .+Factor, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Call_func -> .id(Arguments), 
	 Concat -> .Arithmetic, 
	 Term -> .Term*Pow, 
	 Sign -> .Factor, 
	 Destr_assig -> .id:=Expr, 
	 Member -> .Atom.id, 
	 Factor -> .Atom, 
	 Sign -> .-Factor, 
	 Let_expr -> .letAssignmentinExpr, 
	 Expr_item_list -> .Expr;, 
	 Term -> .Term%Pow, 
	 Program -> Type_function_list.Expr_item_list, 
	 Expr -> .For_loop, 
	 Type_inst -> .newCall_func, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr -> .Conditional, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .string, 
	 Arithmetic -> .Term, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Concat -> .Concat@@Arithmetic, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Destr_assig, 
	 Destr_assig -> .Atom.id:=Expr, 
	 Atom -> .Call_func, 
	 Atom -> .Cast_type, 
	 Call_func -> .id(), 
	 Vector_exp -> .[], 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Atom -> .num, 
	 Atom -> .Index_object, 
	 Index_object -> .Atom[Expr], 
	 Or_expr -> .And_expr, 
	 Vector -> .Vector_imp, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Atom -> .id, 
	 Expr -> .Let_expr, 
	 Atom -> .Type_inst, 
	 Atom -> .Member, 
	 Cast_type -> .Atomasid, 
	 While_loop -> .while(Expr)Expr, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_block -> .{Expr_list}, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Expr_block, 
	 And_expr -> .Check_type, 
	 Term -> .Pow, 
	 Aritm_comp -> .Concat, 
	 Atom -> .(Expr), 
	 Expr -> .While_loop, 
237	
	 Program -> Type_function_listExpr_item_list., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
	 S' -> .E, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 S' -> .E, 
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 S' -> .E, 
	 T -> .F, 
	 A -> .ε, 
	 F -> .A, 
	 A -> .symbol, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 E -> E.|T, 
	 S' -> E., 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 S' -> .E, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 S' -> .E, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 S' -> .E, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 S' -> .E, 
	 T -> .TF, 
	 E -> .E|T, 
1	
	 A -> ε., 
2	
	 F -> A., 
	 F -> A.*, 
3	
	 F -> A*., 
4	
	 S' -> E., 
	 E -> E.|T, 
5	
	 F -> .A*, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 T -> .TF, 
	 E -> E|.T, 
6	
	 F -> .A*, 
	 E -> .T, 
	 A -> .ε, 
	 T -> .F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 A -> (.E), 
	 T -> .TF, 
	 E -> .E|T, 
7	
	 E -> E.|T, 
	 A -> (E.), 
8	
	 A -> (E)., 
9	
	 T -> F., 
10	
	 A -> symbol., 
11	
	 F -> .A*, 
	 E -> T., 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
12	
	 T -> TF., 
13	
	 F -> .A*, 
	 A -> .ε, 
	 T -> T.F, 
	 A -> .symbol, 
	 F -> .A, 
	 A -> .(E), 
	 E -> E|T., 
0	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 S' -> .Program, 
	 Func -> .functionInline_form, 
	 Program -> .Type_function_listExpr_item_list, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
1	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Func.Type_function_list, 
	 Type_function_list -> ., 
2	
	 Protocol -> protocol.idProtocol_block, 
	 Protocol -> protocol.idextendsidProtocol_block, 
3	
	 Protocol -> protocolid.extendsidProtocol_block, 
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolid.Protocol_block, 
4	
	 Protocol -> protocolidextends.idProtocol_block, 
5	
	 Protocol_block -> .{Method_dec_list}, 
	 Protocol -> protocolidextendsid.Protocol_block, 
6	
	 Method_signature -> .id():id, 
	 Protocol_block -> {.Method_dec_list}, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> ., 
7	
	 Method_dec_list -> Method_signature.;Method_dec_list, 
8	
	 Method_signature -> .id():id, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Method_dec_list -> .Method_signature;Method_dec_list, 
	 Method_signature -> .id(Params), 
	 Method_dec_list -> Method_signature;.Method_dec_list, 
	 Method_dec_list -> ., 
9	
	 Method_dec_list -> Method_signature;Method_dec_list., 
10	
	 Method_signature -> id.(Params), 
	 Method_signature -> id.(), 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params):id, 
11	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Method_signature -> id(.), 
	 Method_signature -> id(.Params):id, 
	 Params -> .id, 
	 Method_signature -> id(.):id, 
	 Method_signature -> id(.Params), 
	 Params -> .id,Params, 
12	
	 Method_signature -> id(Params.):id, 
	 Method_signature -> id(Params.), 
13	
	 Method_signature -> id(Params)., 
	 Method_signature -> id(Params).:id, 
14	
	 Method_signature -> id(Params):.id, 
15	
	 Method_signature -> id(Params):id., 
16	
	 Method_signature -> id()., 
	 Method_signature -> id().:id, 
17	
	 Method_signature -> id():.id, 
18	
	 Method_signature -> id():id., 
19	
	 Params -> id.,Params, 
	 Params -> id.:id, 
	 Params -> id.:id,Params, 
	 Params -> id., 
20	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> id,.Params, 
	 Params -> .id,Params, 
21	
	 Params -> id,Params., 
22	
	 Params -> id:.id, 
	 Params -> id:.id,Params, 
23	
	 Params -> id:id.,Params, 
	 Params -> id:id., 
24	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Params -> .id, 
	 Params -> id:id,.Params, 
	 Params -> .id,Params, 
25	
	 Params -> id:id,Params., 
26	
	 Protocol_block -> {Method_dec_list.}, 
27	
	 Protocol_block -> {Method_dec_list}., 
28	
	 Protocol -> protocolidextendsidProtocol_block., 
29	
	 Protocol -> protocolidProtocol_block., 
30	
	 Method_signature -> .id():id, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Func -> function.Inline_form, 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Inline_form -> .Method_signature=>Expr;, 
	 Func -> function.Full_form, 
31	
	 Full_form -> Method_signature.Expr_block;, 
	 Full_form -> Method_signature.Expr_block, 
	 Expr_block -> .{Expr_list}, 
	 Inline_form -> Method_signature.=>Expr;, 
32	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Expr_block -> {.Expr_list}, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_list, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
33	
	 Vector_exp -> .[Vector_item_list], 
	 Sign -> -.Factor, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
34	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
35	
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
	 Call_func -> .id(), 
36	
	 Member -> Atom.Call_func., 
37	
	 Call_func -> id.(Arguments), 
	 Member -> Atom.id., 
	 Call_func -> id.(), 
38	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Call_func -> id(.), 
	 Arguments -> .Expr, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Call_func -> id(.Arguments), 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
39	
	 And_expr -> Check_type., 
	 Check_type -> Check_type.isAritm_comp, 
40	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Check_type -> Check_typeis.Aritm_comp, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
41	
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
42	
	 Vector -> Vector_imp., 
43	
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
	 Concat -> Arithmetic., 
44	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Arithmetic -> Arithmetic-.Term, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
45	
	 Atom -> bool., 
46	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Vector_item_list -> .Expr, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Vector_exp -> [.], 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Vector_exp -> [.Vector_item_list], 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Vector_imp -> [.Expr||idinExpr], 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
47	
	 Expr -> For_loop., 
48	
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Destr_assig -> Atom..id:=Expr, 
	 Factor -> Atom., 
	 Index_object -> Atom.[Expr], 
49	
	 Destr_assig -> Atom..id:=Expr, 
	 Call_func -> .id(), 
	 Call_func -> .id(Arguments), 
	 Member -> Atom..id, 
	 Member -> Atom..Call_func, 
50	
	 Destr_assig -> Atom.id.:=Expr, 
	 Call_func -> id.(), 
	 Member -> Atom.id., 
	 Call_func -> id.(Arguments), 
51	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Destr_assig -> Atom.id:=.Expr, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
52	
	 Destr_assig -> id.:=Expr, 
	 Atom -> id., 
	 Call_func -> id.(), 
	 Call_func -> id.(Arguments), 
53	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Destr_assig -> id:=.Expr, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
54	
	 Expr -> Let_expr., 
55	
	 For_loop -> for.(idinExpr)Expr, 
56	
	 For_loop -> for(.idinExpr)Expr, 
57	
	 For_loop -> for(id.inExpr)Expr, 
58	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 For_loop -> for(idin.Expr)Expr, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
59	
	 Atom -> string., 
60	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Atom -> (.Expr), 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
61	
	 Expr -> Conditional., 
62	
	 Expr -> While_loop., 
63	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> And_expr., 
64	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 And_expr -> And_expr&.Check_type, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
65	
	 Check_type -> Check_type.isAritm_comp, 
	 And_expr -> And_expr&Check_type., 
66	
	 Vector -> Vector_exp., 
67	
	 Atom -> Vector., 
68	
	 Arithmetic -> Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
69	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Term -> Term*.Pow, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
70	
	 Atom -> Cast_type., 
71	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Factor -> !.Atom, 
	 Atom -> .Index_object, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
72	
	 Atom -> num., 
73	
	 Factor -> !Atom., 
	 Cast_type -> Atom.asid, 
	 Member -> Atom..Call_func, 
	 Member -> Atom..id, 
	 Index_object -> Atom.[Expr], 
74	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> Atom[.Expr], 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
75	
	 Expr -> Destr_assig., 
76	
	 Index_object -> Atom[Expr.], 
77	
	 Index_object -> Atom[Expr]., 
78	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Check_type -> Aritm_comp., 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
79	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Aritm_comp -> Aritm_comp>=.Concat, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
80	
	 Sign -> Factor., 
81	
	 Aritm_comp -> Aritm_comp>=Concat., 
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
82	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> Concat@.Arithmetic, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
83	
	 Arithmetic -> Arithmetic.-Term, 
	 Concat -> Concat@Arithmetic., 
	 Arithmetic -> Arithmetic.+Term, 
84	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Arithmetic -> Arithmetic+.Term, 
85	
	 Term -> Term.%Pow, 
	 Arithmetic -> Arithmetic+Term., 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
86	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Term -> Term%.Pow, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
87	
	 Term -> Term%Pow., 
88	
	 Call_func -> .id(Arguments), 
	 Call_func -> .id(), 
	 Type_inst -> new.Call_func, 
89	
	 Type_inst -> newCall_func., 
90	
	 Call_func -> id.(Arguments), 
	 Call_func -> id.(), 
91	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Sign -> +.Factor, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
92	
	 Sign -> +Factor., 
93	
	 Atom -> Type_inst., 
94	
	 Atom -> Member., 
95	
	 Atom -> Expr_block., 
96	
	 Atom -> Call_func., 
97	
	 Atom -> Index_object., 
98	
	 Pow -> Sign.**Pow, 
	 Pow -> Sign., 
	 Pow -> Sign.^Pow, 
99	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Pow -> Sign**.Pow, 
100	
	 Pow -> Sign**Pow., 
101	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Pow -> Sign^.Pow, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
102	
	 Pow -> Sign^Pow., 
103	
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Term -> Term/.Pow, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
104	
	 Term -> Term/Pow., 
105	
	 Term -> Pow., 
106	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> Concat@@.Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Pow -> .Sign^Pow, 
	 Arithmetic -> .Arithmetic+Term, 
	 Atom -> .Call_func, 
	 Member -> .Atom.Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
107	
	 Concat -> Concat@@Arithmetic., 
	 Arithmetic -> Arithmetic.-Term, 
	 Arithmetic -> Arithmetic.+Term, 
108	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Aritm_comp -> Aritm_comp!=.Concat, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
109	
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp!=Concat., 
	 Concat -> Concat.@Arithmetic, 
110	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Aritm_comp -> Aritm_comp<.Concat, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
111	
	 Aritm_comp -> Aritm_comp<Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
112	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Aritm_comp -> Aritm_comp==.Concat, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
113	
	 Aritm_comp -> Aritm_comp==Concat., 
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
114	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Aritm_comp -> Aritm_comp>.Concat, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
115	
	 Concat -> Concat.@Arithmetic, 
	 Concat -> Concat.@@Arithmetic, 
	 Aritm_comp -> Aritm_comp>Concat., 
116	
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Vector_imp -> .[Expr||idinExpr], 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Atom -> .Call_func, 
	 Pow -> .Sign**Pow, 
	 Expr_block -> .{Expr_list}, 
	 Aritm_comp -> Aritm_comp<=.Concat, 
117	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Aritm_comp<=Concat., 
118	
	 Or_expr -> Or_expr.|And_expr, 
	 Destr_assig -> Or_expr., 
119	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Term -> .Term%Pow, 
	 Vector_exp -> .[Vector_item_list], 
	 Atom -> .num, 
	 Atom -> .id, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Atom -> .(Expr), 
	 Arithmetic -> .Term, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Concat, 
	 Index_object -> .Atom[Expr], 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Call_func -> .id(), 
	 Term -> .Pow, 
	 Vector -> .Vector_exp, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Atom -> .Vector, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 And_expr -> .And_expr&Check_type, 
	 Member -> .Atom.id, 
	 Member -> .Atom.Call_func, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Concat -> .Concat@Arithmetic, 
	 Atom -> .Expr_block, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Atom -> .Index_object, 
	 Factor -> .Atom, 
	 Term -> .Term*Pow, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Or_expr -> Or_expr|.And_expr, 
	 Pow -> .Sign^Pow, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
120	
	 And_expr -> And_expr.&Check_type, 
	 Or_expr -> Or_expr|And_expr., 
121	
	 Concat -> Concat.@@Arithmetic, 
	 Concat -> Concat.@Arithmetic, 
	 Aritm_comp -> Concat., 
122	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Let_expr -> let.AssignmentinExpr, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
123	
	 Assignment -> id.:id=Expr, 
	 Assignment -> id.=Expr,Assignment, 
	 Assignment -> id.:id=Expr,Assignment, 
	 Assignment -> id.=Expr, 
124	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Assignment -> id=.Expr, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Assignment -> id=.Expr,Assignment, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
125	
	 Assignment -> id=Expr., 
	 Assignment -> id=Expr.,Assignment, 
126	
	 Assignment -> id=Expr,.Assignment, 
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
127	
	 Assignment -> id=Expr,Assignment., 
128	
	 Conditional -> if.(Expr)ExprCond_other_case, 
129	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Conditional -> if(.Expr)ExprCond_other_case, 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
130	
	 Conditional -> if(Expr.)ExprCond_other_case, 
131	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Conditional -> if(Expr).ExprCond_other_case, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
132	
	 Conditional -> if(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
133	
	 Conditional -> if(Expr)ExprCond_other_case., 
134	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Cond_other_case -> else.Expr, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
135	
	 Cond_other_case -> elseExpr., 
136	
	 While_loop -> while.(Expr)Expr, 
137	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 While_loop -> while(.Expr)Expr, 
	 Destr_assig -> .Atom.id:=Expr, 
138	
	 While_loop -> while(Expr.)Expr, 
139	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 While_loop -> while(Expr).Expr, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
140	
	 While_loop -> while(Expr)Expr., 
141	
	 Cond_other_case -> elif.(Expr)ExprCond_other_case, 
142	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 Cond_other_case -> elif(.Expr)ExprCond_other_case, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
143	
	 Cond_other_case -> elif(Expr.)ExprCond_other_case, 
144	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Cond_other_case -> elif(Expr).ExprCond_other_case, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
145	
	 Cond_other_case -> elif(Expr)Expr.Cond_other_case, 
	 Cond_other_case -> .elseExpr, 
	 Cond_other_case -> .elif(Expr)ExprCond_other_case, 
146	
	 Cond_other_case -> elif(Expr)ExprCond_other_case., 
147	
	 Assignment -> id:.id=Expr, 
	 Assignment -> id:.id=Expr,Assignment, 
148	
	 Assignment -> id:id.=Expr, 
	 Assignment -> id:id.=Expr,Assignment, 
149	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Assignment -> id:id=.Expr, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Assignment -> id:id=.Expr,Assignment, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Type_inst -> .newCall_func, 
	 Pow -> .Sign**Pow, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
150	
	 Assignment -> id:id=Expr., 
	 Assignment -> id:id=Expr.,Assignment, 
151	
	 Assignment -> .id=Expr,Assignment, 
	 Assignment -> .id:id=Expr,Assignment, 
	 Assignment -> id:id=Expr,.Assignment, 
	 Assignment -> .id=Expr, 
	 Assignment -> .id:id=Expr, 
152	
	 Assignment -> id:id=Expr,Assignment., 
153	
	 Let_expr -> letAssignment.inExpr, 
154	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Let_expr -> letAssignmentin.Expr, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
155	
	 Let_expr -> letAssignmentinExpr., 
156	
	 Cast_type -> Atomas.id, 
157	
	 Cast_type -> Atomasid., 
158	
	 Term -> Term*Pow., 
159	
	 Atom -> (Expr.), 
160	
	 Atom -> (Expr)., 
161	
	 For_loop -> for(idinExpr.)Expr, 
162	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 For_loop -> for(idinExpr).Expr, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
163	
	 For_loop -> for(idinExpr)Expr., 
164	
	 Destr_assig -> id:=Expr., 
165	
	 Destr_assig -> Atom.id:=Expr., 
166	
	 Vector_exp -> []., 
167	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_imp -> [Expr.||idinExpr], 
	 Vector_item_list -> Expr., 
168	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Vector_item_list -> .Expr, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Vector_item_list -> .Expr,Vector_item_list, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Vector_item_list -> Expr,.Vector_item_list, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
169	
	 Vector_item_list -> Expr.,Vector_item_list, 
	 Vector_item_list -> Expr., 
170	
	 Vector_item_list -> Expr,Vector_item_list., 
171	
	 Vector_imp -> [Expr||.idinExpr], 
172	
	 Vector_imp -> [Expr||id.inExpr], 
173	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Vector_imp -> [Expr||idin.Expr], 
	 Atom -> .Call_func, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Atom.id:=Expr, 
174	
	 Vector_imp -> [Expr||idinExpr.], 
175	
	 Vector_imp -> [Expr||idinExpr]., 
176	
	 Vector_exp -> [Vector_item_list.], 
177	
	 Vector_exp -> [Vector_item_list]., 
178	
	 Arithmetic -> Arithmetic-Term., 
	 Term -> Term.%Pow, 
	 Term -> Term.*Pow, 
	 Term -> Term./Pow, 
179	
	 Aritm_comp -> Aritm_comp.>=Concat, 
	 Aritm_comp -> Aritm_comp.!=Concat, 
	 Aritm_comp -> Aritm_comp.<=Concat, 
	 Check_type -> Check_typeisAritm_comp., 
	 Aritm_comp -> Aritm_comp.==Concat, 
	 Aritm_comp -> Aritm_comp.<Concat, 
	 Aritm_comp -> Aritm_comp.>Concat, 
180	
	 Arguments -> Expr., 
	 Arguments -> Expr.,Arguments, 
181	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Arguments -> Expr,.Arguments, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
182	
	 Arguments -> Expr,Arguments., 
183	
	 Call_func -> id(Arguments.), 
184	
	 Call_func -> id(Arguments)., 
185	
	 Call_func -> id()., 
186	
	 Sign -> -Factor., 
187	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Expr_list -> Expr_item_list., 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 Expr_list -> .Expr_item_listExpr_list, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Expr_list -> Expr_item_list.Expr_list, 
	 Factor -> .Atom, 
	 Expr_list -> .Expr_item_list, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
188	
	 Expr_item_list -> Expr.;, 
189	
	 Expr_item_list -> Expr;., 
190	
	 Expr_list -> Expr_item_listExpr_list., 
191	
	 Expr_block -> {Expr_list.}, 
192	
	 Expr_block -> {Expr_list}., 
193	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Pow -> .Sign^Pow, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Inline_form -> Method_signature=>.Expr;, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Expr_block -> .{Expr_list}, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Destr_assig -> .Atom.id:=Expr, 
194	
	 Inline_form -> Method_signature=>Expr.;, 
195	
	 Inline_form -> Method_signature=>Expr;., 
196	
	 Full_form -> Method_signatureExpr_block.;, 
	 Full_form -> Method_signatureExpr_block., 
197	
	 Full_form -> Method_signatureExpr_block;., 
198	
	 Func -> functionInline_form., 
199	
	 Func -> functionFull_form., 
200	
	 Type -> type.Type_decType_block, 
	 Type -> type.Type_decinheritsidType_block, 
	 Type_dec -> .id, 
	 Type -> type.Type_decinheritsid(Arguments)Type_block, 
	 Type_dec -> .id(Params), 
201	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_dec.inheritsid(Arguments)Type_block, 
	 Type -> typeType_dec.Type_block, 
	 Type -> typeType_dec.inheritsidType_block, 
202	
	 Type -> typeType_decType_block., 
203	
	 Method_signature -> .id():id, 
	 Type_block -> {.Type_member_list}, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
204	
	 Type_member_item -> Inline_form., 
205	
	 Type_member_item -> id.:id=Expr;, 
	 Method_signature -> id.(), 
	 Method_signature -> id.(Params):id, 
	 Type_member_item -> id.=Expr;, 
	 Method_signature -> id.():id, 
	 Method_signature -> id.(Params), 
206	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Type_member_item -> id=.Expr;, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
207	
	 Type_member_item -> id=Expr.;, 
208	
	 Type_member_item -> id=Expr;., 
209	
	 Type_member_item -> id:.id=Expr;, 
210	
	 Type_member_item -> id:id.=Expr;, 
211	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Type_member_item -> id:id=.Expr;, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
212	
	 Type_member_item -> id:id=Expr.;, 
213	
	 Type_member_item -> id:id=Expr;., 
214	
	 Type_member_item -> Full_form., 
215	
	 Type_block -> {Type_member_list.}, 
216	
	 Type_block -> {Type_member_list}., 
217	
	 Type_member_list -> Type_member_item.Type_member_list, 
	 Method_signature -> .id():id, 
	 Type_member_item -> .id:id=Expr;, 
	 Type_member_item -> .Inline_form, 
	 Type_member_list -> .Type_member_itemType_member_list, 
	 Full_form -> .Method_signatureExpr_block;, 
	 Method_signature -> .id(), 
	 Method_signature -> .id(Params):id, 
	 Full_form -> .Method_signatureExpr_block, 
	 Method_signature -> .id(Params), 
	 Type_member_list -> ., 
	 Type_member_item -> .id=Expr;, 
	 Type_member_item -> .Full_form, 
	 Inline_form -> .Method_signature=>Expr;, 
218	
	 Type_member_list -> Type_member_itemType_member_list., 
219	
	 Type -> typeType_decinherits.idType_block, 
	 Type -> typeType_decinherits.id(Arguments)Type_block, 
220	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid.(Arguments)Type_block, 
	 Type -> typeType_decinheritsid.Type_block, 
221	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Check_type -> .Check_typeisAritm_comp, 
	 Arguments -> .Expr,Arguments, 
	 Atom -> .(Expr), 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Type -> typeType_decinheritsid(.Arguments)Type_block, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Arguments -> .Expr, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
222	
	 Type -> typeType_decinheritsid(Arguments.)Type_block, 
223	
	 Type_block -> .{Type_member_list}, 
	 Type -> typeType_decinheritsid(Arguments).Type_block, 
224	
	 Type -> typeType_decinheritsid(Arguments)Type_block., 
225	
	 Type -> typeType_decinheritsidType_block., 
226	
	 Type_dec -> id., 
	 Type_dec -> id.(Params), 
227	
	 Params -> .id:id,Params, 
	 Params -> .id:id, 
	 Type_dec -> id(.Params), 
	 Params -> .id, 
	 Params -> .id,Params, 
228	
	 Type_dec -> id(Params.), 
229	
	 Type_dec -> id(Params)., 
230	
	 Type_function_list -> FuncType_function_list., 
231	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> Protocol.Type_function_list, 
	 Type_function_list -> ., 
232	
	 Type_function_list -> ProtocolType_function_list., 
233	
	 Type_function_list -> .TypeType_function_list, 
	 Type_function_list -> .FuncType_function_list, 
	 Type_function_list -> .ProtocolType_function_list, 
	 Type_function_list -> Type.Type_function_list, 
	 Type -> .typeType_decType_block, 
	 Protocol -> .protocolidProtocol_block, 
	 Type -> .typeType_decinheritsidType_block, 
	 Protocol -> .protocolidextendsidProtocol_block, 
	 Type -> .typeType_decinheritsid(Arguments)Type_block, 
	 Func -> .functionInline_form, 
	 Func -> .functionFull_form, 
	 Type_function_list -> ., 
234	
	 Type_function_list -> TypeType_function_list., 
235	
	 S' -> Program., 
236	
	 Aritm_comp -> .Aritm_comp==Concat, 
	 Vector_exp -> .[Vector_item_list], 
	 Term -> .Term%Pow, 
	 Atom -> .num, 
	 Atom -> .id, 
	 Conditional -> .if(Expr)ExprCond_other_case, 
	 Factor -> .!Atom, 
	 Vector_exp -> .[], 
	 Let_expr -> .letAssignmentinExpr, 
	 Program -> Type_function_list.Expr_item_list, 
	 Atom -> .(Expr), 
	 Check_type -> .Check_typeisAritm_comp, 
	 Aritm_comp -> .Aritm_comp!=Concat, 
	 Vector_imp -> .[Expr||idinExpr], 
	 Aritm_comp -> .Aritm_comp>=Concat, 
	 Concat -> .Concat@@Arithmetic, 
	 Arithmetic -> .Term, 
	 Index_object -> .Atom[Expr], 
	 Aritm_comp -> .Concat, 
	 Sign -> .+Factor, 
	 Vector -> .Vector_imp, 
	 Cast_type -> .Atomasid, 
	 Expr -> .For_loop, 
	 Call_func -> .id(), 
	 Vector -> .Vector_exp, 
	 Term -> .Pow, 
	 And_expr -> .Check_type, 
	 Pow -> .Sign, 
	 Destr_assig -> .Or_expr, 
	 Atom -> .Vector, 
	 Expr -> .While_loop, 
	 Atom -> .bool, 
	 Sign -> .-Factor, 
	 Atom -> .string, 
	 Atom -> .Cast_type, 
	 Member -> .Atom.id, 
	 And_expr -> .And_expr&Check_type, 
	 For_loop -> .for(idinExpr)Expr, 
	 Term -> .Term/Pow, 
	 Pow -> .Sign**Pow, 
	 Type_inst -> .newCall_func, 
	 Atom -> .Member, 
	 Atom -> .Type_inst, 
	 Expr_item_list -> .Expr;, 
	 Call_func -> .id(Arguments), 
	 Atom -> .Expr_block, 
	 Concat -> .Concat@Arithmetic, 
	 Expr -> .Conditional, 
	 Expr -> .Let_expr, 
	 Aritm_comp -> .Aritm_comp<Concat, 
	 Aritm_comp -> .Aritm_comp>Concat, 
	 Sign -> .Factor, 
	 Arithmetic -> .Arithmetic-Term, 
	 Check_type -> .Aritm_comp, 
	 Atom -> .Index_object, 
	 While_loop -> .while(Expr)Expr, 
	 Aritm_comp -> .Aritm_comp<=Concat, 
	 Factor -> .Atom, 
	 Or_expr -> .And_expr, 
	 Term -> .Term*Pow, 
	 Destr_assig -> .id:=Expr, 
	 Atom -> .Call_func, 
	 Expr_block -> .{Expr_list}, 
	 Member -> .Atom.Call_func, 
	 Or_expr -> .Or_expr|And_expr, 
	 Expr -> .Destr_assig, 
	 Concat -> .Arithmetic, 
	 Arithmetic -> .Arithmetic+Term, 
	 Pow -> .Sign^Pow, 
	 Destr_assig -> .Atom.id:=Expr, 
237	
	 Program -> Type_function_listExpr_item_list., 
